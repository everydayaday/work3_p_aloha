                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _state_switches_PARM_2
                                     12 	.globl _main
                                     13 	.globl _make_linefi_payload
                                     14 	.globl _send_ACK
                                     15 	.globl _start_aloha
                                     16 	.globl _act_by_one_key
                                     17 	.globl _print_help
                                     18 	.globl _printoutbuf
                                     19 	.globl _state_switches
                                     20 	.globl _gpio_setup
                                     21 	.globl _disp_help
                                     22 	.globl _MODIFY_HIRC_166
                                     23 	.globl _pin_interrupt_isr
                                     24 	.globl _Timer0_ISR
                                     25 	.globl _state_machine
                                     26 	.globl _print_char
                                     27 	.globl _print_esc
                                     28 	.globl _print_linefipacket
                                     29 	.globl _cp_buf2linefipacket
                                     30 	.globl _send_linefi_packet
                                     31 	.globl _send_octet_to_linefi
                                     32 	.globl _add_crc_linefi_packet_packet
                                     33 	.globl _getchar_uart1
                                     34 	.globl _getchar_uart0
                                     35 	.globl _uart_setup
                                     36 	.globl _InitialUART1_Timer3
                                     37 	.globl _printf_fast_f
                                     38 	.globl _printf
                                     39 	.globl _MOSI
                                     40 	.globl _P00
                                     41 	.globl _MISO
                                     42 	.globl _P01
                                     43 	.globl _RXD_1
                                     44 	.globl _P02
                                     45 	.globl _P03
                                     46 	.globl _STADC
                                     47 	.globl _P04
                                     48 	.globl _P05
                                     49 	.globl _TXD
                                     50 	.globl _P06
                                     51 	.globl _RXD
                                     52 	.globl _P07
                                     53 	.globl _IT0
                                     54 	.globl _IE0
                                     55 	.globl _IT1
                                     56 	.globl _IE1
                                     57 	.globl _TR0
                                     58 	.globl _TF0
                                     59 	.globl _TR1
                                     60 	.globl _TF1
                                     61 	.globl _P10
                                     62 	.globl _P11
                                     63 	.globl _P12
                                     64 	.globl _SCL
                                     65 	.globl _P13
                                     66 	.globl _SDA
                                     67 	.globl _P14
                                     68 	.globl _P15
                                     69 	.globl _TXD_1
                                     70 	.globl _P16
                                     71 	.globl _P17
                                     72 	.globl _RI
                                     73 	.globl _TI
                                     74 	.globl _RB8
                                     75 	.globl _TB8
                                     76 	.globl _REN
                                     77 	.globl _SM2
                                     78 	.globl _SM1
                                     79 	.globl _FE
                                     80 	.globl _SM0
                                     81 	.globl _P20
                                     82 	.globl _EX0
                                     83 	.globl _ET0
                                     84 	.globl _EX1
                                     85 	.globl _ET1
                                     86 	.globl _ES
                                     87 	.globl _EBOD
                                     88 	.globl _EADC
                                     89 	.globl _EA
                                     90 	.globl _P30
                                     91 	.globl _PX0
                                     92 	.globl _PT0
                                     93 	.globl _PX1
                                     94 	.globl _PT1
                                     95 	.globl _PS
                                     96 	.globl _PBOD
                                     97 	.globl _PADC
                                     98 	.globl _I2CPX
                                     99 	.globl _AA
                                    100 	.globl _SI
                                    101 	.globl _STO
                                    102 	.globl _STA
                                    103 	.globl _I2CEN
                                    104 	.globl _CM_RL2
                                    105 	.globl _TR2
                                    106 	.globl _TF2
                                    107 	.globl _P
                                    108 	.globl _OV
                                    109 	.globl _RS0
                                    110 	.globl _RS1
                                    111 	.globl _F0
                                    112 	.globl _AC
                                    113 	.globl _CY
                                    114 	.globl _CLRPWM
                                    115 	.globl _PWMF
                                    116 	.globl _LOAD
                                    117 	.globl _PWMRUN
                                    118 	.globl _ADCHS0
                                    119 	.globl _ADCHS1
                                    120 	.globl _ADCHS2
                                    121 	.globl _ADCHS3
                                    122 	.globl _ETGSEL0
                                    123 	.globl _ETGSEL1
                                    124 	.globl _ADCS
                                    125 	.globl _ADCF
                                    126 	.globl _RI_1
                                    127 	.globl _TI_1
                                    128 	.globl _RB8_1
                                    129 	.globl _TB8_1
                                    130 	.globl _REN_1
                                    131 	.globl _SM2_1
                                    132 	.globl _SM1_1
                                    133 	.globl _FE_1
                                    134 	.globl _SM0_1
                                    135 	.globl _EIPH1
                                    136 	.globl _EIP1
                                    137 	.globl _PMD
                                    138 	.globl _PMEN
                                    139 	.globl _PDTCNT
                                    140 	.globl _PDTEN
                                    141 	.globl _SCON_1
                                    142 	.globl _EIPH
                                    143 	.globl _AINDIDS
                                    144 	.globl _SPDR
                                    145 	.globl _SPSR
                                    146 	.globl _SPCR2
                                    147 	.globl _SPCR
                                    148 	.globl _CAPCON4
                                    149 	.globl _CAPCON3
                                    150 	.globl _B
                                    151 	.globl _EIP
                                    152 	.globl _C2H
                                    153 	.globl _C2L
                                    154 	.globl _PIF
                                    155 	.globl _PIPEN
                                    156 	.globl _PINEN
                                    157 	.globl _PICON
                                    158 	.globl _ADCCON0
                                    159 	.globl _C1H
                                    160 	.globl _C1L
                                    161 	.globl _C0H
                                    162 	.globl _C0L
                                    163 	.globl _ADCDLY
                                    164 	.globl _ADCCON2
                                    165 	.globl _ADCCON1
                                    166 	.globl _ACC
                                    167 	.globl _PWMCON1
                                    168 	.globl _PIOCON0
                                    169 	.globl _PWM3L
                                    170 	.globl _PWM2L
                                    171 	.globl _PWM1L
                                    172 	.globl _PWM0L
                                    173 	.globl _PWMPL
                                    174 	.globl _PWMCON0
                                    175 	.globl _FBD
                                    176 	.globl _PNP
                                    177 	.globl _PWM3H
                                    178 	.globl _PWM2H
                                    179 	.globl _PWM1H
                                    180 	.globl _PWM0H
                                    181 	.globl _PWMPH
                                    182 	.globl _PSW
                                    183 	.globl _ADCMPH
                                    184 	.globl _ADCMPL
                                    185 	.globl _PWM5L
                                    186 	.globl _TH2
                                    187 	.globl _PWM4L
                                    188 	.globl _TL2
                                    189 	.globl _RCMP2H
                                    190 	.globl _RCMP2L
                                    191 	.globl _T2MOD
                                    192 	.globl _T2CON
                                    193 	.globl _TA
                                    194 	.globl _PIOCON1
                                    195 	.globl _RH3
                                    196 	.globl _PWM5H
                                    197 	.globl _RL3
                                    198 	.globl _PWM4H
                                    199 	.globl _T3CON
                                    200 	.globl _ADCRH
                                    201 	.globl _ADCRL
                                    202 	.globl _I2ADDR
                                    203 	.globl _I2CON
                                    204 	.globl _I2TOC
                                    205 	.globl _I2CLK
                                    206 	.globl _I2STAT
                                    207 	.globl _I2DAT
                                    208 	.globl _SADDR_1
                                    209 	.globl _SADEN_1
                                    210 	.globl _SADEN
                                    211 	.globl _IP
                                    212 	.globl _PWMINTC
                                    213 	.globl _IPH
                                    214 	.globl _P2S
                                    215 	.globl _P1SR
                                    216 	.globl _P1M2
                                    217 	.globl _P1S
                                    218 	.globl _P1M1
                                    219 	.globl _P0SR
                                    220 	.globl _P0M2
                                    221 	.globl _P0S
                                    222 	.globl _P0M1
                                    223 	.globl _P3
                                    224 	.globl _IAPCN
                                    225 	.globl _IAPFD
                                    226 	.globl _P3SR
                                    227 	.globl _P3M2
                                    228 	.globl _P3S
                                    229 	.globl _P3M1
                                    230 	.globl _BODCON1
                                    231 	.globl _WDCON
                                    232 	.globl _SADDR
                                    233 	.globl _IE
                                    234 	.globl _IAPAH
                                    235 	.globl _IAPAL
                                    236 	.globl _IAPUEN
                                    237 	.globl _IAPTRG
                                    238 	.globl _BODCON0
                                    239 	.globl _AUXR1
                                    240 	.globl _P2
                                    241 	.globl _CHPCON
                                    242 	.globl _EIE1
                                    243 	.globl _EIE
                                    244 	.globl _SBUF_1
                                    245 	.globl _SBUF
                                    246 	.globl _SCON
                                    247 	.globl _CKEN
                                    248 	.globl _CKSWT
                                    249 	.globl _CKDIV
                                    250 	.globl _CAPCON2
                                    251 	.globl _CAPCON1
                                    252 	.globl _CAPCON0
                                    253 	.globl _SFRS
                                    254 	.globl _P1
                                    255 	.globl _WKCON
                                    256 	.globl _CKCON
                                    257 	.globl _TH1
                                    258 	.globl _TH0
                                    259 	.globl _TL1
                                    260 	.globl _TL0
                                    261 	.globl _TMOD
                                    262 	.globl _TCON
                                    263 	.globl _PCON
                                    264 	.globl _RWK
                                    265 	.globl _RCTRIM1
                                    266 	.globl _RCTRIM0
                                    267 	.globl _DPH
                                    268 	.globl _DPL
                                    269 	.globl _SP
                                    270 	.globl _P0
                                    271 	.globl _gpu32UartSpeed
                                    272 	.globl _gu8LineFiUpRxState4
                                    273 	.globl _gu8LineFiUpRxState
                                    274 	.globl _gu16TimeCntMilliSec
                                    275 	.globl _gu16TimeCnt
                                    276 	.globl _gu8PreambleCnt
                                    277 	.globl _gu8PPambleCnt
                                    278 	.globl _gu8MCRxBuf
                                    279 	.globl _gu8RxBufCnt
                                    280 	.globl _gpu8RxBuf
                                    281 	.globl _gpu8Data2
                                    282 	.globl _gpu8Data
                                    283 	.globl _gcUartInputMode
                                    284 	.globl _make_linefi_payload_PARM_4
                                    285 	.globl _make_linefi_payload_PARM_3
                                    286 	.globl _make_linefi_payload_PARM_2
                                    287 	.globl _send_ACK_PARM_2
                                    288 	.globl _act_by_one_key_PARM_3
                                    289 	.globl _act_by_one_key_PARM_2
                                    290 	.globl _printoutbuf_PARM_2
                                    291 	.globl _state_machine_PARM_4
                                    292 	.globl _state_machine_PARM_3
                                    293 	.globl _state_machine_PARM_2
                                    294 ;--------------------------------------------------------
                                    295 ; special function registers
                                    296 ;--------------------------------------------------------
                                    297 	.area RSEG    (ABS,DATA)
      000000                        298 	.org 0x0000
                           000080   299 _P0	=	0x0080
                           000081   300 _SP	=	0x0081
                           000082   301 _DPL	=	0x0082
                           000083   302 _DPH	=	0x0083
                           000084   303 _RCTRIM0	=	0x0084
                           000085   304 _RCTRIM1	=	0x0085
                           000086   305 _RWK	=	0x0086
                           000087   306 _PCON	=	0x0087
                           000088   307 _TCON	=	0x0088
                           000089   308 _TMOD	=	0x0089
                           00008A   309 _TL0	=	0x008a
                           00008B   310 _TL1	=	0x008b
                           00008C   311 _TH0	=	0x008c
                           00008D   312 _TH1	=	0x008d
                           00008E   313 _CKCON	=	0x008e
                           00008F   314 _WKCON	=	0x008f
                           000090   315 _P1	=	0x0090
                           000091   316 _SFRS	=	0x0091
                           000092   317 _CAPCON0	=	0x0092
                           000093   318 _CAPCON1	=	0x0093
                           000094   319 _CAPCON2	=	0x0094
                           000095   320 _CKDIV	=	0x0095
                           000096   321 _CKSWT	=	0x0096
                           000097   322 _CKEN	=	0x0097
                           000098   323 _SCON	=	0x0098
                           000099   324 _SBUF	=	0x0099
                           00009A   325 _SBUF_1	=	0x009a
                           00009B   326 _EIE	=	0x009b
                           00009C   327 _EIE1	=	0x009c
                           00009F   328 _CHPCON	=	0x009f
                           0000A0   329 _P2	=	0x00a0
                           0000A2   330 _AUXR1	=	0x00a2
                           0000A3   331 _BODCON0	=	0x00a3
                           0000A4   332 _IAPTRG	=	0x00a4
                           0000A5   333 _IAPUEN	=	0x00a5
                           0000A6   334 _IAPAL	=	0x00a6
                           0000A7   335 _IAPAH	=	0x00a7
                           0000A8   336 _IE	=	0x00a8
                           0000A9   337 _SADDR	=	0x00a9
                           0000AA   338 _WDCON	=	0x00aa
                           0000AB   339 _BODCON1	=	0x00ab
                           0000AC   340 _P3M1	=	0x00ac
                           0000AC   341 _P3S	=	0x00ac
                           0000AD   342 _P3M2	=	0x00ad
                           0000AD   343 _P3SR	=	0x00ad
                           0000AE   344 _IAPFD	=	0x00ae
                           0000AF   345 _IAPCN	=	0x00af
                           0000B0   346 _P3	=	0x00b0
                           0000B1   347 _P0M1	=	0x00b1
                           0000B1   348 _P0S	=	0x00b1
                           0000B2   349 _P0M2	=	0x00b2
                           0000B2   350 _P0SR	=	0x00b2
                           0000B3   351 _P1M1	=	0x00b3
                           0000B3   352 _P1S	=	0x00b3
                           0000B4   353 _P1M2	=	0x00b4
                           0000B4   354 _P1SR	=	0x00b4
                           0000B5   355 _P2S	=	0x00b5
                           0000B7   356 _IPH	=	0x00b7
                           0000B7   357 _PWMINTC	=	0x00b7
                           0000B8   358 _IP	=	0x00b8
                           0000B9   359 _SADEN	=	0x00b9
                           0000BA   360 _SADEN_1	=	0x00ba
                           0000BB   361 _SADDR_1	=	0x00bb
                           0000BC   362 _I2DAT	=	0x00bc
                           0000BD   363 _I2STAT	=	0x00bd
                           0000BE   364 _I2CLK	=	0x00be
                           0000BF   365 _I2TOC	=	0x00bf
                           0000C0   366 _I2CON	=	0x00c0
                           0000C1   367 _I2ADDR	=	0x00c1
                           0000C2   368 _ADCRL	=	0x00c2
                           0000C3   369 _ADCRH	=	0x00c3
                           0000C4   370 _T3CON	=	0x00c4
                           0000C4   371 _PWM4H	=	0x00c4
                           0000C5   372 _RL3	=	0x00c5
                           0000C5   373 _PWM5H	=	0x00c5
                           0000C6   374 _RH3	=	0x00c6
                           0000C6   375 _PIOCON1	=	0x00c6
                           0000C7   376 _TA	=	0x00c7
                           0000C8   377 _T2CON	=	0x00c8
                           0000C9   378 _T2MOD	=	0x00c9
                           0000CA   379 _RCMP2L	=	0x00ca
                           0000CB   380 _RCMP2H	=	0x00cb
                           0000CC   381 _TL2	=	0x00cc
                           0000CC   382 _PWM4L	=	0x00cc
                           0000CD   383 _TH2	=	0x00cd
                           0000CD   384 _PWM5L	=	0x00cd
                           0000CE   385 _ADCMPL	=	0x00ce
                           0000CF   386 _ADCMPH	=	0x00cf
                           0000D0   387 _PSW	=	0x00d0
                           0000D1   388 _PWMPH	=	0x00d1
                           0000D2   389 _PWM0H	=	0x00d2
                           0000D3   390 _PWM1H	=	0x00d3
                           0000D4   391 _PWM2H	=	0x00d4
                           0000D5   392 _PWM3H	=	0x00d5
                           0000D6   393 _PNP	=	0x00d6
                           0000D7   394 _FBD	=	0x00d7
                           0000D8   395 _PWMCON0	=	0x00d8
                           0000D9   396 _PWMPL	=	0x00d9
                           0000DA   397 _PWM0L	=	0x00da
                           0000DB   398 _PWM1L	=	0x00db
                           0000DC   399 _PWM2L	=	0x00dc
                           0000DD   400 _PWM3L	=	0x00dd
                           0000DE   401 _PIOCON0	=	0x00de
                           0000DF   402 _PWMCON1	=	0x00df
                           0000E0   403 _ACC	=	0x00e0
                           0000E1   404 _ADCCON1	=	0x00e1
                           0000E2   405 _ADCCON2	=	0x00e2
                           0000E3   406 _ADCDLY	=	0x00e3
                           0000E4   407 _C0L	=	0x00e4
                           0000E5   408 _C0H	=	0x00e5
                           0000E6   409 _C1L	=	0x00e6
                           0000E7   410 _C1H	=	0x00e7
                           0000E8   411 _ADCCON0	=	0x00e8
                           0000E9   412 _PICON	=	0x00e9
                           0000EA   413 _PINEN	=	0x00ea
                           0000EB   414 _PIPEN	=	0x00eb
                           0000EC   415 _PIF	=	0x00ec
                           0000ED   416 _C2L	=	0x00ed
                           0000EE   417 _C2H	=	0x00ee
                           0000EF   418 _EIP	=	0x00ef
                           0000F0   419 _B	=	0x00f0
                           0000F1   420 _CAPCON3	=	0x00f1
                           0000F2   421 _CAPCON4	=	0x00f2
                           0000F3   422 _SPCR	=	0x00f3
                           0000F3   423 _SPCR2	=	0x00f3
                           0000F4   424 _SPSR	=	0x00f4
                           0000F5   425 _SPDR	=	0x00f5
                           0000F6   426 _AINDIDS	=	0x00f6
                           0000F7   427 _EIPH	=	0x00f7
                           0000F8   428 _SCON_1	=	0x00f8
                           0000F9   429 _PDTEN	=	0x00f9
                           0000FA   430 _PDTCNT	=	0x00fa
                           0000FB   431 _PMEN	=	0x00fb
                           0000FC   432 _PMD	=	0x00fc
                           0000FE   433 _EIP1	=	0x00fe
                           0000FF   434 _EIPH1	=	0x00ff
                                    435 ;--------------------------------------------------------
                                    436 ; special function bits
                                    437 ;--------------------------------------------------------
                                    438 	.area RSEG    (ABS,DATA)
      000000                        439 	.org 0x0000
                           0000FF   440 _SM0_1	=	0x00ff
                           0000FF   441 _FE_1	=	0x00ff
                           0000FE   442 _SM1_1	=	0x00fe
                           0000FD   443 _SM2_1	=	0x00fd
                           0000FC   444 _REN_1	=	0x00fc
                           0000FB   445 _TB8_1	=	0x00fb
                           0000FA   446 _RB8_1	=	0x00fa
                           0000F9   447 _TI_1	=	0x00f9
                           0000F8   448 _RI_1	=	0x00f8
                           0000EF   449 _ADCF	=	0x00ef
                           0000EE   450 _ADCS	=	0x00ee
                           0000ED   451 _ETGSEL1	=	0x00ed
                           0000EC   452 _ETGSEL0	=	0x00ec
                           0000EB   453 _ADCHS3	=	0x00eb
                           0000EA   454 _ADCHS2	=	0x00ea
                           0000E9   455 _ADCHS1	=	0x00e9
                           0000E8   456 _ADCHS0	=	0x00e8
                           0000DF   457 _PWMRUN	=	0x00df
                           0000DE   458 _LOAD	=	0x00de
                           0000DD   459 _PWMF	=	0x00dd
                           0000DC   460 _CLRPWM	=	0x00dc
                           0000D7   461 _CY	=	0x00d7
                           0000D6   462 _AC	=	0x00d6
                           0000D5   463 _F0	=	0x00d5
                           0000D4   464 _RS1	=	0x00d4
                           0000D3   465 _RS0	=	0x00d3
                           0000D2   466 _OV	=	0x00d2
                           0000D0   467 _P	=	0x00d0
                           0000CF   468 _TF2	=	0x00cf
                           0000CA   469 _TR2	=	0x00ca
                           0000C8   470 _CM_RL2	=	0x00c8
                           0000C6   471 _I2CEN	=	0x00c6
                           0000C5   472 _STA	=	0x00c5
                           0000C4   473 _STO	=	0x00c4
                           0000C3   474 _SI	=	0x00c3
                           0000C2   475 _AA	=	0x00c2
                           0000C0   476 _I2CPX	=	0x00c0
                           0000BE   477 _PADC	=	0x00be
                           0000BD   478 _PBOD	=	0x00bd
                           0000BC   479 _PS	=	0x00bc
                           0000BB   480 _PT1	=	0x00bb
                           0000BA   481 _PX1	=	0x00ba
                           0000B9   482 _PT0	=	0x00b9
                           0000B8   483 _PX0	=	0x00b8
                           0000B0   484 _P30	=	0x00b0
                           0000AF   485 _EA	=	0x00af
                           0000AE   486 _EADC	=	0x00ae
                           0000AD   487 _EBOD	=	0x00ad
                           0000AC   488 _ES	=	0x00ac
                           0000AB   489 _ET1	=	0x00ab
                           0000AA   490 _EX1	=	0x00aa
                           0000A9   491 _ET0	=	0x00a9
                           0000A8   492 _EX0	=	0x00a8
                           0000A0   493 _P20	=	0x00a0
                           00009F   494 _SM0	=	0x009f
                           00009F   495 _FE	=	0x009f
                           00009E   496 _SM1	=	0x009e
                           00009D   497 _SM2	=	0x009d
                           00009C   498 _REN	=	0x009c
                           00009B   499 _TB8	=	0x009b
                           00009A   500 _RB8	=	0x009a
                           000099   501 _TI	=	0x0099
                           000098   502 _RI	=	0x0098
                           000097   503 _P17	=	0x0097
                           000096   504 _P16	=	0x0096
                           000096   505 _TXD_1	=	0x0096
                           000095   506 _P15	=	0x0095
                           000094   507 _P14	=	0x0094
                           000094   508 _SDA	=	0x0094
                           000093   509 _P13	=	0x0093
                           000093   510 _SCL	=	0x0093
                           000092   511 _P12	=	0x0092
                           000091   512 _P11	=	0x0091
                           000090   513 _P10	=	0x0090
                           00008F   514 _TF1	=	0x008f
                           00008E   515 _TR1	=	0x008e
                           00008D   516 _TF0	=	0x008d
                           00008C   517 _TR0	=	0x008c
                           00008B   518 _IE1	=	0x008b
                           00008A   519 _IT1	=	0x008a
                           000089   520 _IE0	=	0x0089
                           000088   521 _IT0	=	0x0088
                           000087   522 _P07	=	0x0087
                           000087   523 _RXD	=	0x0087
                           000086   524 _P06	=	0x0086
                           000086   525 _TXD	=	0x0086
                           000085   526 _P05	=	0x0085
                           000084   527 _P04	=	0x0084
                           000084   528 _STADC	=	0x0084
                           000083   529 _P03	=	0x0083
                           000082   530 _P02	=	0x0082
                           000082   531 _RXD_1	=	0x0082
                           000081   532 _P01	=	0x0081
                           000081   533 _MISO	=	0x0081
                           000080   534 _P00	=	0x0080
                           000080   535 _MOSI	=	0x0080
                                    536 ;--------------------------------------------------------
                                    537 ; overlayable register banks
                                    538 ;--------------------------------------------------------
                                    539 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        540 	.ds 8
                                    541 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        542 	.ds 8
                                    543 ;--------------------------------------------------------
                                    544 ; internal ram data
                                    545 ;--------------------------------------------------------
                                    546 	.area DSEG    (DATA)
      000000                        547 _state_machine_PARM_2:
      000000                        548 	.ds 1
      000001                        549 _state_machine_PARM_3:
      000001                        550 	.ds 1
      000002                        551 _state_machine_PARM_4:
      000002                        552 	.ds 1
      000003                        553 _printoutbuf_PARM_2:
      000003                        554 	.ds 3
      000006                        555 _act_by_one_key_PARM_2:
      000006                        556 	.ds 3
      000009                        557 _act_by_one_key_PARM_3:
      000009                        558 	.ds 3
      00000C                        559 _act_by_one_key_sloc0_1_0:
      00000C                        560 	.ds 3
      00000F                        561 _send_ACK_PARM_2:
      00000F                        562 	.ds 3
      000012                        563 _make_linefi_payload_PARM_2:
      000012                        564 	.ds 1
      000013                        565 _make_linefi_payload_PARM_3:
      000013                        566 	.ds 1
      000014                        567 _make_linefi_payload_PARM_4:
      000014                        568 	.ds 3
      000017                        569 _make_linefi_payload_au32LineFiUpSpeed_65536_100:
      000017                        570 	.ds 4
      00001B                        571 _make_linefi_payload_sloc0_1_0:
      00001B                        572 	.ds 3
                                    573 ;--------------------------------------------------------
                                    574 ; overlayable items in internal ram 
                                    575 ;--------------------------------------------------------
                                    576 	.area	OSEG    (OVR,DATA)
                                    577 	.area	OSEG    (OVR,DATA)
      000000                        578 _state_switches_PARM_2:
      000000                        579 	.ds 3
                                    580 ;--------------------------------------------------------
                                    581 ; Stack segment in internal ram 
                                    582 ;--------------------------------------------------------
                                    583 	.area	SSEG
      000000                        584 __start__stack:
      000000                        585 	.ds	1
                                    586 
                                    587 ;--------------------------------------------------------
                                    588 ; indirectly addressable internal ram data
                                    589 ;--------------------------------------------------------
                                    590 	.area ISEG    (DATA)
                                    591 ;--------------------------------------------------------
                                    592 ; absolute internal ram data
                                    593 ;--------------------------------------------------------
                                    594 	.area IABS    (ABS,DATA)
                                    595 	.area IABS    (ABS,DATA)
                                    596 ;--------------------------------------------------------
                                    597 ; bit data
                                    598 ;--------------------------------------------------------
                                    599 	.area BSEG    (BIT)
                                    600 ;--------------------------------------------------------
                                    601 ; paged external ram data
                                    602 ;--------------------------------------------------------
                                    603 	.area PSEG    (PAG,XDATA)
                                    604 ;--------------------------------------------------------
                                    605 ; external ram data
                                    606 ;--------------------------------------------------------
                                    607 	.area XSEG    (XDATA)
      000000                        608 _gcUartInputMode::
      000000                        609 	.ds 27
      00001B                        610 _gpu8Data::
      00001B                        611 	.ds 20
      00002F                        612 _gpu8Data2::
      00002F                        613 	.ds 20
      000043                        614 _gpu8RxBuf::
      000043                        615 	.ds 16
      000053                        616 _gu8RxBufCnt::
      000053                        617 	.ds 1
      000054                        618 _gu8MCRxBuf::
      000054                        619 	.ds 1
      000055                        620 _gu8PPambleCnt::
      000055                        621 	.ds 1
      000056                        622 _gu8PreambleCnt::
      000056                        623 	.ds 1
      000057                        624 _gu16TimeCnt::
      000057                        625 	.ds 2
      000059                        626 _gu16TimeCntMilliSec::
      000059                        627 	.ds 2
      00005B                        628 _gu8LineFiUpRxState::
      00005B                        629 	.ds 1
      00005C                        630 _gu8LineFiUpRxState4::
      00005C                        631 	.ds 1
      00005D                        632 _gpu32UartSpeed::
      00005D                        633 	.ds 56
      000095                        634 _state_switches_su8PrevSW_65536_76:
      000095                        635 	.ds 1
      000096                        636 _act_by_one_key_u8Data_65536_88:
      000096                        637 	.ds 1
      000097                        638 _main_u8RxUART_65536_103:
      000097                        639 	.ds 1
      000098                        640 _main_u8RxUART1_65536_103:
      000098                        641 	.ds 1
      000099                        642 _main_u8LineFiAddr_65536_103:
      000099                        643 	.ds 1
      00009A                        644 _main_u8LineFiSpeed_65536_103:
      00009A                        645 	.ds 1
      00009B                        646 _main_u8LineFiCmd_65536_103:
      00009B                        647 	.ds 1
      00009C                        648 _main_u8PwrOnFirstFlag_65536_103:
      00009C                        649 	.ds 1
      00009D                        650 _main_u8SwNum_65536_103:
      00009D                        651 	.ds 1
      00009E                        652 _main_u8StatePeriodicSend_65536_103:
      00009E                        653 	.ds 1
      00009F                        654 _main_u8PSCmd_65536_103:
      00009F                        655 	.ds 1
      0000A0                        656 _main_u8StateUart0InputMode_65536_103:
      0000A0                        657 	.ds 1
      0000A1                        658 _main_pcBuf_65536_103:
      0000A1                        659 	.ds 50
      0000D3                        660 _main_pu8Data_65536_103:
      0000D3                        661 	.ds 10
      0000DD                        662 _main_u8DataIdx_65536_103:
      0000DD                        663 	.ds 1
      0000DE                        664 _main_ucBufIdx_65536_103:
      0000DE                        665 	.ds 1
      0000DF                        666 _main_pstLineFiPkt_65536_103:
      0000DF                        667 	.ds 40
      000107                        668 _main_stLineFiPkt_test_65536_103:
      000107                        669 	.ds 8
      00010F                        670 _main_stLineFiPkt_65536_103:
      00010F                        671 	.ds 8
                                    672 ;--------------------------------------------------------
                                    673 ; absolute external ram data
                                    674 ;--------------------------------------------------------
                                    675 	.area XABS    (ABS,XDATA)
                                    676 ;--------------------------------------------------------
                                    677 ; external initialized ram data
                                    678 ;--------------------------------------------------------
                                    679 	.area HOME    (CODE)
                                    680 	.area GSINIT0 (CODE)
                                    681 	.area GSINIT1 (CODE)
                                    682 	.area GSINIT2 (CODE)
                                    683 	.area GSINIT3 (CODE)
                                    684 	.area GSINIT4 (CODE)
                                    685 	.area GSINIT5 (CODE)
                                    686 	.area GSINIT  (CODE)
                                    687 	.area GSFINAL (CODE)
                                    688 	.area CSEG    (CODE)
                                    689 ;--------------------------------------------------------
                                    690 ; interrupt vector 
                                    691 ;--------------------------------------------------------
                                    692 	.area HOME    (CODE)
      000000                        693 __interrupt_vect:
      000000 02r00r00         [24]  694 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  695 	reti
      000004                        696 	.ds	7
      00000B 02r01r74         [24]  697 	ljmp	_Timer0_ISR
      00000E                        698 	.ds	5
      000013 32               [24]  699 	reti
      000014                        700 	.ds	7
      00001B 32               [24]  701 	reti
      00001C                        702 	.ds	7
      000023 02r00r00         [24]  703 	ljmp	_SerialPort0_ISR
      000026                        704 	.ds	5
      00002B 32               [24]  705 	reti
      00002C                        706 	.ds	7
      000033 32               [24]  707 	reti
      000034                        708 	.ds	7
      00003B 02r01rA3         [24]  709 	ljmp	_pin_interrupt_isr
      00003E                        710 	.ds	5
      000043 32               [24]  711 	reti
      000044                        712 	.ds	7
      00004B 32               [24]  713 	reti
      00004C                        714 	.ds	7
      000053 32               [24]  715 	reti
      000054                        716 	.ds	7
      00005B 32               [24]  717 	reti
      00005C                        718 	.ds	7
      000063 32               [24]  719 	reti
      000064                        720 	.ds	7
      00006B 32               [24]  721 	reti
      00006C                        722 	.ds	7
      000073 32               [24]  723 	reti
      000074                        724 	.ds	7
      00007B 02r00r00         [24]  725 	ljmp	_SerialPort1_ISR
                                    726 ;--------------------------------------------------------
                                    727 ; global & static initialisations
                                    728 ;--------------------------------------------------------
                                    729 	.area HOME    (CODE)
                                    730 	.area GSINIT  (CODE)
                                    731 	.area GSFINAL (CODE)
                                    732 	.area GSINIT  (CODE)
                                    733 	.globl __sdcc_gsinit_startup
                                    734 	.globl __sdcc_program_startup
                                    735 	.globl __start__stack
                                    736 	.globl __mcs51_genRAMCLEAR
                                    737 ;------------------------------------------------------------
                                    738 ;Allocation info for local variables in function 'state_switches'
                                    739 ;------------------------------------------------------------
                                    740 ;su8PrevSW                 Allocated with name '_state_switches_su8PrevSW_65536_76'
                                    741 ;apu8SwNum                 Allocated with name '_state_switches_PARM_2'
                                    742 ;au8SW                     Allocated to registers r7 
                                    743 ;i                         Allocated to registers r2 
                                    744 ;u8Result                  Allocated to registers r6 
                                    745 ;------------------------------------------------------------
                                    746 ;	src/main.c:410: static UINT8 __xdata su8PrevSW = 0;
      000000 90r00r95         [24]  747 	mov	dptr,#_state_switches_su8PrevSW_65536_76
      000003 E4               [12]  748 	clr	a
      000004 F0               [24]  749 	movx	@dptr,a
                                    750 ;------------------------------------------------------------
                                    751 ;Allocation info for local variables in function 'act_by_one_key'
                                    752 ;------------------------------------------------------------
                                    753 ;apu8LineFiCmd             Allocated with name '_act_by_one_key_PARM_2'
                                    754 ;apu8LineFiAddr            Allocated with name '_act_by_one_key_PARM_3'
                                    755 ;au8RxUART                 Allocated to registers r7 
                                    756 ;sloc0                     Allocated with name '_act_by_one_key_sloc0_1_0'
                                    757 ;u8Data                    Allocated with name '_act_by_one_key_u8Data_65536_88'
                                    758 ;------------------------------------------------------------
                                    759 ;	src/main.c:483: static UINT8 __xdata u8Data = 0;
      000005 90r00r96         [24]  760 	mov	dptr,#_act_by_one_key_u8Data_65536_88
      000008 E4               [12]  761 	clr	a
      000009 F0               [24]  762 	movx	@dptr,a
                                    763 ;	src/main.c:98: const char * __xdata  gcUartInputMode[MAX_STATE_UART0_INPUT] = {
      00000A 90r00r00         [24]  764 	mov	dptr,#_gcUartInputMode
      00000D 74r89            [12]  765 	mov	a,#___str_72
      00000F F0               [24]  766 	movx	@dptr,a
      000010 74s04            [12]  767 	mov	a,#(___str_72 >> 8)
      000012 A3               [24]  768 	inc	dptr
      000013 F0               [24]  769 	movx	@dptr,a
      000014 74 80            [12]  770 	mov	a,#0x80
      000016 A3               [24]  771 	inc	dptr
      000017 F0               [24]  772 	movx	@dptr,a
      000018 90r00r03         [24]  773 	mov	dptr,#(_gcUartInputMode + 0x0003)
      00001B 74rAB            [12]  774 	mov	a,#___str_73
      00001D F0               [24]  775 	movx	@dptr,a
      00001E 74s04            [12]  776 	mov	a,#(___str_73 >> 8)
      000020 A3               [24]  777 	inc	dptr
      000021 F0               [24]  778 	movx	@dptr,a
      000022 74 80            [12]  779 	mov	a,#0x80
      000024 A3               [24]  780 	inc	dptr
      000025 F0               [24]  781 	movx	@dptr,a
      000026 90r00r06         [24]  782 	mov	dptr,#(_gcUartInputMode + 0x0006)
      000029 74rCA            [12]  783 	mov	a,#___str_74
      00002B F0               [24]  784 	movx	@dptr,a
      00002C 74s04            [12]  785 	mov	a,#(___str_74 >> 8)
      00002E A3               [24]  786 	inc	dptr
      00002F F0               [24]  787 	movx	@dptr,a
      000030 74 80            [12]  788 	mov	a,#0x80
      000032 A3               [24]  789 	inc	dptr
      000033 F0               [24]  790 	movx	@dptr,a
      000034 90r00r09         [24]  791 	mov	dptr,#(_gcUartInputMode + 0x0009)
      000037 74rF1            [12]  792 	mov	a,#___str_75
      000039 F0               [24]  793 	movx	@dptr,a
      00003A 74s04            [12]  794 	mov	a,#(___str_75 >> 8)
      00003C A3               [24]  795 	inc	dptr
      00003D F0               [24]  796 	movx	@dptr,a
      00003E 74 80            [12]  797 	mov	a,#0x80
      000040 A3               [24]  798 	inc	dptr
      000041 F0               [24]  799 	movx	@dptr,a
      000042 90r00r0C         [24]  800 	mov	dptr,#(_gcUartInputMode + 0x000c)
      000045 74r10            [12]  801 	mov	a,#___str_76
      000047 F0               [24]  802 	movx	@dptr,a
      000048 74s05            [12]  803 	mov	a,#(___str_76 >> 8)
      00004A A3               [24]  804 	inc	dptr
      00004B F0               [24]  805 	movx	@dptr,a
      00004C 74 80            [12]  806 	mov	a,#0x80
      00004E A3               [24]  807 	inc	dptr
      00004F F0               [24]  808 	movx	@dptr,a
      000050 90r00r0F         [24]  809 	mov	dptr,#(_gcUartInputMode + 0x000f)
      000053 74r34            [12]  810 	mov	a,#___str_77
      000055 F0               [24]  811 	movx	@dptr,a
      000056 74s05            [12]  812 	mov	a,#(___str_77 >> 8)
      000058 A3               [24]  813 	inc	dptr
      000059 F0               [24]  814 	movx	@dptr,a
      00005A 74 80            [12]  815 	mov	a,#0x80
      00005C A3               [24]  816 	inc	dptr
      00005D F0               [24]  817 	movx	@dptr,a
      00005E 90r00r12         [24]  818 	mov	dptr,#(_gcUartInputMode + 0x0012)
      000061 74r52            [12]  819 	mov	a,#___str_78
      000063 F0               [24]  820 	movx	@dptr,a
      000064 74s05            [12]  821 	mov	a,#(___str_78 >> 8)
      000066 A3               [24]  822 	inc	dptr
      000067 F0               [24]  823 	movx	@dptr,a
      000068 74 80            [12]  824 	mov	a,#0x80
      00006A A3               [24]  825 	inc	dptr
      00006B F0               [24]  826 	movx	@dptr,a
      00006C 90r00r15         [24]  827 	mov	dptr,#(_gcUartInputMode + 0x0015)
      00006F 74r72            [12]  828 	mov	a,#___str_79
      000071 F0               [24]  829 	movx	@dptr,a
      000072 74s05            [12]  830 	mov	a,#(___str_79 >> 8)
      000074 A3               [24]  831 	inc	dptr
      000075 F0               [24]  832 	movx	@dptr,a
      000076 74 80            [12]  833 	mov	a,#0x80
      000078 A3               [24]  834 	inc	dptr
      000079 F0               [24]  835 	movx	@dptr,a
      00007A 90r00r18         [24]  836 	mov	dptr,#(_gcUartInputMode + 0x0018)
      00007D 74r91            [12]  837 	mov	a,#___str_80
      00007F F0               [24]  838 	movx	@dptr,a
      000080 74s05            [12]  839 	mov	a,#(___str_80 >> 8)
      000082 A3               [24]  840 	inc	dptr
      000083 F0               [24]  841 	movx	@dptr,a
      000084 74 80            [12]  842 	mov	a,#0x80
      000086 A3               [24]  843 	inc	dptr
      000087 F0               [24]  844 	movx	@dptr,a
                                    845 ;	src/main.c:110: UINT8 __xdata gpu8Data[20] = {
      000088 90r00r1B         [24]  846 	mov	dptr,#_gpu8Data
      00008B 23               [12]  847 	rl	a
      00008C F0               [24]  848 	movx	@dptr,a
      00008D 90r00r1C         [24]  849 	mov	dptr,#(_gpu8Data + 0x0001)
      000090 F0               [24]  850 	movx	@dptr,a
      000091 90r00r1D         [24]  851 	mov	dptr,#(_gpu8Data + 0x0002)
      000094 F0               [24]  852 	movx	@dptr,a
      000095 90r00r1E         [24]  853 	mov	dptr,#(_gpu8Data + 0x0003)
      000098 F0               [24]  854 	movx	@dptr,a
      000099 90r00r1F         [24]  855 	mov	dptr,#(_gpu8Data + 0x0004)
      00009C 04               [12]  856 	inc	a
      00009D F0               [24]  857 	movx	@dptr,a
      00009E 90r00r20         [24]  858 	mov	dptr,#(_gpu8Data + 0x0005)
      0000A1 F0               [24]  859 	movx	@dptr,a
      0000A2 90r00r21         [24]  860 	mov	dptr,#(_gpu8Data + 0x0006)
      0000A5 F0               [24]  861 	movx	@dptr,a
      0000A6 90r00r22         [24]  862 	mov	dptr,#(_gpu8Data + 0x0007)
      0000A9 F0               [24]  863 	movx	@dptr,a
      0000AA 90r00r23         [24]  864 	mov	dptr,#(_gpu8Data + 0x0008)
      0000AD 04               [12]  865 	inc	a
      0000AE F0               [24]  866 	movx	@dptr,a
      0000AF 90r00r24         [24]  867 	mov	dptr,#(_gpu8Data + 0x0009)
      0000B2 F0               [24]  868 	movx	@dptr,a
      0000B3 90r00r25         [24]  869 	mov	dptr,#(_gpu8Data + 0x000a)
      0000B6 F0               [24]  870 	movx	@dptr,a
      0000B7 90r00r26         [24]  871 	mov	dptr,#(_gpu8Data + 0x000b)
      0000BA F0               [24]  872 	movx	@dptr,a
      0000BB 90r00r27         [24]  873 	mov	dptr,#(_gpu8Data + 0x000c)
      0000BE 04               [12]  874 	inc	a
      0000BF F0               [24]  875 	movx	@dptr,a
      0000C0 90r00r28         [24]  876 	mov	dptr,#(_gpu8Data + 0x000d)
      0000C3 F0               [24]  877 	movx	@dptr,a
      0000C4 90r00r29         [24]  878 	mov	dptr,#(_gpu8Data + 0x000e)
      0000C7 F0               [24]  879 	movx	@dptr,a
      0000C8 90r00r2A         [24]  880 	mov	dptr,#(_gpu8Data + 0x000f)
      0000CB F0               [24]  881 	movx	@dptr,a
      0000CC 90r00r2B         [24]  882 	mov	dptr,#(_gpu8Data + 0x0010)
      0000CF 04               [12]  883 	inc	a
      0000D0 F0               [24]  884 	movx	@dptr,a
      0000D1 90r00r2C         [24]  885 	mov	dptr,#(_gpu8Data + 0x0011)
      0000D4 F0               [24]  886 	movx	@dptr,a
      0000D5 90r00r2D         [24]  887 	mov	dptr,#(_gpu8Data + 0x0012)
      0000D8 F0               [24]  888 	movx	@dptr,a
      0000D9 90r00r2E         [24]  889 	mov	dptr,#(_gpu8Data + 0x0013)
      0000DC F0               [24]  890 	movx	@dptr,a
                                    891 ;	src/main.c:118: UINT8 __xdata gpu8Data2[20] = {
      0000DD 90r00r2F         [24]  892 	mov	dptr,#_gpu8Data2
      0000E0 74 01            [12]  893 	mov	a,#0x01
      0000E2 F0               [24]  894 	movx	@dptr,a
      0000E3 90r00r30         [24]  895 	mov	dptr,#(_gpu8Data2 + 0x0001)
      0000E6 F0               [24]  896 	movx	@dptr,a
      0000E7 90r00r31         [24]  897 	mov	dptr,#(_gpu8Data2 + 0x0002)
      0000EA F0               [24]  898 	movx	@dptr,a
      0000EB 90r00r32         [24]  899 	mov	dptr,#(_gpu8Data2 + 0x0003)
      0000EE F0               [24]  900 	movx	@dptr,a
      0000EF 90r00r33         [24]  901 	mov	dptr,#(_gpu8Data2 + 0x0004)
      0000F2 F0               [24]  902 	movx	@dptr,a
      0000F3 90r00r34         [24]  903 	mov	dptr,#(_gpu8Data2 + 0x0005)
      0000F6 F0               [24]  904 	movx	@dptr,a
      0000F7 90r00r35         [24]  905 	mov	dptr,#(_gpu8Data2 + 0x0006)
      0000FA F0               [24]  906 	movx	@dptr,a
      0000FB 90r00r36         [24]  907 	mov	dptr,#(_gpu8Data2 + 0x0007)
      0000FE F0               [24]  908 	movx	@dptr,a
      0000FF 90r00r37         [24]  909 	mov	dptr,#(_gpu8Data2 + 0x0008)
      000102 74 04            [12]  910 	mov	a,#0x04
      000104 F0               [24]  911 	movx	@dptr,a
      000105 90r00r38         [24]  912 	mov	dptr,#(_gpu8Data2 + 0x0009)
      000108 F0               [24]  913 	movx	@dptr,a
      000109 90r00r39         [24]  914 	mov	dptr,#(_gpu8Data2 + 0x000a)
      00010C F0               [24]  915 	movx	@dptr,a
      00010D 90r00r3A         [24]  916 	mov	dptr,#(_gpu8Data2 + 0x000b)
      000110 F0               [24]  917 	movx	@dptr,a
      000111 90r00r3B         [24]  918 	mov	dptr,#(_gpu8Data2 + 0x000c)
      000114 14               [12]  919 	dec	a
      000115 F0               [24]  920 	movx	@dptr,a
      000116 90r00r3C         [24]  921 	mov	dptr,#(_gpu8Data2 + 0x000d)
      000119 F0               [24]  922 	movx	@dptr,a
      00011A 90r00r3D         [24]  923 	mov	dptr,#(_gpu8Data2 + 0x000e)
      00011D F0               [24]  924 	movx	@dptr,a
      00011E 90r00r3E         [24]  925 	mov	dptr,#(_gpu8Data2 + 0x000f)
      000121 F0               [24]  926 	movx	@dptr,a
      000122 90r00r3F         [24]  927 	mov	dptr,#(_gpu8Data2 + 0x0010)
      000125 74 05            [12]  928 	mov	a,#0x05
      000127 F0               [24]  929 	movx	@dptr,a
      000128 90r00r40         [24]  930 	mov	dptr,#(_gpu8Data2 + 0x0011)
      00012B F0               [24]  931 	movx	@dptr,a
      00012C 90r00r41         [24]  932 	mov	dptr,#(_gpu8Data2 + 0x0012)
      00012F F0               [24]  933 	movx	@dptr,a
      000130 90r00r42         [24]  934 	mov	dptr,#(_gpu8Data2 + 0x0013)
      000133 F0               [24]  935 	movx	@dptr,a
                                    936 ;	src/main.c:138: linefi_uplink_rx_state_t __xdata gu8LineFiUpRxState = LFURxState_INIT;
      000134 90r00r5B         [24]  937 	mov	dptr,#_gu8LineFiUpRxState
      000137 E4               [12]  938 	clr	a
      000138 F0               [24]  939 	movx	@dptr,a
                                    940 ;	src/main.c:139: linefi_uplink_rx_state_t __xdata gu8LineFiUpRxState4 = LFURxState_INIT4;
      000139 90r00r5C         [24]  941 	mov	dptr,#_gu8LineFiUpRxState4
      00013C 74 06            [12]  942 	mov	a,#0x06
      00013E F0               [24]  943 	movx	@dptr,a
                                    944 ;	src/main.c:141: UINT32 __xdata gpu32UartSpeed[] = {
      00013F 90r00r5D         [24]  945 	mov	dptr,#_gpu32UartSpeed
      000142 C4               [12]  946 	swap	a
      000143 F0               [24]  947 	movx	@dptr,a
      000144 74 09            [12]  948 	mov	a,#0x09
      000146 A3               [24]  949 	inc	dptr
      000147 F0               [24]  950 	movx	@dptr,a
      000148 E4               [12]  951 	clr	a
      000149 A3               [24]  952 	inc	dptr
      00014A F0               [24]  953 	movx	@dptr,a
      00014B A3               [24]  954 	inc	dptr
      00014C F0               [24]  955 	movx	@dptr,a
      00014D 90r00r61         [24]  956 	mov	dptr,#(_gpu32UartSpeed + 0x0004)
      000150 74 80            [12]  957 	mov	a,#0x80
      000152 F0               [24]  958 	movx	@dptr,a
      000153 74 70            [12]  959 	mov	a,#0x70
      000155 A3               [24]  960 	inc	dptr
      000156 F0               [24]  961 	movx	@dptr,a
      000157 E4               [12]  962 	clr	a
      000158 A3               [24]  963 	inc	dptr
      000159 F0               [24]  964 	movx	@dptr,a
      00015A A3               [24]  965 	inc	dptr
      00015B F0               [24]  966 	movx	@dptr,a
      00015C 90r00r65         [24]  967 	mov	dptr,#(_gpu32UartSpeed + 0x0008)
      00015F F0               [24]  968 	movx	@dptr,a
      000160 74 96            [12]  969 	mov	a,#0x96
      000162 A3               [24]  970 	inc	dptr
      000163 F0               [24]  971 	movx	@dptr,a
      000164 E4               [12]  972 	clr	a
      000165 A3               [24]  973 	inc	dptr
      000166 F0               [24]  974 	movx	@dptr,a
      000167 A3               [24]  975 	inc	dptr
      000168 F0               [24]  976 	movx	@dptr,a
      000169 90r00r69         [24]  977 	mov	dptr,#(_gpu32UartSpeed + 0x000c)
      00016C F0               [24]  978 	movx	@dptr,a
      00016D 74 E1            [12]  979 	mov	a,#0xe1
      00016F A3               [24]  980 	inc	dptr
      000170 F0               [24]  981 	movx	@dptr,a
      000171 E4               [12]  982 	clr	a
      000172 A3               [24]  983 	inc	dptr
      000173 F0               [24]  984 	movx	@dptr,a
      000174 A3               [24]  985 	inc	dptr
      000175 F0               [24]  986 	movx	@dptr,a
      000176 90r00r6D         [24]  987 	mov	dptr,#(_gpu32UartSpeed + 0x0010)
      000179 F0               [24]  988 	movx	@dptr,a
      00017A 74 C2            [12]  989 	mov	a,#0xc2
      00017C A3               [24]  990 	inc	dptr
      00017D F0               [24]  991 	movx	@dptr,a
      00017E 74 01            [12]  992 	mov	a,#0x01
      000180 A3               [24]  993 	inc	dptr
      000181 F0               [24]  994 	movx	@dptr,a
      000182 E4               [12]  995 	clr	a
      000183 A3               [24]  996 	inc	dptr
      000184 F0               [24]  997 	movx	@dptr,a
      000185 90r00r71         [24]  998 	mov	dptr,#(_gpu32UartSpeed + 0x0014)
      000188 F0               [24]  999 	movx	@dptr,a
      000189 74 84            [12] 1000 	mov	a,#0x84
      00018B A3               [24] 1001 	inc	dptr
      00018C F0               [24] 1002 	movx	@dptr,a
      00018D 74 03            [12] 1003 	mov	a,#0x03
      00018F A3               [24] 1004 	inc	dptr
      000190 F0               [24] 1005 	movx	@dptr,a
      000191 E4               [12] 1006 	clr	a
      000192 A3               [24] 1007 	inc	dptr
      000193 F0               [24] 1008 	movx	@dptr,a
      000194 90r00r75         [24] 1009 	mov	dptr,#(_gpu32UartSpeed + 0x0018)
      000197 74 E0            [12] 1010 	mov	a,#0xe0
      000199 F0               [24] 1011 	movx	@dptr,a
      00019A 74 93            [12] 1012 	mov	a,#0x93
      00019C A3               [24] 1013 	inc	dptr
      00019D F0               [24] 1014 	movx	@dptr,a
      00019E 74 04            [12] 1015 	mov	a,#0x04
      0001A0 A3               [24] 1016 	inc	dptr
      0001A1 F0               [24] 1017 	movx	@dptr,a
      0001A2 E4               [12] 1018 	clr	a
      0001A3 A3               [24] 1019 	inc	dptr
      0001A4 F0               [24] 1020 	movx	@dptr,a
      0001A5 90r00r79         [24] 1021 	mov	dptr,#(_gpu32UartSpeed + 0x001c)
      0001A8 F0               [24] 1022 	movx	@dptr,a
      0001A9 74 08            [12] 1023 	mov	a,#0x08
      0001AB A3               [24] 1024 	inc	dptr
      0001AC F0               [24] 1025 	movx	@dptr,a
      0001AD 14               [12] 1026 	dec	a
      0001AE A3               [24] 1027 	inc	dptr
      0001AF F0               [24] 1028 	movx	@dptr,a
      0001B0 E4               [12] 1029 	clr	a
      0001B1 A3               [24] 1030 	inc	dptr
      0001B2 F0               [24] 1031 	movx	@dptr,a
      0001B3 90r00r7D         [24] 1032 	mov	dptr,#(_gpu32UartSpeed + 0x0020)
      0001B6 74 20            [12] 1033 	mov	a,#0x20
      0001B8 F0               [24] 1034 	movx	@dptr,a
      0001B9 74 A1            [12] 1035 	mov	a,#0xa1
      0001BB A3               [24] 1036 	inc	dptr
      0001BC F0               [24] 1037 	movx	@dptr,a
      0001BD 74 07            [12] 1038 	mov	a,#0x07
      0001BF A3               [24] 1039 	inc	dptr
      0001C0 F0               [24] 1040 	movx	@dptr,a
      0001C1 E4               [12] 1041 	clr	a
      0001C2 A3               [24] 1042 	inc	dptr
      0001C3 F0               [24] 1043 	movx	@dptr,a
      0001C4 90r00r81         [24] 1044 	mov	dptr,#(_gpu32UartSpeed + 0x0024)
      0001C7 74 C0            [12] 1045 	mov	a,#0xc0
      0001C9 F0               [24] 1046 	movx	@dptr,a
      0001CA 74 27            [12] 1047 	mov	a,#0x27
      0001CC A3               [24] 1048 	inc	dptr
      0001CD F0               [24] 1049 	movx	@dptr,a
      0001CE 74 09            [12] 1050 	mov	a,#0x09
      0001D0 A3               [24] 1051 	inc	dptr
      0001D1 F0               [24] 1052 	movx	@dptr,a
      0001D2 E4               [12] 1053 	clr	a
      0001D3 A3               [24] 1054 	inc	dptr
      0001D4 F0               [24] 1055 	movx	@dptr,a
      0001D5 90r00r85         [24] 1056 	mov	dptr,#(_gpu32UartSpeed + 0x0028)
      0001D8 74 60            [12] 1057 	mov	a,#0x60
      0001DA F0               [24] 1058 	movx	@dptr,a
      0001DB 74 AE            [12] 1059 	mov	a,#0xae
      0001DD A3               [24] 1060 	inc	dptr
      0001DE F0               [24] 1061 	movx	@dptr,a
      0001DF 74 0A            [12] 1062 	mov	a,#0x0a
      0001E1 A3               [24] 1063 	inc	dptr
      0001E2 F0               [24] 1064 	movx	@dptr,a
      0001E3 E4               [12] 1065 	clr	a
      0001E4 A3               [24] 1066 	inc	dptr
      0001E5 F0               [24] 1067 	movx	@dptr,a
      0001E6 90r00r89         [24] 1068 	mov	dptr,#(_gpu32UartSpeed + 0x002c)
      0001E9 F0               [24] 1069 	movx	@dptr,a
      0001EA 74 35            [12] 1070 	mov	a,#0x35
      0001EC A3               [24] 1071 	inc	dptr
      0001ED F0               [24] 1072 	movx	@dptr,a
      0001EE 74 0C            [12] 1073 	mov	a,#0x0c
      0001F0 A3               [24] 1074 	inc	dptr
      0001F1 F0               [24] 1075 	movx	@dptr,a
      0001F2 E4               [12] 1076 	clr	a
      0001F3 A3               [24] 1077 	inc	dptr
      0001F4 F0               [24] 1078 	movx	@dptr,a
      0001F5 90r00r8D         [24] 1079 	mov	dptr,#(_gpu32UartSpeed + 0x0030)
      0001F8 74 A0            [12] 1080 	mov	a,#0xa0
      0001FA F0               [24] 1081 	movx	@dptr,a
      0001FB 74 BB            [12] 1082 	mov	a,#0xbb
      0001FD A3               [24] 1083 	inc	dptr
      0001FE F0               [24] 1084 	movx	@dptr,a
      0001FF 74 0D            [12] 1085 	mov	a,#0x0d
      000201 A3               [24] 1086 	inc	dptr
      000202 F0               [24] 1087 	movx	@dptr,a
      000203 E4               [12] 1088 	clr	a
      000204 A3               [24] 1089 	inc	dptr
      000205 F0               [24] 1090 	movx	@dptr,a
      000206 90r00r91         [24] 1091 	mov	dptr,#(_gpu32UartSpeed + 0x0034)
      000209 F0               [24] 1092 	movx	@dptr,a
      00020A 74 10            [12] 1093 	mov	a,#0x10
      00020C A3               [24] 1094 	inc	dptr
      00020D F0               [24] 1095 	movx	@dptr,a
      00020E 74 0E            [12] 1096 	mov	a,#0x0e
      000210 A3               [24] 1097 	inc	dptr
      000211 F0               [24] 1098 	movx	@dptr,a
      000212 E4               [12] 1099 	clr	a
      000213 A3               [24] 1100 	inc	dptr
      000214 F0               [24] 1101 	movx	@dptr,a
                                   1102 	.area GSFINAL (CODE)
      000000 02r00r7E         [24] 1103 	ljmp	__sdcc_program_startup
                                   1104 ;--------------------------------------------------------
                                   1105 ; Home
                                   1106 ;--------------------------------------------------------
                                   1107 	.area HOME    (CODE)
                                   1108 	.area HOME    (CODE)
      00007E                       1109 __sdcc_program_startup:
      00007E 02r0Dr6C         [24] 1110 	ljmp	_main
                                   1111 ;	return from main will return to caller
                                   1112 ;--------------------------------------------------------
                                   1113 ; code
                                   1114 ;--------------------------------------------------------
                                   1115 	.area CSEG    (CODE)
                                   1116 ;------------------------------------------------------------
                                   1117 ;Allocation info for local variables in function 'print_esc'
                                   1118 ;------------------------------------------------------------
                                   1119 ;au8State                  Allocated to registers r7 
                                   1120 ;------------------------------------------------------------
                                   1121 ;	src/main.c:173: void print_esc(UINT8 au8State)
                                   1122 ;	-----------------------------------------
                                   1123 ;	 function print_esc
                                   1124 ;	-----------------------------------------
      000000                       1125 _print_esc:
                           000007  1126 	ar7 = 0x07
                           000006  1127 	ar6 = 0x06
                           000005  1128 	ar5 = 0x05
                           000004  1129 	ar4 = 0x04
                           000003  1130 	ar3 = 0x03
                           000002  1131 	ar2 = 0x02
                           000001  1132 	ar1 = 0x01
                           000000  1133 	ar0 = 0x00
      000000 AF 82            [24] 1134 	mov	r7,dpl
                                   1135 ;	src/main.c:175: printf_fast_f("\n\r");
      000002 C0 07            [24] 1136 	push	ar7
      000004 74r00            [12] 1137 	mov	a,#___str_0
      000006 C0 E0            [24] 1138 	push	acc
      000008 74s00            [12] 1139 	mov	a,#(___str_0 >> 8)
      00000A C0 E0            [24] 1140 	push	acc
      00000C 12r00r00         [24] 1141 	lcall	_printf_fast_f
      00000F 15 81            [12] 1142 	dec	sp
      000011 15 81            [12] 1143 	dec	sp
      000013 D0 07            [24] 1144 	pop	ar7
                                   1145 ;	src/main.c:176: switch(au8State) {
      000015 BF 00 02         [24] 1146 	cjne	r7,#0x00,00119$
      000018 80 0A            [24] 1147 	sjmp	00101$
      00001A                       1148 00119$:
      00001A BF 01 02         [24] 1149 	cjne	r7,#0x01,00120$
      00001D 80 16            [24] 1150 	sjmp	00102$
      00001F                       1151 00120$:
                                   1152 ;	src/main.c:177: case STATE_SELF :
      00001F BF 02 33         [24] 1153 	cjne	r7,#0x02,00104$
      000022 80 22            [24] 1154 	sjmp	00103$
      000024                       1155 00101$:
                                   1156 ;	src/main.c:178: printf_fast_f("self ");
      000024 74r03            [12] 1157 	mov	a,#___str_1
      000026 C0 E0            [24] 1158 	push	acc
      000028 74s00            [12] 1159 	mov	a,#(___str_1 >> 8)
      00002A C0 E0            [24] 1160 	push	acc
      00002C 12r00r00         [24] 1161 	lcall	_printf_fast_f
      00002F 15 81            [12] 1162 	dec	sp
      000031 15 81            [12] 1163 	dec	sp
                                   1164 ;	src/main.c:179: break;
                                   1165 ;	src/main.c:180: case STATE_CROSS :
      000033 80 20            [24] 1166 	sjmp	00104$
      000035                       1167 00102$:
                                   1168 ;	src/main.c:181: printf_fast_f("cross");
      000035 74r09            [12] 1169 	mov	a,#___str_2
      000037 C0 E0            [24] 1170 	push	acc
      000039 74s00            [12] 1171 	mov	a,#(___str_2 >> 8)
      00003B C0 E0            [24] 1172 	push	acc
      00003D 12r00r00         [24] 1173 	lcall	_printf_fast_f
      000040 15 81            [12] 1174 	dec	sp
      000042 15 81            [12] 1175 	dec	sp
                                   1176 ;	src/main.c:182: break;
                                   1177 ;	src/main.c:183: case STATE_BOTH :
      000044 80 0F            [24] 1178 	sjmp	00104$
      000046                       1179 00103$:
                                   1180 ;	src/main.c:184: printf_fast_f("both ");
      000046 74r0F            [12] 1181 	mov	a,#___str_3
      000048 C0 E0            [24] 1182 	push	acc
      00004A 74s00            [12] 1183 	mov	a,#(___str_3 >> 8)
      00004C C0 E0            [24] 1184 	push	acc
      00004E 12r00r00         [24] 1185 	lcall	_printf_fast_f
      000051 15 81            [12] 1186 	dec	sp
      000053 15 81            [12] 1187 	dec	sp
                                   1188 ;	src/main.c:186: }
      000055                       1189 00104$:
                                   1190 ;	src/main.c:187: printf_fast_f(" output:This is UART%d\n\r", gu8UART);
      000055 AE*00            [24] 1191 	mov	r6,_gu8UART
      000057 7F 00            [12] 1192 	mov	r7,#0x00
      000059 C0 06            [24] 1193 	push	ar6
      00005B C0 07            [24] 1194 	push	ar7
      00005D 74r15            [12] 1195 	mov	a,#___str_4
      00005F C0 E0            [24] 1196 	push	acc
      000061 74s00            [12] 1197 	mov	a,#(___str_4 >> 8)
      000063 C0 E0            [24] 1198 	push	acc
      000065 12r00r00         [24] 1199 	lcall	_printf_fast_f
      000068 E5 81            [12] 1200 	mov	a,sp
      00006A 24 FC            [12] 1201 	add	a,#0xfc
      00006C F5 81            [12] 1202 	mov	sp,a
                                   1203 ;	src/main.c:188: }
      00006E 22               [24] 1204 	ret
                                   1205 ;------------------------------------------------------------
                                   1206 ;Allocation info for local variables in function 'print_char'
                                   1207 ;------------------------------------------------------------
                                   1208 ;au8Data                   Allocated to registers r7 
                                   1209 ;------------------------------------------------------------
                                   1210 ;	src/main.c:190: void print_char(char au8Data)
                                   1211 ;	-----------------------------------------
                                   1212 ;	 function print_char
                                   1213 ;	-----------------------------------------
      00006F                       1214 _print_char:
      00006F AF 82            [24] 1215 	mov	r7,dpl
                                   1216 ;	src/main.c:192: switch(au8Data) {
      000071 BF 0D 02         [24] 1217 	cjne	r7,#0x0d,00125$
      000074 80 0C            [24] 1218 	sjmp	00104$
      000076                       1219 00125$:
      000076 BF 1B 01         [24] 1220 	cjne	r7,#0x1b,00126$
      000079 22               [24] 1221 	ret
      00007A                       1222 00126$:
      00007A BF 1C 01         [24] 1223 	cjne	r7,#0x1c,00127$
      00007D 22               [24] 1224 	ret
      00007E                       1225 00127$:
                                   1226 ;	src/main.c:197: case '\r' :
      00007E BF 1D 11         [24] 1227 	cjne	r7,#0x1d,00105$
      000081 22               [24] 1228 	ret
      000082                       1229 00104$:
                                   1230 ;	src/main.c:198: printf_fast_f("\r\n");
      000082 74r2E            [12] 1231 	mov	a,#___str_5
      000084 C0 E0            [24] 1232 	push	acc
      000086 74s00            [12] 1233 	mov	a,#(___str_5 >> 8)
      000088 C0 E0            [24] 1234 	push	acc
      00008A 12r00r00         [24] 1235 	lcall	_printf_fast_f
      00008D 15 81            [12] 1236 	dec	sp
      00008F 15 81            [12] 1237 	dec	sp
                                   1238 ;	src/main.c:199: break;
                                   1239 ;	src/main.c:200: default :
      000091 22               [24] 1240 	ret
      000092                       1241 00105$:
                                   1242 ;	src/main.c:201: printf_fast_f("%c",au8Data);
      000092 7E 00            [12] 1243 	mov	r6,#0x00
      000094 C0 07            [24] 1244 	push	ar7
      000096 C0 06            [24] 1245 	push	ar6
      000098 74r31            [12] 1246 	mov	a,#___str_6
      00009A C0 E0            [24] 1247 	push	acc
      00009C 74s00            [12] 1248 	mov	a,#(___str_6 >> 8)
      00009E C0 E0            [24] 1249 	push	acc
      0000A0 12r00r00         [24] 1250 	lcall	_printf_fast_f
      0000A3 E5 81            [12] 1251 	mov	a,sp
      0000A5 24 FC            [12] 1252 	add	a,#0xfc
      0000A7 F5 81            [12] 1253 	mov	sp,a
                                   1254 ;	src/main.c:202: }
                                   1255 ;	src/main.c:203: }
      0000A9 22               [24] 1256 	ret
                                   1257 ;------------------------------------------------------------
                                   1258 ;Allocation info for local variables in function 'state_machine'
                                   1259 ;------------------------------------------------------------
                                   1260 ;au8RxUART                 Allocated with name '_state_machine_PARM_2'
                                   1261 ;au8SelfID                 Allocated with name '_state_machine_PARM_3'
                                   1262 ;au8OtherID                Allocated with name '_state_machine_PARM_4'
                                   1263 ;au8State                  Allocated to registers r7 
                                   1264 ;------------------------------------------------------------
                                   1265 ;	src/main.c:205: UINT8 state_machine(UINT8 au8State, UINT8 au8RxUART, UINT8 au8SelfID, UINT8 au8OtherID)
                                   1266 ;	-----------------------------------------
                                   1267 ;	 function state_machine
                                   1268 ;	-----------------------------------------
      0000AA                       1269 _state_machine:
      0000AA AF 82            [24] 1270 	mov	r7,dpl
                                   1271 ;	src/main.c:207: if(au8RxUART == KEY_ESC) {
      0000AC 74 1B            [12] 1272 	mov	a,#0x1b
      0000AE B5*00 02         [24] 1273 	cjne	a,_state_machine_PARM_2,00142$
      0000B1 80 02            [24] 1274 	sjmp	00143$
      0000B3                       1275 00142$:
      0000B3 80 79            [24] 1276 	sjmp	00110$
      0000B5                       1277 00143$:
                                   1278 ;	src/main.c:208: gu8UART = au8SelfID;
      0000B5 AE*01            [24] 1279 	mov	r6,_state_machine_PARM_3
      0000B7 8E*00            [24] 1280 	mov	_gu8UART,r6
                                   1281 ;	src/main.c:209: printf_fast_f("\r\ninput:This is UART%d", gu8UART);
      0000B9 AC*00            [24] 1282 	mov	r4,_gu8UART
      0000BB 7D 00            [12] 1283 	mov	r5,#0x00
      0000BD C0 07            [24] 1284 	push	ar7
      0000BF C0 06            [24] 1285 	push	ar6
      0000C1 C0 04            [24] 1286 	push	ar4
      0000C3 C0 05            [24] 1287 	push	ar5
      0000C5 74r34            [12] 1288 	mov	a,#___str_7
      0000C7 C0 E0            [24] 1289 	push	acc
      0000C9 74s00            [12] 1290 	mov	a,#(___str_7 >> 8)
      0000CB C0 E0            [24] 1291 	push	acc
      0000CD 12r00r00         [24] 1292 	lcall	_printf_fast_f
      0000D0 E5 81            [12] 1293 	mov	a,sp
      0000D2 24 FC            [12] 1294 	add	a,#0xfc
      0000D4 F5 81            [12] 1295 	mov	sp,a
      0000D6 D0 06            [24] 1296 	pop	ar6
      0000D8 D0 07            [24] 1297 	pop	ar7
                                   1298 ;	src/main.c:210: switch(au8State) {
      0000DA BF 00 02         [24] 1299 	cjne	r7,#0x00,00144$
      0000DD 80 0D            [24] 1300 	sjmp	00101$
      0000DF                       1301 00144$:
      0000DF BF 01 02         [24] 1302 	cjne	r7,#0x01,00145$
      0000E2 80 21            [24] 1303 	sjmp	00102$
      0000E4                       1304 00145$:
      0000E4 BF 02 02         [24] 1305 	cjne	r7,#0x02,00146$
      0000E7 80 35            [24] 1306 	sjmp	00103$
      0000E9                       1307 00146$:
      0000E9 02r01r71         [24] 1308 	ljmp	00111$
                                   1309 ;	src/main.c:211: case STATE_SELF :
      0000EC                       1310 00101$:
                                   1311 ;	src/main.c:212: au8State = STATE_CROSS;
      0000EC 7F 01            [12] 1312 	mov	r7,#0x01
                                   1313 ;	src/main.c:213: gu8UART = au8SelfID;
      0000EE 8E*00            [24] 1314 	mov	_gu8UART,r6
                                   1315 ;	src/main.c:214: print_esc(au8State);
      0000F0 75 82 01         [24] 1316 	mov	dpl,#0x01
      0000F3 C0 07            [24] 1317 	push	ar7
      0000F5 12r00r00         [24] 1318 	lcall	_print_esc
                                   1319 ;	src/main.c:215: gu8UART = au8OtherID;
      0000F8 85*02*00         [24] 1320 	mov	_gu8UART,_state_machine_PARM_4
                                   1321 ;	src/main.c:216: print_esc(au8State);
      0000FB 75 82 01         [24] 1322 	mov	dpl,#0x01
      0000FE 12r00r00         [24] 1323 	lcall	_print_esc
      000101 D0 07            [24] 1324 	pop	ar7
                                   1325 ;	src/main.c:217: break;
                                   1326 ;	src/main.c:218: case STATE_CROSS :
      000103 80 6C            [24] 1327 	sjmp	00111$
      000105                       1328 00102$:
                                   1329 ;	src/main.c:219: au8State = STATE_BOTH;
      000105 7F 02            [12] 1330 	mov	r7,#0x02
                                   1331 ;	src/main.c:220: gu8UART = au8SelfID;
      000107 8E*00            [24] 1332 	mov	_gu8UART,r6
                                   1333 ;	src/main.c:221: print_esc(au8State);
      000109 75 82 02         [24] 1334 	mov	dpl,#0x02
      00010C C0 07            [24] 1335 	push	ar7
      00010E 12r00r00         [24] 1336 	lcall	_print_esc
                                   1337 ;	src/main.c:222: gu8UART = au8OtherID;
      000111 85*02*00         [24] 1338 	mov	_gu8UART,_state_machine_PARM_4
                                   1339 ;	src/main.c:223: print_esc(au8State);
      000114 75 82 02         [24] 1340 	mov	dpl,#0x02
      000117 12r00r00         [24] 1341 	lcall	_print_esc
      00011A D0 07            [24] 1342 	pop	ar7
                                   1343 ;	src/main.c:224: break;
                                   1344 ;	src/main.c:225: case STATE_BOTH :
      00011C 80 53            [24] 1345 	sjmp	00111$
      00011E                       1346 00103$:
                                   1347 ;	src/main.c:226: au8State = STATE_SELF;
      00011E 7F 00            [12] 1348 	mov	r7,#0x00
                                   1349 ;	src/main.c:227: gu8UART = au8SelfID;
      000120 8E*00            [24] 1350 	mov	_gu8UART,r6
                                   1351 ;	src/main.c:228: print_esc(au8State);
      000122 75 82 00         [24] 1352 	mov	dpl,#0x00
      000125 C0 07            [24] 1353 	push	ar7
      000127 12r00r00         [24] 1354 	lcall	_print_esc
      00012A D0 07            [24] 1355 	pop	ar7
                                   1356 ;	src/main.c:230: }
      00012C 80 43            [24] 1357 	sjmp	00111$
      00012E                       1358 00110$:
                                   1359 ;	src/main.c:233: switch(au8State) {
      00012E BF 00 02         [24] 1360 	cjne	r7,#0x00,00147$
      000131 80 0A            [24] 1361 	sjmp	00105$
      000133                       1362 00147$:
      000133 BF 01 02         [24] 1363 	cjne	r7,#0x01,00148$
      000136 80 14            [24] 1364 	sjmp	00106$
      000138                       1365 00148$:
                                   1366 ;	src/main.c:234: case STATE_SELF :
      000138 BF 02 36         [24] 1367 	cjne	r7,#0x02,00111$
      00013B 80 1E            [24] 1368 	sjmp	00107$
      00013D                       1369 00105$:
                                   1370 ;	src/main.c:235: gu8UART = au8SelfID;
      00013D 85*01*00         [24] 1371 	mov	_gu8UART,_state_machine_PARM_3
                                   1372 ;	src/main.c:236: print_char(au8RxUART);
      000140 85*00 82         [24] 1373 	mov	dpl,_state_machine_PARM_2
      000143 C0 07            [24] 1374 	push	ar7
      000145 12r00r6F         [24] 1375 	lcall	_print_char
      000148 D0 07            [24] 1376 	pop	ar7
                                   1377 ;	src/main.c:237: break;
                                   1378 ;	src/main.c:238: case STATE_CROSS :
      00014A 80 25            [24] 1379 	sjmp	00111$
      00014C                       1380 00106$:
                                   1381 ;	src/main.c:239: gu8UART = au8OtherID;
      00014C 85*02*00         [24] 1382 	mov	_gu8UART,_state_machine_PARM_4
                                   1383 ;	src/main.c:240: print_char(au8RxUART);
      00014F 85*00 82         [24] 1384 	mov	dpl,_state_machine_PARM_2
      000152 C0 07            [24] 1385 	push	ar7
      000154 12r00r6F         [24] 1386 	lcall	_print_char
      000157 D0 07            [24] 1387 	pop	ar7
                                   1388 ;	src/main.c:241: break;
                                   1389 ;	src/main.c:242: case STATE_BOTH :
      000159 80 16            [24] 1390 	sjmp	00111$
      00015B                       1391 00107$:
                                   1392 ;	src/main.c:243: gu8UART = au8SelfID;
      00015B 85*01*00         [24] 1393 	mov	_gu8UART,_state_machine_PARM_3
                                   1394 ;	src/main.c:244: print_char(au8RxUART);
      00015E 85*00 82         [24] 1395 	mov	dpl,_state_machine_PARM_2
      000161 C0 07            [24] 1396 	push	ar7
      000163 12r00r6F         [24] 1397 	lcall	_print_char
                                   1398 ;	src/main.c:245: gu8UART = au8OtherID;
      000166 85*02*00         [24] 1399 	mov	_gu8UART,_state_machine_PARM_4
                                   1400 ;	src/main.c:246: print_char(au8RxUART);
      000169 85*00 82         [24] 1401 	mov	dpl,_state_machine_PARM_2
      00016C 12r00r6F         [24] 1402 	lcall	_print_char
      00016F D0 07            [24] 1403 	pop	ar7
                                   1404 ;	src/main.c:248: }
      000171                       1405 00111$:
                                   1406 ;	src/main.c:250: return au8State;
      000171 8F 82            [24] 1407 	mov	dpl,r7
                                   1408 ;	src/main.c:251: }
      000173 22               [24] 1409 	ret
                                   1410 ;------------------------------------------------------------
                                   1411 ;Allocation info for local variables in function 'Timer0_ISR'
                                   1412 ;------------------------------------------------------------
                                   1413 ;	src/main.c:253: void Timer0_ISR (void) interrupt(1)  //interrupt address is 0x000B
                                   1414 ;	-----------------------------------------
                                   1415 ;	 function Timer0_ISR
                                   1416 ;	-----------------------------------------
      000174                       1417 _Timer0_ISR:
                           00000F  1418 	ar7 = 0x0f
                           00000E  1419 	ar6 = 0x0e
                           00000D  1420 	ar5 = 0x0d
                           00000C  1421 	ar4 = 0x0c
                           00000B  1422 	ar3 = 0x0b
                           00000A  1423 	ar2 = 0x0a
                           000009  1424 	ar1 = 0x09
                           000008  1425 	ar0 = 0x08
      000174 C0 E0            [24] 1426 	push	acc
      000176 C0 82            [24] 1427 	push	dpl
      000178 C0 83            [24] 1428 	push	dph
      00017A C0 D0            [24] 1429 	push	psw
                                   1430 ;	src/main.c:255: TH0 = TH0_INIT;
      00017C 75 8C D4         [24] 1431 	mov	_TH0,#0xd4
                                   1432 ;	src/main.c:256: TL0 = TL0_INIT;
      00017F 75 8A 13         [24] 1433 	mov	_TL0,#0x13
                                   1434 ;	src/main.c:257: gu16TimeCnt++;
      000182 90r00r57         [24] 1435 	mov	dptr,#_gu16TimeCnt
      000185 E0               [24] 1436 	movx	a,@dptr
      000186 24 01            [12] 1437 	add	a,#0x01
      000188 F0               [24] 1438 	movx	@dptr,a
      000189 A3               [24] 1439 	inc	dptr
      00018A E0               [24] 1440 	movx	a,@dptr
      00018B 34 00            [12] 1441 	addc	a,#0x00
      00018D F0               [24] 1442 	movx	@dptr,a
                                   1443 ;	src/main.c:258: gu16TimeCntMilliSec++;
      00018E 90r00r59         [24] 1444 	mov	dptr,#_gu16TimeCntMilliSec
      000191 E0               [24] 1445 	movx	a,@dptr
      000192 24 01            [12] 1446 	add	a,#0x01
      000194 F0               [24] 1447 	movx	@dptr,a
      000195 A3               [24] 1448 	inc	dptr
      000196 E0               [24] 1449 	movx	a,@dptr
      000197 34 00            [12] 1450 	addc	a,#0x00
      000199 F0               [24] 1451 	movx	@dptr,a
                                   1452 ;	src/main.c:268: } //void Timer0_ISR (void) __interrupt 1  //interrupt address is 0x000B
      00019A D0 D0            [24] 1453 	pop	psw
      00019C D0 83            [24] 1454 	pop	dph
      00019E D0 82            [24] 1455 	pop	dpl
      0001A0 D0 E0            [24] 1456 	pop	acc
      0001A2 32               [24] 1457 	reti
                                   1458 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1459 ;	eliminated unneeded push/pop b
                                   1460 ;------------------------------------------------------------
                                   1461 ;Allocation info for local variables in function 'pin_interrupt_isr'
                                   1462 ;------------------------------------------------------------
                                   1463 ;	src/main.c:270: void pin_interrupt_isr(void) interrupt(7)
                                   1464 ;	-----------------------------------------
                                   1465 ;	 function pin_interrupt_isr
                                   1466 ;	-----------------------------------------
      0001A3                       1467 _pin_interrupt_isr:
      0001A3 C0 E0            [24] 1468 	push	acc
                                   1469 ;	src/main.c:272: if (PIF == 0x10) {
      0001A5 E5 EC            [12] 1470 	mov	a,_PIF
                                   1471 ;	src/main.c:274: PIF = 0;
      0001A7 75 EC 00         [24] 1472 	mov	_PIF,#0x00
                                   1473 ;	src/main.c:275: }// void pin_interrupt_isr (void) interrupt(7)
      0001AA D0 E0            [24] 1474 	pop	acc
      0001AC 32               [24] 1475 	reti
                                   1476 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1477 ;	eliminated unneeded push/pop psw
                                   1478 ;	eliminated unneeded push/pop dpl
                                   1479 ;	eliminated unneeded push/pop dph
                                   1480 ;	eliminated unneeded push/pop b
                                   1481 ;------------------------------------------------------------
                                   1482 ;Allocation info for local variables in function 'MODIFY_HIRC_166'
                                   1483 ;------------------------------------------------------------
                                   1484 ;hircmap0                  Allocated to registers r7 
                                   1485 ;hircmap1                  Allocated to registers r6 
                                   1486 ;trimvalue16bit            Allocated to registers r7 r5 
                                   1487 ;------------------------------------------------------------
                                   1488 ;	src/main.c:277: void MODIFY_HIRC_166(void)
                                   1489 ;	-----------------------------------------
                                   1490 ;	 function MODIFY_HIRC_166
                                   1491 ;	-----------------------------------------
      0001AD                       1492 _MODIFY_HIRC_166:
                           000007  1493 	ar7 = 0x07
                           000006  1494 	ar6 = 0x06
                           000005  1495 	ar5 = 0x05
                           000004  1496 	ar4 = 0x04
                           000003  1497 	ar3 = 0x03
                           000002  1498 	ar2 = 0x02
                           000001  1499 	ar1 = 0x01
                           000000  1500 	ar0 = 0x00
                                   1501 ;	src/main.c:282: if ((PCON&SET_BIT4)==SET_BIT4) {
      0001AD AE 87            [24] 1502 	mov	r6,_PCON
      0001AF 53 06 10         [24] 1503 	anl	ar6,#0x10
      0001B2 7F 00            [12] 1504 	mov	r7,#0x00
      0001B4 BE 10 41         [24] 1505 	cjne	r6,#0x10,00103$
      0001B7 BF 00 3E         [24] 1506 	cjne	r7,#0x00,00103$
                                   1507 ;	src/main.c:283: hircmap0 = RCTRIM0;
      0001BA AF 84            [24] 1508 	mov	r7,_RCTRIM0
                                   1509 ;	src/main.c:284: hircmap1 = RCTRIM1;
      0001BC AE 85            [24] 1510 	mov	r6,_RCTRIM1
                                   1511 ;	src/main.c:285: trimvalue16bit = ((hircmap0<<1)+(hircmap1&0x01));
      0001BE 7D 00            [12] 1512 	mov	r5,#0x00
      0001C0 EF               [12] 1513 	mov	a,r7
      0001C1 2F               [12] 1514 	add	a,r7
      0001C2 FF               [12] 1515 	mov	r7,a
      0001C3 ED               [12] 1516 	mov	a,r5
      0001C4 33               [12] 1517 	rlc	a
      0001C5 FD               [12] 1518 	mov	r5,a
      0001C6 53 06 01         [24] 1519 	anl	ar6,#0x01
      0001C9 7C 00            [12] 1520 	mov	r4,#0x00
      0001CB EE               [12] 1521 	mov	a,r6
      0001CC 2F               [12] 1522 	add	a,r7
      0001CD FF               [12] 1523 	mov	r7,a
      0001CE EC               [12] 1524 	mov	a,r4
      0001CF 3D               [12] 1525 	addc	a,r5
      0001D0 FD               [12] 1526 	mov	r5,a
                                   1527 ;	src/main.c:286: trimvalue16bit = trimvalue16bit - 15;
      0001D1 EF               [12] 1528 	mov	a,r7
      0001D2 24 F1            [12] 1529 	add	a,#0xf1
      0001D4 FF               [12] 1530 	mov	r7,a
      0001D5 ED               [12] 1531 	mov	a,r5
      0001D6 34 FF            [12] 1532 	addc	a,#0xff
      0001D8 FD               [12] 1533 	mov	r5,a
                                   1534 ;	src/main.c:287: hircmap1 = trimvalue16bit&0x01;
      0001D9 8F 06            [24] 1535 	mov	ar6,r7
      0001DB 53 06 01         [24] 1536 	anl	ar6,#0x01
                                   1537 ;	src/main.c:288: hircmap0 = trimvalue16bit>>1;
      0001DE ED               [12] 1538 	mov	a,r5
      0001DF C3               [12] 1539 	clr	c
      0001E0 13               [12] 1540 	rrc	a
      0001E1 CF               [12] 1541 	xch	a,r7
      0001E2 13               [12] 1542 	rrc	a
      0001E3 CF               [12] 1543 	xch	a,r7
      0001E4 FD               [12] 1544 	mov	r5,a
                                   1545 ;	src/main.c:289: TA=0XAA;
      0001E5 75 C7 AA         [24] 1546 	mov	_TA,#0xaa
                                   1547 ;	src/main.c:290: TA=0X55;
      0001E8 75 C7 55         [24] 1548 	mov	_TA,#0x55
                                   1549 ;	src/main.c:291: RCTRIM0 = hircmap0;
      0001EB 8F 84            [24] 1550 	mov	_RCTRIM0,r7
                                   1551 ;	src/main.c:292: TA=0XAA;
      0001ED 75 C7 AA         [24] 1552 	mov	_TA,#0xaa
                                   1553 ;	src/main.c:293: TA=0X55;
      0001F0 75 C7 55         [24] 1554 	mov	_TA,#0x55
                                   1555 ;	src/main.c:294: RCTRIM1 = hircmap1;
      0001F3 8E 85            [24] 1556 	mov	_RCTRIM1,r6
                                   1557 ;	src/main.c:296: PCON &= CLR_BIT4;
      0001F5 53 87 EF         [24] 1558 	anl	_PCON,#0xef
      0001F8                       1559 00103$:
                                   1560 ;	src/main.c:298: }
      0001F8 22               [24] 1561 	ret
                                   1562 ;------------------------------------------------------------
                                   1563 ;Allocation info for local variables in function 'disp_help'
                                   1564 ;------------------------------------------------------------
                                   1565 ;au8Code                   Allocated to registers r7 
                                   1566 ;------------------------------------------------------------
                                   1567 ;	src/main.c:299: void disp_help(UINT8 au8Code)
                                   1568 ;	-----------------------------------------
                                   1569 ;	 function disp_help
                                   1570 ;	-----------------------------------------
      0001F9                       1571 _disp_help:
      0001F9 AF 82            [24] 1572 	mov	r7,dpl
                                   1573 ;	src/main.c:301: gu8UART = 1;
      0001FB 75*00 01         [24] 1574 	mov	_gu8UART,#0x01
                                   1575 ;	src/main.c:302: switch(au8Code) {
      0001FE BF 31 01         [24] 1576 	cjne	r7,#0x31,00165$
      000201 22               [24] 1577 	ret
      000202                       1578 00165$:
      000202 BF 32 01         [24] 1579 	cjne	r7,#0x32,00166$
      000205 22               [24] 1580 	ret
      000206                       1581 00166$:
      000206 BF 33 02         [24] 1582 	cjne	r7,#0x33,00167$
      000209 80 32            [24] 1583 	sjmp	00103$
      00020B                       1584 00167$:
      00020B BF 34 01         [24] 1585 	cjne	r7,#0x34,00168$
      00020E 22               [24] 1586 	ret
      00020F                       1587 00168$:
      00020F BF 50 02         [24] 1588 	cjne	r7,#0x50,00169$
      000212 80 49            [24] 1589 	sjmp	00106$
      000214                       1590 00169$:
      000214 BF 53 03         [24] 1591 	cjne	r7,#0x53,00170$
      000217 02r02r9D         [24] 1592 	ljmp	00110$
      00021A                       1593 00170$:
      00021A BF 54 02         [24] 1594 	cjne	r7,#0x54,00171$
      00021D 80 5E            [24] 1595 	sjmp	00108$
      00021F                       1596 00171$:
      00021F BF 56 03         [24] 1597 	cjne	r7,#0x56,00172$
      000222 02r02rAD         [24] 1598 	ljmp	00112$
      000225                       1599 00172$:
      000225 BF 70 02         [24] 1600 	cjne	r7,#0x70,00173$
      000228 80 23            [24] 1601 	sjmp	00105$
      00022A                       1602 00173$:
      00022A BF 73 02         [24] 1603 	cjne	r7,#0x73,00174$
      00022D 80 5E            [24] 1604 	sjmp	00109$
      00022F                       1605 00174$:
      00022F BF 74 02         [24] 1606 	cjne	r7,#0x74,00175$
      000232 80 39            [24] 1607 	sjmp	00107$
      000234                       1608 00175$:
      000234 BF 76 03         [24] 1609 	cjne	r7,#0x76,00176$
      000237 02r02rAD         [24] 1610 	ljmp	00112$
      00023A                       1611 00176$:
      00023A 02r02rBD         [24] 1612 	ljmp	00113$
                                   1613 ;	src/main.c:307: case '3' :
      00023D                       1614 00103$:
                                   1615 ;	src/main.c:308: printf_fast_f("Idle preamble on/off\r\n");
      00023D 74r4B            [12] 1616 	mov	a,#___str_8
      00023F C0 E0            [24] 1617 	push	acc
      000241 74s00            [12] 1618 	mov	a,#(___str_8 >> 8)
      000243 C0 E0            [24] 1619 	push	acc
      000245 12r00r00         [24] 1620 	lcall	_printf_fast_f
      000248 15 81            [12] 1621 	dec	sp
      00024A 15 81            [12] 1622 	dec	sp
                                   1623 ;	src/main.c:309: break;
      00024C 22               [24] 1624 	ret
                                   1625 ;	src/main.c:312: case 'p' :
      00024D                       1626 00105$:
                                   1627 ;	src/main.c:313: printf_fast_f("LineFi Power Off\r\n");
      00024D 74r62            [12] 1628 	mov	a,#___str_9
      00024F C0 E0            [24] 1629 	push	acc
      000251 74s00            [12] 1630 	mov	a,#(___str_9 >> 8)
      000253 C0 E0            [24] 1631 	push	acc
      000255 12r00r00         [24] 1632 	lcall	_printf_fast_f
      000258 15 81            [12] 1633 	dec	sp
      00025A 15 81            [12] 1634 	dec	sp
                                   1635 ;	src/main.c:314: break;
      00025C 22               [24] 1636 	ret
                                   1637 ;	src/main.c:315: case 'P' :
      00025D                       1638 00106$:
                                   1639 ;	src/main.c:316: printf_fast_f("LineFi Power On\r\n");
      00025D 74r75            [12] 1640 	mov	a,#___str_10
      00025F C0 E0            [24] 1641 	push	acc
      000261 74s00            [12] 1642 	mov	a,#(___str_10 >> 8)
      000263 C0 E0            [24] 1643 	push	acc
      000265 12r00r00         [24] 1644 	lcall	_printf_fast_f
      000268 15 81            [12] 1645 	dec	sp
      00026A 15 81            [12] 1646 	dec	sp
                                   1647 ;	src/main.c:317: break;
      00026C 22               [24] 1648 	ret
                                   1649 ;	src/main.c:318: case 't' :
      00026D                       1650 00107$:
                                   1651 ;	src/main.c:319: printf_fast_f("LineFi Uart Tx Low\r\n");
      00026D 74r87            [12] 1652 	mov	a,#___str_11
      00026F C0 E0            [24] 1653 	push	acc
      000271 74s00            [12] 1654 	mov	a,#(___str_11 >> 8)
      000273 C0 E0            [24] 1655 	push	acc
      000275 12r00r00         [24] 1656 	lcall	_printf_fast_f
      000278 15 81            [12] 1657 	dec	sp
      00027A 15 81            [12] 1658 	dec	sp
                                   1659 ;	src/main.c:320: break;
      00027C 22               [24] 1660 	ret
                                   1661 ;	src/main.c:321: case 'T' :
      00027D                       1662 00108$:
                                   1663 ;	src/main.c:322: printf_fast_f("LineFi Uart Tx High\r\n");
      00027D 74r9C            [12] 1664 	mov	a,#___str_12
      00027F C0 E0            [24] 1665 	push	acc
      000281 74s00            [12] 1666 	mov	a,#(___str_12 >> 8)
      000283 C0 E0            [24] 1667 	push	acc
      000285 12r00r00         [24] 1668 	lcall	_printf_fast_f
      000288 15 81            [12] 1669 	dec	sp
      00028A 15 81            [12] 1670 	dec	sp
                                   1671 ;	src/main.c:323: break;
      00028C 22               [24] 1672 	ret
                                   1673 ;	src/main.c:324: case 's' :
      00028D                       1674 00109$:
                                   1675 ;	src/main.c:325: printf_fast_f("LineFi CSC rx FSM Off\r\n");
      00028D 74rB2            [12] 1676 	mov	a,#___str_13
      00028F C0 E0            [24] 1677 	push	acc
      000291 74s00            [12] 1678 	mov	a,#(___str_13 >> 8)
      000293 C0 E0            [24] 1679 	push	acc
      000295 12r00r00         [24] 1680 	lcall	_printf_fast_f
      000298 15 81            [12] 1681 	dec	sp
      00029A 15 81            [12] 1682 	dec	sp
                                   1683 ;	src/main.c:326: break;
      00029C 22               [24] 1684 	ret
                                   1685 ;	src/main.c:327: case 'S' :
      00029D                       1686 00110$:
                                   1687 ;	src/main.c:328: printf_fast_f("LineFi CSC rx FSM ON\r\n");
      00029D 74rCA            [12] 1688 	mov	a,#___str_14
      00029F C0 E0            [24] 1689 	push	acc
      0002A1 74s00            [12] 1690 	mov	a,#(___str_14 >> 8)
      0002A3 C0 E0            [24] 1691 	push	acc
      0002A5 12r00r00         [24] 1692 	lcall	_printf_fast_f
      0002A8 15 81            [12] 1693 	dec	sp
      0002AA 15 81            [12] 1694 	dec	sp
                                   1695 ;	src/main.c:329: break;
                                   1696 ;	src/main.c:330: case 'v' : case 'V' :
      0002AC 22               [24] 1697 	ret
      0002AD                       1698 00112$:
                                   1699 ;	src/main.c:331: printf_fast_f(__VERSION__);
      0002AD 74rE1            [12] 1700 	mov	a,#___str_15
      0002AF C0 E0            [24] 1701 	push	acc
      0002B1 74s00            [12] 1702 	mov	a,#(___str_15 >> 8)
      0002B3 C0 E0            [24] 1703 	push	acc
      0002B5 12r00r00         [24] 1704 	lcall	_printf_fast_f
      0002B8 15 81            [12] 1705 	dec	sp
      0002BA 15 81            [12] 1706 	dec	sp
                                   1707 ;	src/main.c:332: break;
                                   1708 ;	src/main.c:333: default :
      0002BC 22               [24] 1709 	ret
      0002BD                       1710 00113$:
                                   1711 ;	src/main.c:334: printf_fast_f("1: downlink packet 1\r\n");
      0002BD 74rFB            [12] 1712 	mov	a,#___str_16
      0002BF C0 E0            [24] 1713 	push	acc
      0002C1 74s00            [12] 1714 	mov	a,#(___str_16 >> 8)
      0002C3 C0 E0            [24] 1715 	push	acc
      0002C5 12r00r00         [24] 1716 	lcall	_printf_fast_f
      0002C8 15 81            [12] 1717 	dec	sp
      0002CA 15 81            [12] 1718 	dec	sp
                                   1719 ;	src/main.c:335: printf_fast_f("2: downlink packet 2\r\n");
      0002CC 74r12            [12] 1720 	mov	a,#___str_17
      0002CE C0 E0            [24] 1721 	push	acc
      0002D0 74s01            [12] 1722 	mov	a,#(___str_17 >> 8)
      0002D2 C0 E0            [24] 1723 	push	acc
      0002D4 12r00r00         [24] 1724 	lcall	_printf_fast_f
      0002D7 15 81            [12] 1725 	dec	sp
      0002D9 15 81            [12] 1726 	dec	sp
                                   1727 ;	src/main.c:336: printf_fast_f("3: uplink idle preamble on/off\r\n");
      0002DB 74r29            [12] 1728 	mov	a,#___str_18
      0002DD C0 E0            [24] 1729 	push	acc
      0002DF 74s01            [12] 1730 	mov	a,#(___str_18 >> 8)
      0002E1 C0 E0            [24] 1731 	push	acc
      0002E3 12r00r00         [24] 1732 	lcall	_printf_fast_f
      0002E6 15 81            [12] 1733 	dec	sp
      0002E8 15 81            [12] 1734 	dec	sp
                                   1735 ;	src/main.c:337: printf_fast_f("p/P: LineFi Power off/on\r\n");
      0002EA 74r4A            [12] 1736 	mov	a,#___str_19
      0002EC C0 E0            [24] 1737 	push	acc
      0002EE 74s01            [12] 1738 	mov	a,#(___str_19 >> 8)
      0002F0 C0 E0            [24] 1739 	push	acc
      0002F2 12r00r00         [24] 1740 	lcall	_printf_fast_f
      0002F5 15 81            [12] 1741 	dec	sp
      0002F7 15 81            [12] 1742 	dec	sp
                                   1743 ;	src/main.c:338: printf_fast_f("t/T: LineFi Uart Tx Low/High\r\n");
      0002F9 74r65            [12] 1744 	mov	a,#___str_20
      0002FB C0 E0            [24] 1745 	push	acc
      0002FD 74s01            [12] 1746 	mov	a,#(___str_20 >> 8)
      0002FF C0 E0            [24] 1747 	push	acc
      000301 12r00r00         [24] 1748 	lcall	_printf_fast_f
      000304 15 81            [12] 1749 	dec	sp
      000306 15 81            [12] 1750 	dec	sp
                                   1751 ;	src/main.c:339: printf_fast_f("s/S: LineFie CSC Rx FSM off/on\r\n");
      000308 74r84            [12] 1752 	mov	a,#___str_21
      00030A C0 E0            [24] 1753 	push	acc
      00030C 74s01            [12] 1754 	mov	a,#(___str_21 >> 8)
      00030E C0 E0            [24] 1755 	push	acc
      000310 12r00r00         [24] 1756 	lcall	_printf_fast_f
      000313 15 81            [12] 1757 	dec	sp
      000315 15 81            [12] 1758 	dec	sp
                                   1759 ;	src/main.c:340: printf_fast_f("test procedure: p -> P -> T -> S -> 1 or 2\r\n");
      000317 74rA5            [12] 1760 	mov	a,#___str_22
      000319 C0 E0            [24] 1761 	push	acc
      00031B 74s01            [12] 1762 	mov	a,#(___str_22 >> 8)
      00031D C0 E0            [24] 1763 	push	acc
      00031F 12r00r00         [24] 1764 	lcall	_printf_fast_f
      000322 15 81            [12] 1765 	dec	sp
      000324 15 81            [12] 1766 	dec	sp
                                   1767 ;	src/main.c:342: }
                                   1768 ;	src/main.c:343: }
      000326 22               [24] 1769 	ret
                                   1770 ;------------------------------------------------------------
                                   1771 ;Allocation info for local variables in function 'gpio_setup'
                                   1772 ;------------------------------------------------------------
                                   1773 ;	src/main.c:345: void gpio_setup()
                                   1774 ;	-----------------------------------------
                                   1775 ;	 function gpio_setup
                                   1776 ;	-----------------------------------------
      000327                       1777 _gpio_setup:
                                   1778 ;	src/main.c:373: Set_All_GPIO_Quasi_Mode;
      000327 75 B1 00         [24] 1779 	mov	_P0M1,#0x00
      00032A 75 B2 00         [24] 1780 	mov	_P0M2,#0x00
      00032D 75 B3 00         [24] 1781 	mov	_P1M1,#0x00
      000330 75 B4 00         [24] 1782 	mov	_P1M2,#0x00
      000333 75 AC 00         [24] 1783 	mov	_P3M1,#0x00
      000336 75 AD 00         [24] 1784 	mov	_P3M2,#0x00
                                   1785 ;	src/main.c:375: P13_Input_Mode;
      000339 43 B3 08         [24] 1786 	orl	_P1M1,#0x08
      00033C 53 B4 F7         [24] 1787 	anl	_P1M2,#0xf7
                                   1788 ;	src/main.c:376: P30_Input_Mode;
      00033F 43 AC 01         [24] 1789 	orl	_P3M1,#0x01
      000342 53 AD FE         [24] 1790 	anl	_P3M2,#0xfe
                                   1791 ;	src/main.c:377: P17_Input_Mode;
      000345 43 B3 80         [24] 1792 	orl	_P1M1,#0x80
      000348 53 B4 7F         [24] 1793 	anl	_P1M2,#0x7f
                                   1794 ;	src/main.c:378: P00_Input_Mode;
      00034B 43 B1 01         [24] 1795 	orl	_P0M1,#0x01
      00034E 53 B2 FE         [24] 1796 	anl	_P0M2,#0xfe
                                   1797 ;	src/main.c:379: P15_Input_Mode;
      000351 43 B3 20         [24] 1798 	orl	_P1M1,#0x20
      000354 53 B4 DF         [24] 1799 	anl	_P1M2,#0xdf
                                   1800 ;	src/main.c:381: P05_Input_Mode; // rx_level1
      000357 43 B1 20         [24] 1801 	orl	_P0M1,#0x20
      00035A 53 B2 DF         [24] 1802 	anl	_P0M2,#0xdf
                                   1803 ;	src/main.c:382: P04_Input_Mode; // rx_level2
      00035D 43 B1 10         [24] 1804 	orl	_P0M1,#0x10
      000360 53 B2 EF         [24] 1805 	anl	_P0M2,#0xef
                                   1806 ;	src/main.c:384: P10_PushPull_Mode; // line fi enable
      000363 53 B3 FE         [24] 1807 	anl	_P1M1,#0xfe
      000366 43 B4 01         [24] 1808 	orl	_P1M2,#0x01
                                   1809 ;	src/main.c:385: P11_PushPull_Mode; // line fi enable1
      000369 53 B3 FD         [24] 1810 	anl	_P1M1,#0xfd
      00036C 43 B4 02         [24] 1811 	orl	_P1M2,#0x02
                                   1812 ;	src/main.c:386: P12_PushPull_Mode; // line fi enable2
      00036F 53 B3 FB         [24] 1813 	anl	_P1M1,#0xfb
      000372 43 B4 04         [24] 1814 	orl	_P1M2,#0x04
                                   1815 ;	src/main.c:387: LINEFI_EN0 = 0;
                                   1816 ;	assignBit
      000375 C2 90            [12] 1817 	clr	_P10
                                   1818 ;	src/main.c:388: LINEFI_EN1 = 0;
                                   1819 ;	assignBit
      000377 C2 91            [12] 1820 	clr	_P11
                                   1821 ;	src/main.c:389: LINEFI_EN2 = 0;
                                   1822 ;	assignBit
      000379 C2 92            [12] 1823 	clr	_P12
                                   1824 ;	src/main.c:390: }
      00037B 22               [24] 1825 	ret
                                   1826 ;------------------------------------------------------------
                                   1827 ;Allocation info for local variables in function 'state_switches'
                                   1828 ;------------------------------------------------------------
                                   1829 ;su8PrevSW                 Allocated with name '_state_switches_su8PrevSW_65536_76'
                                   1830 ;apu8SwNum                 Allocated with name '_state_switches_PARM_2'
                                   1831 ;au8SW                     Allocated to registers r7 
                                   1832 ;i                         Allocated to registers r2 
                                   1833 ;u8Result                  Allocated to registers r6 
                                   1834 ;------------------------------------------------------------
                                   1835 ;	src/main.c:408: UINT8 state_switches(UINT8 au8SW, UINT8 *apu8SwNum)
                                   1836 ;	-----------------------------------------
                                   1837 ;	 function state_switches
                                   1838 ;	-----------------------------------------
      00037C                       1839 _state_switches:
      00037C AF 82            [24] 1840 	mov	r7,dpl
                                   1841 ;	src/main.c:413: UINT8 u8Result = SW_NONE;
      00037E 7E 04            [12] 1842 	mov	r6,#0x04
                                   1843 ;	src/main.c:414: if (su8PrevSW == au8SW) {
      000380 90r00r95         [24] 1844 	mov	dptr,#_state_switches_su8PrevSW_65536_76
      000383 E0               [24] 1845 	movx	a,@dptr
      000384 B5 07 14         [24] 1846 	cjne	a,ar7,00102$
                                   1847 ;	src/main.c:415: *apu8SwNum = 0;
      000387 AB*00            [24] 1848 	mov	r3,_state_switches_PARM_2
      000389 AC*01            [24] 1849 	mov	r4,(_state_switches_PARM_2 + 1)
      00038B AD*02            [24] 1850 	mov	r5,(_state_switches_PARM_2 + 2)
      00038D 8B 82            [24] 1851 	mov	dpl,r3
      00038F 8C 83            [24] 1852 	mov	dph,r4
      000391 8D F0            [24] 1853 	mov	b,r5
      000393 E4               [12] 1854 	clr	a
      000394 12r00r00         [24] 1855 	lcall	__gptrput
                                   1856 ;	src/main.c:416: return SW_NONE;
      000397 75 82 04         [24] 1857 	mov	dpl,#0x04
      00039A 22               [24] 1858 	ret
      00039B                       1859 00102$:
                                   1860 ;	src/main.c:424: *apu8SwNum = 0;
      00039B AB*00            [24] 1861 	mov	r3,_state_switches_PARM_2
      00039D AC*01            [24] 1862 	mov	r4,(_state_switches_PARM_2 + 1)
      00039F AD*02            [24] 1863 	mov	r5,(_state_switches_PARM_2 + 2)
      0003A1 8B 82            [24] 1864 	mov	dpl,r3
      0003A3 8C 83            [24] 1865 	mov	dph,r4
      0003A5 8D F0            [24] 1866 	mov	b,r5
      0003A7 E4               [12] 1867 	clr	a
      0003A8 12r00r00         [24] 1868 	lcall	__gptrput
                                   1869 ;	src/main.c:426: for (i=0;i<5;i++) {
      0003AB 7A 00            [12] 1870 	mov	r2,#0x00
      0003AD                       1871 00110$:
                                   1872 ;	src/main.c:427: if (((su8PrevSW>>i)&1) == SW_ON 
      0003AD 90r00r95         [24] 1873 	mov	dptr,#_state_switches_su8PrevSW_65536_76
      0003B0 E0               [24] 1874 	movx	a,@dptr
      0003B1 8A F0            [24] 1875 	mov	b,r2
      0003B3 05 F0            [12] 1876 	inc	b
      0003B5 80 02            [24] 1877 	sjmp	00146$
      0003B7                       1878 00145$:
      0003B7 C3               [12] 1879 	clr	c
      0003B8 13               [12] 1880 	rrc	a
      0003B9                       1881 00146$:
      0003B9 D5 F0 FB         [24] 1882 	djnz	b,00145$
      0003BC F8               [12] 1883 	mov	r0,a
      0003BD 53 00 01         [24] 1884 	anl	ar0,#0x01
      0003C0 79 00            [12] 1885 	mov	r1,#0x00
      0003C2 B8 01 40         [24] 1886 	cjne	r0,#0x01,00104$
      0003C5 B9 00 3D         [24] 1887 	cjne	r1,#0x00,00104$
                                   1888 ;	src/main.c:428: && ((au8SW>>i)&1) == SW_OFF ) {
      0003C8 8A F0            [24] 1889 	mov	b,r2
      0003CA 05 F0            [12] 1890 	inc	b
      0003CC EF               [12] 1891 	mov	a,r7
      0003CD 80 02            [24] 1892 	sjmp	00150$
      0003CF                       1893 00149$:
      0003CF C3               [12] 1894 	clr	c
      0003D0 13               [12] 1895 	rrc	a
      0003D1                       1896 00150$:
      0003D1 D5 F0 FB         [24] 1897 	djnz	b,00149$
      0003D4 20 E0 2E         [24] 1898 	jb	acc.0,00104$
                                   1899 ;	src/main.c:430: su8PrevSW = au8SW;
      0003D7 90r00r95         [24] 1900 	mov	dptr,#_state_switches_su8PrevSW_65536_76
      0003DA EF               [12] 1901 	mov	a,r7
      0003DB F0               [24] 1902 	movx	@dptr,a
                                   1903 ;	src/main.c:431: *apu8SwNum |= 1<<i;
      0003DC 8B 82            [24] 1904 	mov	dpl,r3
      0003DE 8C 83            [24] 1905 	mov	dph,r4
      0003E0 8D F0            [24] 1906 	mov	b,r5
      0003E2 12r00r00         [24] 1907 	lcall	__gptrget
      0003E5 F9               [12] 1908 	mov	r1,a
      0003E6 8A 00            [24] 1909 	mov	ar0,r2
      0003E8 88 F0            [24] 1910 	mov	b,r0
      0003EA 05 F0            [12] 1911 	inc	b
      0003EC 74 01            [12] 1912 	mov	a,#0x01
      0003EE 80 02            [24] 1913 	sjmp	00154$
      0003F0                       1914 00152$:
      0003F0 25 E0            [12] 1915 	add	a,acc
      0003F2                       1916 00154$:
      0003F2 D5 F0 FB         [24] 1917 	djnz	b,00152$
      0003F5 F8               [12] 1918 	mov	r0,a
      0003F6 E9               [12] 1919 	mov	a,r1
      0003F7 42 00            [12] 1920 	orl	ar0,a
      0003F9 8B 82            [24] 1921 	mov	dpl,r3
      0003FB 8C 83            [24] 1922 	mov	dph,r4
      0003FD 8D F0            [24] 1923 	mov	b,r5
      0003FF E8               [12] 1924 	mov	a,r0
      000400 12r00r00         [24] 1925 	lcall	__gptrput
                                   1926 ;	src/main.c:432: u8Result = SW_OFF;
      000403 7E 00            [12] 1927 	mov	r6,#0x00
      000405                       1928 00104$:
                                   1929 ;	src/main.c:435: if (((su8PrevSW>>i)&1) == SW_OFF 
      000405 90r00r95         [24] 1930 	mov	dptr,#_state_switches_su8PrevSW_65536_76
      000408 E0               [24] 1931 	movx	a,@dptr
      000409 8A F0            [24] 1932 	mov	b,r2
      00040B 05 F0            [12] 1933 	inc	b
      00040D 80 02            [24] 1934 	sjmp	00156$
      00040F                       1935 00155$:
      00040F C3               [12] 1936 	clr	c
      000410 13               [12] 1937 	rrc	a
      000411                       1938 00156$:
      000411 D5 F0 FB         [24] 1939 	djnz	b,00155$
      000414 20 E0 46         [24] 1940 	jb	acc.0,00111$
                                   1941 ;	src/main.c:436: && ((au8SW>>i)&1) == SW_ON ) {
      000417 8A F0            [24] 1942 	mov	b,r2
      000419 05 F0            [12] 1943 	inc	b
      00041B EF               [12] 1944 	mov	a,r7
      00041C 80 02            [24] 1945 	sjmp	00159$
      00041E                       1946 00158$:
      00041E C3               [12] 1947 	clr	c
      00041F 13               [12] 1948 	rrc	a
      000420                       1949 00159$:
      000420 D5 F0 FB         [24] 1950 	djnz	b,00158$
      000423 F8               [12] 1951 	mov	r0,a
      000424 53 00 01         [24] 1952 	anl	ar0,#0x01
      000427 79 00            [12] 1953 	mov	r1,#0x00
      000429 B8 01 31         [24] 1954 	cjne	r0,#0x01,00111$
      00042C B9 00 2E         [24] 1955 	cjne	r1,#0x00,00111$
                                   1956 ;	src/main.c:439: su8PrevSW = au8SW;
      00042F 90r00r95         [24] 1957 	mov	dptr,#_state_switches_su8PrevSW_65536_76
      000432 EF               [12] 1958 	mov	a,r7
      000433 F0               [24] 1959 	movx	@dptr,a
                                   1960 ;	src/main.c:440: *apu8SwNum |= 1<<i;
      000434 8B 82            [24] 1961 	mov	dpl,r3
      000436 8C 83            [24] 1962 	mov	dph,r4
      000438 8D F0            [24] 1963 	mov	b,r5
      00043A 12r00r00         [24] 1964 	lcall	__gptrget
      00043D F9               [12] 1965 	mov	r1,a
      00043E 8A 00            [24] 1966 	mov	ar0,r2
      000440 88 F0            [24] 1967 	mov	b,r0
      000442 05 F0            [12] 1968 	inc	b
      000444 74 01            [12] 1969 	mov	a,#0x01
      000446 80 02            [24] 1970 	sjmp	00164$
      000448                       1971 00162$:
      000448 25 E0            [12] 1972 	add	a,acc
      00044A                       1973 00164$:
      00044A D5 F0 FB         [24] 1974 	djnz	b,00162$
      00044D F8               [12] 1975 	mov	r0,a
      00044E E9               [12] 1976 	mov	a,r1
      00044F 42 00            [12] 1977 	orl	ar0,a
      000451 8B 82            [24] 1978 	mov	dpl,r3
      000453 8C 83            [24] 1979 	mov	dph,r4
      000455 8D F0            [24] 1980 	mov	b,r5
      000457 E8               [12] 1981 	mov	a,r0
      000458 12r00r00         [24] 1982 	lcall	__gptrput
                                   1983 ;	src/main.c:441: u8Result = SW_ON;
      00045B 7E 01            [12] 1984 	mov	r6,#0x01
      00045D                       1985 00111$:
                                   1986 ;	src/main.c:426: for (i=0;i<5;i++) {
      00045D 0A               [12] 1987 	inc	r2
      00045E BA 05 00         [24] 1988 	cjne	r2,#0x05,00165$
      000461                       1989 00165$:
      000461 50 03            [24] 1990 	jnc	00166$
      000463 02r03rAD         [24] 1991 	ljmp	00110$
      000466                       1992 00166$:
                                   1993 ;	src/main.c:448: return u8Result;
      000466 8E 82            [24] 1994 	mov	dpl,r6
                                   1995 ;	src/main.c:449: }
      000468 22               [24] 1996 	ret
                                   1997 ;------------------------------------------------------------
                                   1998 ;Allocation info for local variables in function 'printoutbuf'
                                   1999 ;------------------------------------------------------------
                                   2000 ;apcBuf                    Allocated with name '_printoutbuf_PARM_2'
                                   2001 ;aucBufIdx                 Allocated to registers r7 
                                   2002 ;i                         Allocated with name '_printoutbuf_i_65536_83'
                                   2003 ;------------------------------------------------------------
                                   2004 ;	src/main.c:453: void printoutbuf(uint8 aucBufIdx, char * apcBuf)
                                   2005 ;	-----------------------------------------
                                   2006 ;	 function printoutbuf
                                   2007 ;	-----------------------------------------
      000469                       2008 _printoutbuf:
      000469 AF 82            [24] 2009 	mov	r7,dpl
                                   2010 ;	src/main.c:456: for (i=0;i<aucBufIdx;i++) {
      00046B AC*03            [24] 2011 	mov	r4,_printoutbuf_PARM_2
      00046D AD*04            [24] 2012 	mov	r5,(_printoutbuf_PARM_2 + 1)
      00046F AE*05            [24] 2013 	mov	r6,(_printoutbuf_PARM_2 + 2)
      000471 7B 00            [12] 2014 	mov	r3,#0x00
      000473                       2015 00103$:
      000473 C3               [12] 2016 	clr	c
      000474 EB               [12] 2017 	mov	a,r3
      000475 9F               [12] 2018 	subb	a,r7
      000476 50 3F            [24] 2019 	jnc	00101$
                                   2020 ;	src/main.c:457: printf_fast_f("%c", *apcBuf++);
      000478 8C 82            [24] 2021 	mov	dpl,r4
      00047A 8D 83            [24] 2022 	mov	dph,r5
      00047C 8E F0            [24] 2023 	mov	b,r6
      00047E 12r00r00         [24] 2024 	lcall	__gptrget
      000481 FA               [12] 2025 	mov	r2,a
      000482 A3               [24] 2026 	inc	dptr
      000483 AC 82            [24] 2027 	mov	r4,dpl
      000485 AD 83            [24] 2028 	mov	r5,dph
      000487 8A 01            [24] 2029 	mov	ar1,r2
      000489 7A 00            [12] 2030 	mov	r2,#0x00
      00048B C0 07            [24] 2031 	push	ar7
      00048D C0 06            [24] 2032 	push	ar6
      00048F C0 05            [24] 2033 	push	ar5
      000491 C0 04            [24] 2034 	push	ar4
      000493 C0 03            [24] 2035 	push	ar3
      000495 C0 01            [24] 2036 	push	ar1
      000497 C0 02            [24] 2037 	push	ar2
      000499 74r31            [12] 2038 	mov	a,#___str_6
      00049B C0 E0            [24] 2039 	push	acc
      00049D 74s00            [12] 2040 	mov	a,#(___str_6 >> 8)
      00049F C0 E0            [24] 2041 	push	acc
      0004A1 12r00r00         [24] 2042 	lcall	_printf_fast_f
      0004A4 E5 81            [12] 2043 	mov	a,sp
      0004A6 24 FC            [12] 2044 	add	a,#0xfc
      0004A8 F5 81            [12] 2045 	mov	sp,a
      0004AA D0 03            [24] 2046 	pop	ar3
      0004AC D0 04            [24] 2047 	pop	ar4
      0004AE D0 05            [24] 2048 	pop	ar5
      0004B0 D0 06            [24] 2049 	pop	ar6
      0004B2 D0 07            [24] 2050 	pop	ar7
                                   2051 ;	src/main.c:456: for (i=0;i<aucBufIdx;i++) {
      0004B4 0B               [12] 2052 	inc	r3
      0004B5 80 BC            [24] 2053 	sjmp	00103$
      0004B7                       2054 00101$:
                                   2055 ;	src/main.c:459: printf_fast_f("\r\n");
      0004B7 74r2E            [12] 2056 	mov	a,#___str_5
      0004B9 C0 E0            [24] 2057 	push	acc
      0004BB 74s00            [12] 2058 	mov	a,#(___str_5 >> 8)
      0004BD C0 E0            [24] 2059 	push	acc
      0004BF 12r00r00         [24] 2060 	lcall	_printf_fast_f
      0004C2 15 81            [12] 2061 	dec	sp
      0004C4 15 81            [12] 2062 	dec	sp
                                   2063 ;	src/main.c:460: }
      0004C6 22               [24] 2064 	ret
                                   2065 ;------------------------------------------------------------
                                   2066 ;Allocation info for local variables in function 'print_help'
                                   2067 ;------------------------------------------------------------
                                   2068 ;	src/main.c:463: void print_help()
                                   2069 ;	-----------------------------------------
                                   2070 ;	 function print_help
                                   2071 ;	-----------------------------------------
      0004C7                       2072 _print_help:
                                   2073 ;	src/main.c:465: printf_fast_f("t: timer\r\n");
      0004C7 74rD2            [12] 2074 	mov	a,#___str_23
      0004C9 C0 E0            [24] 2075 	push	acc
      0004CB 74s01            [12] 2076 	mov	a,#(___str_23 >> 8)
      0004CD C0 E0            [24] 2077 	push	acc
      0004CF 12r00r00         [24] 2078 	lcall	_printf_fast_f
      0004D2 15 81            [12] 2079 	dec	sp
      0004D4 15 81            [12] 2080 	dec	sp
                                   2081 ;	src/main.c:466: printf_fast_f("0: LineFi EN0,1,2 off\r\n");
      0004D6 74rDD            [12] 2082 	mov	a,#___str_24
      0004D8 C0 E0            [24] 2083 	push	acc
      0004DA 74s01            [12] 2084 	mov	a,#(___str_24 >> 8)
      0004DC C0 E0            [24] 2085 	push	acc
      0004DE 12r00r00         [24] 2086 	lcall	_printf_fast_f
      0004E1 15 81            [12] 2087 	dec	sp
      0004E3 15 81            [12] 2088 	dec	sp
                                   2089 ;	src/main.c:467: printf_fast_f("1: LineFi EN0 = 1\r\n");
      0004E5 74rF5            [12] 2090 	mov	a,#___str_25
      0004E7 C0 E0            [24] 2091 	push	acc
      0004E9 74s01            [12] 2092 	mov	a,#(___str_25 >> 8)
      0004EB C0 E0            [24] 2093 	push	acc
      0004ED 12r00r00         [24] 2094 	lcall	_printf_fast_f
      0004F0 15 81            [12] 2095 	dec	sp
      0004F2 15 81            [12] 2096 	dec	sp
                                   2097 ;	src/main.c:468: printf_fast_f("2:\r\n");
      0004F4 74r09            [12] 2098 	mov	a,#___str_26
      0004F6 C0 E0            [24] 2099 	push	acc
      0004F8 74s02            [12] 2100 	mov	a,#(___str_26 >> 8)
      0004FA C0 E0            [24] 2101 	push	acc
      0004FC 12r00r00         [24] 2102 	lcall	_printf_fast_f
      0004FF 15 81            [12] 2103 	dec	sp
      000501 15 81            [12] 2104 	dec	sp
                                   2105 ;	src/main.c:469: printf_fast_f("3:\r\n");
      000503 74r0E            [12] 2106 	mov	a,#___str_27
      000505 C0 E0            [24] 2107 	push	acc
      000507 74s02            [12] 2108 	mov	a,#(___str_27 >> 8)
      000509 C0 E0            [24] 2109 	push	acc
      00050B 12r00r00         [24] 2110 	lcall	_printf_fast_f
      00050E 15 81            [12] 2111 	dec	sp
      000510 15 81            [12] 2112 	dec	sp
                                   2113 ;	src/main.c:470: printf_fast_f("4:\r\n");
      000512 74r13            [12] 2114 	mov	a,#___str_28
      000514 C0 E0            [24] 2115 	push	acc
      000516 74s02            [12] 2116 	mov	a,#(___str_28 >> 8)
      000518 C0 E0            [24] 2117 	push	acc
      00051A 12r00r00         [24] 2118 	lcall	_printf_fast_f
      00051D 15 81            [12] 2119 	dec	sp
      00051F 15 81            [12] 2120 	dec	sp
                                   2121 ;	src/main.c:471: printf_fast_f("5:\r\n");
      000521 74r18            [12] 2122 	mov	a,#___str_29
      000523 C0 E0            [24] 2123 	push	acc
      000525 74s02            [12] 2124 	mov	a,#(___str_29 >> 8)
      000527 C0 E0            [24] 2125 	push	acc
      000529 12r00r00         [24] 2126 	lcall	_printf_fast_f
      00052C 15 81            [12] 2127 	dec	sp
      00052E 15 81            [12] 2128 	dec	sp
                                   2129 ;	src/main.c:472: printf_fast_f("6:\r\n");
      000530 74r1D            [12] 2130 	mov	a,#___str_30
      000532 C0 E0            [24] 2131 	push	acc
      000534 74s02            [12] 2132 	mov	a,#(___str_30 >> 8)
      000536 C0 E0            [24] 2133 	push	acc
      000538 12r00r00         [24] 2134 	lcall	_printf_fast_f
      00053B 15 81            [12] 2135 	dec	sp
      00053D 15 81            [12] 2136 	dec	sp
                                   2137 ;	src/main.c:473: printf_fast_f("7:\r\n");
      00053F 74r22            [12] 2138 	mov	a,#___str_31
      000541 C0 E0            [24] 2139 	push	acc
      000543 74s02            [12] 2140 	mov	a,#(___str_31 >> 8)
      000545 C0 E0            [24] 2141 	push	acc
      000547 12r00r00         [24] 2142 	lcall	_printf_fast_f
      00054A 15 81            [12] 2143 	dec	sp
      00054C 15 81            [12] 2144 	dec	sp
                                   2145 ;	src/main.c:474: printf_fast_f("h: Addr--\r\n");
      00054E 74r27            [12] 2146 	mov	a,#___str_32
      000550 C0 E0            [24] 2147 	push	acc
      000552 74s02            [12] 2148 	mov	a,#(___str_32 >> 8)
      000554 C0 E0            [24] 2149 	push	acc
      000556 12r00r00         [24] 2150 	lcall	_printf_fast_f
      000559 15 81            [12] 2151 	dec	sp
      00055B 15 81            [12] 2152 	dec	sp
                                   2153 ;	src/main.c:475: printf_fast_f("j: Cmd--\r\n");
      00055D 74r33            [12] 2154 	mov	a,#___str_33
      00055F C0 E0            [24] 2155 	push	acc
      000561 74s02            [12] 2156 	mov	a,#(___str_33 >> 8)
      000563 C0 E0            [24] 2157 	push	acc
      000565 12r00r00         [24] 2158 	lcall	_printf_fast_f
      000568 15 81            [12] 2159 	dec	sp
      00056A 15 81            [12] 2160 	dec	sp
                                   2161 ;	src/main.c:476: printf_fast_f("k: Cmd++\r\n");
      00056C 74r3E            [12] 2162 	mov	a,#___str_34
      00056E C0 E0            [24] 2163 	push	acc
      000570 74s02            [12] 2164 	mov	a,#(___str_34 >> 8)
      000572 C0 E0            [24] 2165 	push	acc
      000574 12r00r00         [24] 2166 	lcall	_printf_fast_f
      000577 15 81            [12] 2167 	dec	sp
      000579 15 81            [12] 2168 	dec	sp
                                   2169 ;	src/main.c:477: printf_fast_f("l: Addr++\r\n");
      00057B 74r49            [12] 2170 	mov	a,#___str_35
      00057D C0 E0            [24] 2171 	push	acc
      00057F 74s02            [12] 2172 	mov	a,#(___str_35 >> 8)
      000581 C0 E0            [24] 2173 	push	acc
      000583 12r00r00         [24] 2174 	lcall	_printf_fast_f
      000586 15 81            [12] 2175 	dec	sp
      000588 15 81            [12] 2176 	dec	sp
                                   2177 ;	src/main.c:478: printf_fast_f("s: sending\r\n");
      00058A 74r55            [12] 2178 	mov	a,#___str_36
      00058C C0 E0            [24] 2179 	push	acc
      00058E 74s02            [12] 2180 	mov	a,#(___str_36 >> 8)
      000590 C0 E0            [24] 2181 	push	acc
      000592 12r00r00         [24] 2182 	lcall	_printf_fast_f
      000595 15 81            [12] 2183 	dec	sp
      000597 15 81            [12] 2184 	dec	sp
                                   2185 ;	src/main.c:479: }
      000599 22               [24] 2186 	ret
                                   2187 ;------------------------------------------------------------
                                   2188 ;Allocation info for local variables in function 'act_by_one_key'
                                   2189 ;------------------------------------------------------------
                                   2190 ;apu8LineFiCmd             Allocated with name '_act_by_one_key_PARM_2'
                                   2191 ;apu8LineFiAddr            Allocated with name '_act_by_one_key_PARM_3'
                                   2192 ;au8RxUART                 Allocated to registers r7 
                                   2193 ;sloc0                     Allocated with name '_act_by_one_key_sloc0_1_0'
                                   2194 ;u8Data                    Allocated with name '_act_by_one_key_u8Data_65536_88'
                                   2195 ;------------------------------------------------------------
                                   2196 ;	src/main.c:481: void act_by_one_key(uint8 au8RxUART, uint8 * apu8LineFiCmd, uint8 * apu8LineFiAddr)
                                   2197 ;	-----------------------------------------
                                   2198 ;	 function act_by_one_key
                                   2199 ;	-----------------------------------------
      00059A                       2200 _act_by_one_key:
      00059A AF 82            [24] 2201 	mov	r7,dpl
                                   2202 ;	src/main.c:484: switch(au8RxUART) {
      00059C BF 2B 03         [24] 2203 	cjne	r7,#0x2b,00256$
      00059F 02r0Br47         [24] 2204 	ljmp	00129$
      0005A2                       2205 00256$:
      0005A2 BF 2D 03         [24] 2206 	cjne	r7,#0x2d,00257$
      0005A5 02r0Br6C         [24] 2207 	ljmp	00130$
      0005A8                       2208 00257$:
      0005A8 BF 30 03         [24] 2209 	cjne	r7,#0x30,00258$
      0005AB 02r06r4F         [24] 2210 	ljmp	00102$
      0005AE                       2211 00258$:
      0005AE BF 31 03         [24] 2212 	cjne	r7,#0x31,00259$
      0005B1 02r06r68         [24] 2213 	ljmp	00103$
      0005B4                       2214 00259$:
      0005B4 BF 32 03         [24] 2215 	cjne	r7,#0x32,00260$
      0005B7 02r06r7D         [24] 2216 	ljmp	00104$
      0005BA                       2217 00260$:
      0005BA BF 33 03         [24] 2218 	cjne	r7,#0x33,00261$
      0005BD 02r06r92         [24] 2219 	ljmp	00105$
      0005C0                       2220 00261$:
      0005C0 BF 34 03         [24] 2221 	cjne	r7,#0x34,00262$
      0005C3 02r06rA7         [24] 2222 	ljmp	00106$
      0005C6                       2223 00262$:
      0005C6 BF 35 03         [24] 2224 	cjne	r7,#0x35,00263$
      0005C9 02r06rC9         [24] 2225 	ljmp	00107$
      0005CC                       2226 00263$:
      0005CC BF 36 03         [24] 2227 	cjne	r7,#0x36,00264$
      0005CF 02r06rFF         [24] 2228 	ljmp	00110$
      0005D2                       2229 00264$:
      0005D2 BF 37 03         [24] 2230 	cjne	r7,#0x37,00265$
      0005D5 02r07r2D         [24] 2231 	ljmp	00111$
      0005D8                       2232 00265$:
      0005D8 BF 48 03         [24] 2233 	cjne	r7,#0x48,00266$
      0005DB 02r04rC7         [24] 2234 	ljmp	_print_help
      0005DE                       2235 00266$:
      0005DE BF 52 03         [24] 2236 	cjne	r7,#0x52,00267$
      0005E1 02r0BrA2         [24] 2237 	ljmp	00135$
      0005E4                       2238 00267$:
      0005E4 BF 53 03         [24] 2239 	cjne	r7,#0x53,00268$
      0005E7 02r0Br1D         [24] 2240 	ljmp	00128$
      0005EA                       2241 00268$:
      0005EA BF 61 03         [24] 2242 	cjne	r7,#0x61,00269$
      0005ED 02r0Br90         [24] 2243 	ljmp	00131$
      0005F0                       2244 00269$:
      0005F0 BF 62 03         [24] 2245 	cjne	r7,#0x62,00270$
      0005F3 02r0Br96         [24] 2246 	ljmp	00132$
      0005F6                       2247 00270$:
      0005F6 BF 63 03         [24] 2248 	cjne	r7,#0x63,00271$
      0005F9 02r0Br9C         [24] 2249 	ljmp	00133$
      0005FC                       2250 00271$:
      0005FC BF 68 03         [24] 2251 	cjne	r7,#0x68,00272$
      0005FF 02r07r5B         [24] 2252 	ljmp	00112$
      000602                       2253 00272$:
      000602 BF 6A 03         [24] 2254 	cjne	r7,#0x6a,00273$
      000605 02r07rE7         [24] 2255 	ljmp	00116$
      000608                       2256 00273$:
      000608 BF 6B 03         [24] 2257 	cjne	r7,#0x6b,00274$
      00060B 02r08r1A         [24] 2258 	ljmp	00117$
      00060E                       2259 00274$:
      00060E BF 6C 03         [24] 2260 	cjne	r7,#0x6c,00275$
      000611 02r08r4D         [24] 2261 	ljmp	00118$
      000614                       2262 00275$:
      000614 BF 72 03         [24] 2263 	cjne	r7,#0x72,00276$
      000617 02r0BrEB         [24] 2264 	ljmp	00136$
      00061A                       2265 00276$:
      00061A BF 73 03         [24] 2266 	cjne	r7,#0x73,00277$
      00061D 02r08rD9         [24] 2267 	ljmp	00122$
      000620                       2268 00277$:
      000620 BF 74 02         [24] 2269 	cjne	r7,#0x74,00278$
      000623 80 07            [24] 2270 	sjmp	00101$
      000625                       2271 00278$:
      000625 BF 75 03         [24] 2272 	cjne	r7,#0x75,00279$
      000628 02r0ArA6         [24] 2273 	ljmp	00127$
      00062B                       2274 00279$:
      00062B 22               [24] 2275 	ret
                                   2276 ;	src/main.c:485: case 't' : // 1msec 카운터 확인, 5초에 40,000
      00062C                       2277 00101$:
                                   2278 ;	src/main.c:486: printf_fast_f("%u\n\r", gu16TimeCnt);
      00062C 90r00r57         [24] 2279 	mov	dptr,#_gu16TimeCnt
      00062F E0               [24] 2280 	movx	a,@dptr
      000630 C0 E0            [24] 2281 	push	acc
      000632 A3               [24] 2282 	inc	dptr
      000633 E0               [24] 2283 	movx	a,@dptr
      000634 C0 E0            [24] 2284 	push	acc
      000636 74r62            [12] 2285 	mov	a,#___str_37
      000638 C0 E0            [24] 2286 	push	acc
      00063A 74s02            [12] 2287 	mov	a,#(___str_37 >> 8)
      00063C C0 E0            [24] 2288 	push	acc
      00063E 12r00r00         [24] 2289 	lcall	_printf_fast_f
      000641 E5 81            [12] 2290 	mov	a,sp
      000643 24 FC            [12] 2291 	add	a,#0xfc
      000645 F5 81            [12] 2292 	mov	sp,a
                                   2293 ;	src/main.c:487: gu16TimeCnt = 0;
      000647 90r00r57         [24] 2294 	mov	dptr,#_gu16TimeCnt
      00064A E4               [12] 2295 	clr	a
      00064B F0               [24] 2296 	movx	@dptr,a
      00064C A3               [24] 2297 	inc	dptr
      00064D F0               [24] 2298 	movx	@dptr,a
                                   2299 ;	src/main.c:488: break;
      00064E 22               [24] 2300 	ret
                                   2301 ;	src/main.c:489: case '0' :
      00064F                       2302 00102$:
                                   2303 ;	src/main.c:490: gu8UART = 0;
      00064F 75*00 00         [24] 2304 	mov	_gu8UART,#0x00
                                   2305 ;	src/main.c:491: LINEFI_EN0 = 0;
                                   2306 ;	assignBit
      000652 C2 90            [12] 2307 	clr	_P10
                                   2308 ;	src/main.c:492: LINEFI_EN1 = 0;
                                   2309 ;	assignBit
      000654 C2 91            [12] 2310 	clr	_P11
                                   2311 ;	src/main.c:493: LINEFI_EN2 = 0;
                                   2312 ;	assignBit
      000656 C2 92            [12] 2313 	clr	_P12
                                   2314 ;	src/main.c:494: printf_fast_f("LINEFI_EN0=0\n\r");
      000658 74r67            [12] 2315 	mov	a,#___str_38
      00065A C0 E0            [24] 2316 	push	acc
      00065C 74s02            [12] 2317 	mov	a,#(___str_38 >> 8)
      00065E C0 E0            [24] 2318 	push	acc
      000660 12r00r00         [24] 2319 	lcall	_printf_fast_f
      000663 15 81            [12] 2320 	dec	sp
      000665 15 81            [12] 2321 	dec	sp
                                   2322 ;	src/main.c:495: break;
      000667 22               [24] 2323 	ret
                                   2324 ;	src/main.c:496: case '1' :
      000668                       2325 00103$:
                                   2326 ;	src/main.c:497: gu8UART = 0;
      000668 75*00 00         [24] 2327 	mov	_gu8UART,#0x00
                                   2328 ;	src/main.c:498: LINEFI_EN0 = 1;
                                   2329 ;	assignBit
      00066B D2 90            [12] 2330 	setb	_P10
                                   2331 ;	src/main.c:499: printf_fast_f("LINEFI_EN0=1\n\r");
      00066D 74r76            [12] 2332 	mov	a,#___str_39
      00066F C0 E0            [24] 2333 	push	acc
      000671 74s02            [12] 2334 	mov	a,#(___str_39 >> 8)
      000673 C0 E0            [24] 2335 	push	acc
      000675 12r00r00         [24] 2336 	lcall	_printf_fast_f
      000678 15 81            [12] 2337 	dec	sp
      00067A 15 81            [12] 2338 	dec	sp
                                   2339 ;	src/main.c:500: break;
      00067C 22               [24] 2340 	ret
                                   2341 ;	src/main.c:501: case '2' :
      00067D                       2342 00104$:
                                   2343 ;	src/main.c:502: gu8UART = 0;
      00067D 75*00 00         [24] 2344 	mov	_gu8UART,#0x00
                                   2345 ;	src/main.c:503: LINEFI_TX = 0;
                                   2346 ;	assignBit
      000680 C2 96            [12] 2347 	clr	_P16
                                   2348 ;	src/main.c:504: printf_fast_f("LINEFI_TX=0\n\r");
      000682 74r85            [12] 2349 	mov	a,#___str_40
      000684 C0 E0            [24] 2350 	push	acc
      000686 74s02            [12] 2351 	mov	a,#(___str_40 >> 8)
      000688 C0 E0            [24] 2352 	push	acc
      00068A 12r00r00         [24] 2353 	lcall	_printf_fast_f
      00068D 15 81            [12] 2354 	dec	sp
      00068F 15 81            [12] 2355 	dec	sp
                                   2356 ;	src/main.c:505: break;
      000691 22               [24] 2357 	ret
                                   2358 ;	src/main.c:506: case '3' :
      000692                       2359 00105$:
                                   2360 ;	src/main.c:507: gu8UART = 0;
      000692 75*00 00         [24] 2361 	mov	_gu8UART,#0x00
                                   2362 ;	src/main.c:508: LINEFI_TX = 1;
                                   2363 ;	assignBit
      000695 D2 96            [12] 2364 	setb	_P16
                                   2365 ;	src/main.c:509: printf_fast_f("LINEFI_TX=1\n\r");
      000697 74r93            [12] 2366 	mov	a,#___str_41
      000699 C0 E0            [24] 2367 	push	acc
      00069B 74s02            [12] 2368 	mov	a,#(___str_41 >> 8)
      00069D C0 E0            [24] 2369 	push	acc
      00069F 12r00r00         [24] 2370 	lcall	_printf_fast_f
      0006A2 15 81            [12] 2371 	dec	sp
      0006A4 15 81            [12] 2372 	dec	sp
                                   2373 ;	src/main.c:510: break;
      0006A6 22               [24] 2374 	ret
                                   2375 ;	src/main.c:511: case '4' :
      0006A7                       2376 00106$:
                                   2377 ;	src/main.c:512: gu8UART = 0;
      0006A7 75*00 00         [24] 2378 	mov	_gu8UART,#0x00
                                   2379 ;	src/main.c:513: TOGGLE(LINEFI_TX);
      0006AA B2 96            [12] 2380 	cpl	_P16
                                   2381 ;	src/main.c:514: printf_fast_f("LINEFI_TX=%d\n\r", LINEFI_TX);
      0006AC A2 96            [12] 2382 	mov	c,_P16
      0006AE E4               [12] 2383 	clr	a
      0006AF 33               [12] 2384 	rlc	a
      0006B0 FE               [12] 2385 	mov	r6,a
      0006B1 7F 00            [12] 2386 	mov	r7,#0x00
      0006B3 C0 06            [24] 2387 	push	ar6
      0006B5 C0 07            [24] 2388 	push	ar7
      0006B7 74rA1            [12] 2389 	mov	a,#___str_42
      0006B9 C0 E0            [24] 2390 	push	acc
      0006BB 74s02            [12] 2391 	mov	a,#(___str_42 >> 8)
      0006BD C0 E0            [24] 2392 	push	acc
      0006BF 12r00r00         [24] 2393 	lcall	_printf_fast_f
      0006C2 E5 81            [12] 2394 	mov	a,sp
      0006C4 24 FC            [12] 2395 	add	a,#0xfc
      0006C6 F5 81            [12] 2396 	mov	sp,a
                                   2397 ;	src/main.c:515: break;
      0006C8 22               [24] 2398 	ret
                                   2399 ;	src/main.c:516: case '5' :
      0006C9                       2400 00107$:
                                   2401 ;	src/main.c:517: gu8UART = 0;
      0006C9 75*00 00         [24] 2402 	mov	_gu8UART,#0x00
                                   2403 ;	src/main.c:518: if (LINEFI_EN0 == 0) {
      0006CC 20 90 02         [24] 2404 	jb	_P10,00109$
                                   2405 ;	src/main.c:519: LINEFI_TX = 1;
                                   2406 ;	assignBit
      0006CF D2 96            [12] 2407 	setb	_P16
      0006D1                       2408 00109$:
                                   2409 ;	src/main.c:521: TOGGLE(LINEFI_EN0);
      0006D1 B2 90            [12] 2410 	cpl	_P10
                                   2411 ;	src/main.c:522: printf_fast_f("LINEFI_EN0=");
      0006D3 74rB0            [12] 2412 	mov	a,#___str_43
      0006D5 C0 E0            [24] 2413 	push	acc
      0006D7 74s02            [12] 2414 	mov	a,#(___str_43 >> 8)
      0006D9 C0 E0            [24] 2415 	push	acc
      0006DB 12r00r00         [24] 2416 	lcall	_printf_fast_f
      0006DE 15 81            [12] 2417 	dec	sp
      0006E0 15 81            [12] 2418 	dec	sp
                                   2419 ;	src/main.c:523: printf_fast_f("%d\n\r", LINEFI_EN0);
      0006E2 A2 90            [12] 2420 	mov	c,_P10
      0006E4 E4               [12] 2421 	clr	a
      0006E5 33               [12] 2422 	rlc	a
      0006E6 FE               [12] 2423 	mov	r6,a
      0006E7 7F 00            [12] 2424 	mov	r7,#0x00
      0006E9 C0 06            [24] 2425 	push	ar6
      0006EB C0 07            [24] 2426 	push	ar7
      0006ED 74rBC            [12] 2427 	mov	a,#___str_44
      0006EF C0 E0            [24] 2428 	push	acc
      0006F1 74s02            [12] 2429 	mov	a,#(___str_44 >> 8)
      0006F3 C0 E0            [24] 2430 	push	acc
      0006F5 12r00r00         [24] 2431 	lcall	_printf_fast_f
      0006F8 E5 81            [12] 2432 	mov	a,sp
      0006FA 24 FC            [12] 2433 	add	a,#0xfc
      0006FC F5 81            [12] 2434 	mov	sp,a
                                   2435 ;	src/main.c:524: break;
      0006FE 22               [24] 2436 	ret
                                   2437 ;	src/main.c:525: case '6' :
      0006FF                       2438 00110$:
                                   2439 ;	src/main.c:526: TOGGLE(LINEFI_EN1);
      0006FF B2 91            [12] 2440 	cpl	_P11
                                   2441 ;	src/main.c:527: printf_fast_f("LINEFI_EN1=");
      000701 74rC1            [12] 2442 	mov	a,#___str_45
      000703 C0 E0            [24] 2443 	push	acc
      000705 74s02            [12] 2444 	mov	a,#(___str_45 >> 8)
      000707 C0 E0            [24] 2445 	push	acc
      000709 12r00r00         [24] 2446 	lcall	_printf_fast_f
      00070C 15 81            [12] 2447 	dec	sp
      00070E 15 81            [12] 2448 	dec	sp
                                   2449 ;	src/main.c:528: printf_fast_f("%d\n\r", LINEFI_EN1);
      000710 A2 91            [12] 2450 	mov	c,_P11
      000712 E4               [12] 2451 	clr	a
      000713 33               [12] 2452 	rlc	a
      000714 FE               [12] 2453 	mov	r6,a
      000715 7F 00            [12] 2454 	mov	r7,#0x00
      000717 C0 06            [24] 2455 	push	ar6
      000719 C0 07            [24] 2456 	push	ar7
      00071B 74rBC            [12] 2457 	mov	a,#___str_44
      00071D C0 E0            [24] 2458 	push	acc
      00071F 74s02            [12] 2459 	mov	a,#(___str_44 >> 8)
      000721 C0 E0            [24] 2460 	push	acc
      000723 12r00r00         [24] 2461 	lcall	_printf_fast_f
      000726 E5 81            [12] 2462 	mov	a,sp
      000728 24 FC            [12] 2463 	add	a,#0xfc
      00072A F5 81            [12] 2464 	mov	sp,a
                                   2465 ;	src/main.c:529: break;
      00072C 22               [24] 2466 	ret
                                   2467 ;	src/main.c:530: case '7' :
      00072D                       2468 00111$:
                                   2469 ;	src/main.c:531: TOGGLE(LINEFI_EN2);
      00072D B2 92            [12] 2470 	cpl	_P12
                                   2471 ;	src/main.c:532: printf_fast_f("LINEFI_EN2=");
      00072F 74rCD            [12] 2472 	mov	a,#___str_46
      000731 C0 E0            [24] 2473 	push	acc
      000733 74s02            [12] 2474 	mov	a,#(___str_46 >> 8)
      000735 C0 E0            [24] 2475 	push	acc
      000737 12r00r00         [24] 2476 	lcall	_printf_fast_f
      00073A 15 81            [12] 2477 	dec	sp
      00073C 15 81            [12] 2478 	dec	sp
                                   2479 ;	src/main.c:533: printf_fast_f("%d\n\r", LINEFI_EN2);
      00073E A2 92            [12] 2480 	mov	c,_P12
      000740 E4               [12] 2481 	clr	a
      000741 33               [12] 2482 	rlc	a
      000742 FE               [12] 2483 	mov	r6,a
      000743 7F 00            [12] 2484 	mov	r7,#0x00
      000745 C0 06            [24] 2485 	push	ar6
      000747 C0 07            [24] 2486 	push	ar7
      000749 74rBC            [12] 2487 	mov	a,#___str_44
      00074B C0 E0            [24] 2488 	push	acc
      00074D 74s02            [12] 2489 	mov	a,#(___str_44 >> 8)
      00074F C0 E0            [24] 2490 	push	acc
      000751 12r00r00         [24] 2491 	lcall	_printf_fast_f
      000754 E5 81            [12] 2492 	mov	a,sp
      000756 24 FC            [12] 2493 	add	a,#0xfc
      000758 F5 81            [12] 2494 	mov	sp,a
                                   2495 ;	src/main.c:534: break;
      00075A 22               [24] 2496 	ret
                                   2497 ;	src/main.c:538: case 'h' : // <<
      00075B                       2498 00112$:
                                   2499 ;	src/main.c:539: (*apu8LineFiAddr)--;
      00075B AD*09            [24] 2500 	mov	r5,_act_by_one_key_PARM_3
      00075D AE*0A            [24] 2501 	mov	r6,(_act_by_one_key_PARM_3 + 1)
      00075F AF*0B            [24] 2502 	mov	r7,(_act_by_one_key_PARM_3 + 2)
      000761 8D 82            [24] 2503 	mov	dpl,r5
      000763 8E 83            [24] 2504 	mov	dph,r6
      000765 8F F0            [24] 2505 	mov	b,r7
      000767 12r00r00         [24] 2506 	lcall	__gptrget
      00076A FC               [12] 2507 	mov	r4,a
      00076B 1C               [12] 2508 	dec	r4
      00076C 8D 82            [24] 2509 	mov	dpl,r5
      00076E 8E 83            [24] 2510 	mov	dph,r6
      000770 8F F0            [24] 2511 	mov	b,r7
      000772 EC               [12] 2512 	mov	a,r4
      000773 12r00r00         [24] 2513 	lcall	__gptrput
                                   2514 ;	src/main.c:540: if (*apu8LineFiCmd == 1) {
      000776 AA*06            [24] 2515 	mov	r2,_act_by_one_key_PARM_2
      000778 AB*07            [24] 2516 	mov	r3,(_act_by_one_key_PARM_2 + 1)
      00077A AC*08            [24] 2517 	mov	r4,(_act_by_one_key_PARM_2 + 2)
      00077C 8A 82            [24] 2518 	mov	dpl,r2
      00077E 8B 83            [24] 2519 	mov	dph,r3
      000780 8C F0            [24] 2520 	mov	b,r4
      000782 12r00r00         [24] 2521 	lcall	__gptrget
      000785 FA               [12] 2522 	mov	r2,a
      000786 BA 01 3C         [24] 2523 	cjne	r2,#0x01,00114$
                                   2524 ;	src/main.c:541: printf_fast_f("uart speed: %lu:\n\r", gpu32UartSpeed[*apu8LineFiAddr]);
      000789 8D 82            [24] 2525 	mov	dpl,r5
      00078B 8E 83            [24] 2526 	mov	dph,r6
      00078D 8F F0            [24] 2527 	mov	b,r7
      00078F 12r00r00         [24] 2528 	lcall	__gptrget
      000792 75 F0 04         [24] 2529 	mov	b,#0x04
      000795 A4               [48] 2530 	mul	ab
      000796 24r5D            [12] 2531 	add	a,#_gpu32UartSpeed
      000798 F5 82            [12] 2532 	mov	dpl,a
      00079A 74s00            [12] 2533 	mov	a,#(_gpu32UartSpeed >> 8)
      00079C 35 F0            [12] 2534 	addc	a,b
      00079E F5 83            [12] 2535 	mov	dph,a
      0007A0 E0               [24] 2536 	movx	a,@dptr
      0007A1 F9               [12] 2537 	mov	r1,a
      0007A2 A3               [24] 2538 	inc	dptr
      0007A3 E0               [24] 2539 	movx	a,@dptr
      0007A4 FA               [12] 2540 	mov	r2,a
      0007A5 A3               [24] 2541 	inc	dptr
      0007A6 E0               [24] 2542 	movx	a,@dptr
      0007A7 FB               [12] 2543 	mov	r3,a
      0007A8 A3               [24] 2544 	inc	dptr
      0007A9 E0               [24] 2545 	movx	a,@dptr
      0007AA FC               [12] 2546 	mov	r4,a
      0007AB C0 01            [24] 2547 	push	ar1
      0007AD C0 02            [24] 2548 	push	ar2
      0007AF C0 03            [24] 2549 	push	ar3
      0007B1 C0 04            [24] 2550 	push	ar4
      0007B3 74rD9            [12] 2551 	mov	a,#___str_47
      0007B5 C0 E0            [24] 2552 	push	acc
      0007B7 74s02            [12] 2553 	mov	a,#(___str_47 >> 8)
      0007B9 C0 E0            [24] 2554 	push	acc
      0007BB 12r00r00         [24] 2555 	lcall	_printf_fast_f
      0007BE E5 81            [12] 2556 	mov	a,sp
      0007C0 24 FA            [12] 2557 	add	a,#0xfa
      0007C2 F5 81            [12] 2558 	mov	sp,a
      0007C4 22               [24] 2559 	ret
      0007C5                       2560 00114$:
                                   2561 ;	src/main.c:544: printf_fast_f("address: %d\n\r", *apu8LineFiAddr);
      0007C5 8D 82            [24] 2562 	mov	dpl,r5
      0007C7 8E 83            [24] 2563 	mov	dph,r6
      0007C9 8F F0            [24] 2564 	mov	b,r7
      0007CB 12r00r00         [24] 2565 	lcall	__gptrget
      0007CE FD               [12] 2566 	mov	r5,a
      0007CF 7F 00            [12] 2567 	mov	r7,#0x00
      0007D1 C0 05            [24] 2568 	push	ar5
      0007D3 C0 07            [24] 2569 	push	ar7
      0007D5 74rEC            [12] 2570 	mov	a,#___str_48
      0007D7 C0 E0            [24] 2571 	push	acc
      0007D9 74s02            [12] 2572 	mov	a,#(___str_48 >> 8)
      0007DB C0 E0            [24] 2573 	push	acc
      0007DD 12r00r00         [24] 2574 	lcall	_printf_fast_f
      0007E0 E5 81            [12] 2575 	mov	a,sp
      0007E2 24 FC            [12] 2576 	add	a,#0xfc
      0007E4 F5 81            [12] 2577 	mov	sp,a
                                   2578 ;	src/main.c:546: break;
      0007E6 22               [24] 2579 	ret
                                   2580 ;	src/main.c:547: case 'j' : //  down
      0007E7                       2581 00116$:
                                   2582 ;	src/main.c:548: (*apu8LineFiCmd)--;
      0007E7 AD*06            [24] 2583 	mov	r5,_act_by_one_key_PARM_2
      0007E9 AE*07            [24] 2584 	mov	r6,(_act_by_one_key_PARM_2 + 1)
      0007EB AF*08            [24] 2585 	mov	r7,(_act_by_one_key_PARM_2 + 2)
      0007ED 8D 82            [24] 2586 	mov	dpl,r5
      0007EF 8E 83            [24] 2587 	mov	dph,r6
      0007F1 8F F0            [24] 2588 	mov	b,r7
      0007F3 12r00r00         [24] 2589 	lcall	__gptrget
      0007F6 FC               [12] 2590 	mov	r4,a
      0007F7 1C               [12] 2591 	dec	r4
      0007F8 8D 82            [24] 2592 	mov	dpl,r5
      0007FA 8E 83            [24] 2593 	mov	dph,r6
      0007FC 8F F0            [24] 2594 	mov	b,r7
      0007FE EC               [12] 2595 	mov	a,r4
      0007FF 12r00r00         [24] 2596 	lcall	__gptrput
                                   2597 ;	src/main.c:549: printf_fast_f("command: %d\n\r", *apu8LineFiCmd);
      000802 7F 00            [12] 2598 	mov	r7,#0x00
      000804 C0 04            [24] 2599 	push	ar4
      000806 C0 07            [24] 2600 	push	ar7
      000808 74rFA            [12] 2601 	mov	a,#___str_49
      00080A C0 E0            [24] 2602 	push	acc
      00080C 74s02            [12] 2603 	mov	a,#(___str_49 >> 8)
      00080E C0 E0            [24] 2604 	push	acc
      000810 12r00r00         [24] 2605 	lcall	_printf_fast_f
      000813 E5 81            [12] 2606 	mov	a,sp
      000815 24 FC            [12] 2607 	add	a,#0xfc
      000817 F5 81            [12] 2608 	mov	sp,a
                                   2609 ;	src/main.c:550: break;
      000819 22               [24] 2610 	ret
                                   2611 ;	src/main.c:551: case 'k' : // up
      00081A                       2612 00117$:
                                   2613 ;	src/main.c:552: (*apu8LineFiCmd)++;
      00081A AD*06            [24] 2614 	mov	r5,_act_by_one_key_PARM_2
      00081C AE*07            [24] 2615 	mov	r6,(_act_by_one_key_PARM_2 + 1)
      00081E AF*08            [24] 2616 	mov	r7,(_act_by_one_key_PARM_2 + 2)
      000820 8D 82            [24] 2617 	mov	dpl,r5
      000822 8E 83            [24] 2618 	mov	dph,r6
      000824 8F F0            [24] 2619 	mov	b,r7
      000826 12r00r00         [24] 2620 	lcall	__gptrget
      000829 FC               [12] 2621 	mov	r4,a
      00082A 0C               [12] 2622 	inc	r4
      00082B 8D 82            [24] 2623 	mov	dpl,r5
      00082D 8E 83            [24] 2624 	mov	dph,r6
      00082F 8F F0            [24] 2625 	mov	b,r7
      000831 EC               [12] 2626 	mov	a,r4
      000832 12r00r00         [24] 2627 	lcall	__gptrput
                                   2628 ;	src/main.c:553: printf_fast_f("command: %d\n\r", *apu8LineFiCmd);
      000835 7F 00            [12] 2629 	mov	r7,#0x00
      000837 C0 04            [24] 2630 	push	ar4
      000839 C0 07            [24] 2631 	push	ar7
      00083B 74rFA            [12] 2632 	mov	a,#___str_49
      00083D C0 E0            [24] 2633 	push	acc
      00083F 74s02            [12] 2634 	mov	a,#(___str_49 >> 8)
      000841 C0 E0            [24] 2635 	push	acc
      000843 12r00r00         [24] 2636 	lcall	_printf_fast_f
      000846 E5 81            [12] 2637 	mov	a,sp
      000848 24 FC            [12] 2638 	add	a,#0xfc
      00084A F5 81            [12] 2639 	mov	sp,a
                                   2640 ;	src/main.c:554: break;
      00084C 22               [24] 2641 	ret
                                   2642 ;	src/main.c:555: case 'l' : // >>
      00084D                       2643 00118$:
                                   2644 ;	src/main.c:556: (*apu8LineFiAddr)++;
      00084D AD*09            [24] 2645 	mov	r5,_act_by_one_key_PARM_3
      00084F AE*0A            [24] 2646 	mov	r6,(_act_by_one_key_PARM_3 + 1)
      000851 AF*0B            [24] 2647 	mov	r7,(_act_by_one_key_PARM_3 + 2)
      000853 8D 82            [24] 2648 	mov	dpl,r5
      000855 8E 83            [24] 2649 	mov	dph,r6
      000857 8F F0            [24] 2650 	mov	b,r7
      000859 12r00r00         [24] 2651 	lcall	__gptrget
      00085C FC               [12] 2652 	mov	r4,a
      00085D 0C               [12] 2653 	inc	r4
      00085E 8D 82            [24] 2654 	mov	dpl,r5
      000860 8E 83            [24] 2655 	mov	dph,r6
      000862 8F F0            [24] 2656 	mov	b,r7
      000864 EC               [12] 2657 	mov	a,r4
      000865 12r00r00         [24] 2658 	lcall	__gptrput
                                   2659 ;	src/main.c:557: if (*apu8LineFiCmd == 1) {
      000868 AA*06            [24] 2660 	mov	r2,_act_by_one_key_PARM_2
      00086A AB*07            [24] 2661 	mov	r3,(_act_by_one_key_PARM_2 + 1)
      00086C AC*08            [24] 2662 	mov	r4,(_act_by_one_key_PARM_2 + 2)
      00086E 8A 82            [24] 2663 	mov	dpl,r2
      000870 8B 83            [24] 2664 	mov	dph,r3
      000872 8C F0            [24] 2665 	mov	b,r4
      000874 12r00r00         [24] 2666 	lcall	__gptrget
      000877 FA               [12] 2667 	mov	r2,a
      000878 BA 01 3C         [24] 2668 	cjne	r2,#0x01,00120$
                                   2669 ;	src/main.c:558: printf_fast_f("uart speed: %lu:\n\r", gpu32UartSpeed[*apu8LineFiAddr]);
      00087B 8D 82            [24] 2670 	mov	dpl,r5
      00087D 8E 83            [24] 2671 	mov	dph,r6
      00087F 8F F0            [24] 2672 	mov	b,r7
      000881 12r00r00         [24] 2673 	lcall	__gptrget
      000884 75 F0 04         [24] 2674 	mov	b,#0x04
      000887 A4               [48] 2675 	mul	ab
      000888 24r5D            [12] 2676 	add	a,#_gpu32UartSpeed
      00088A F5 82            [12] 2677 	mov	dpl,a
      00088C 74s00            [12] 2678 	mov	a,#(_gpu32UartSpeed >> 8)
      00088E 35 F0            [12] 2679 	addc	a,b
      000890 F5 83            [12] 2680 	mov	dph,a
      000892 E0               [24] 2681 	movx	a,@dptr
      000893 F9               [12] 2682 	mov	r1,a
      000894 A3               [24] 2683 	inc	dptr
      000895 E0               [24] 2684 	movx	a,@dptr
      000896 FA               [12] 2685 	mov	r2,a
      000897 A3               [24] 2686 	inc	dptr
      000898 E0               [24] 2687 	movx	a,@dptr
      000899 FB               [12] 2688 	mov	r3,a
      00089A A3               [24] 2689 	inc	dptr
      00089B E0               [24] 2690 	movx	a,@dptr
      00089C FC               [12] 2691 	mov	r4,a
      00089D C0 01            [24] 2692 	push	ar1
      00089F C0 02            [24] 2693 	push	ar2
      0008A1 C0 03            [24] 2694 	push	ar3
      0008A3 C0 04            [24] 2695 	push	ar4
      0008A5 74rD9            [12] 2696 	mov	a,#___str_47
      0008A7 C0 E0            [24] 2697 	push	acc
      0008A9 74s02            [12] 2698 	mov	a,#(___str_47 >> 8)
      0008AB C0 E0            [24] 2699 	push	acc
      0008AD 12r00r00         [24] 2700 	lcall	_printf_fast_f
      0008B0 E5 81            [12] 2701 	mov	a,sp
      0008B2 24 FA            [12] 2702 	add	a,#0xfa
      0008B4 F5 81            [12] 2703 	mov	sp,a
      0008B6 22               [24] 2704 	ret
      0008B7                       2705 00120$:
                                   2706 ;	src/main.c:561: printf_fast_f("address: %d\n\r", *apu8LineFiAddr);
      0008B7 8D 82            [24] 2707 	mov	dpl,r5
      0008B9 8E 83            [24] 2708 	mov	dph,r6
      0008BB 8F F0            [24] 2709 	mov	b,r7
      0008BD 12r00r00         [24] 2710 	lcall	__gptrget
      0008C0 FD               [12] 2711 	mov	r5,a
      0008C1 7F 00            [12] 2712 	mov	r7,#0x00
      0008C3 C0 05            [24] 2713 	push	ar5
      0008C5 C0 07            [24] 2714 	push	ar7
      0008C7 74rEC            [12] 2715 	mov	a,#___str_48
      0008C9 C0 E0            [24] 2716 	push	acc
      0008CB 74s02            [12] 2717 	mov	a,#(___str_48 >> 8)
      0008CD C0 E0            [24] 2718 	push	acc
      0008CF 12r00r00         [24] 2719 	lcall	_printf_fast_f
      0008D2 E5 81            [12] 2720 	mov	a,sp
      0008D4 24 FC            [12] 2721 	add	a,#0xfc
      0008D6 F5 81            [12] 2722 	mov	sp,a
                                   2723 ;	src/main.c:563: break;
      0008D8 22               [24] 2724 	ret
                                   2725 ;	src/main.c:564: case 's' :
      0008D9                       2726 00122$:
                                   2727 ;	src/main.c:565: switch (*apu8LineFiCmd) {
      0008D9 AD*06            [24] 2728 	mov	r5,_act_by_one_key_PARM_2
      0008DB AE*07            [24] 2729 	mov	r6,(_act_by_one_key_PARM_2 + 1)
      0008DD AF*08            [24] 2730 	mov	r7,(_act_by_one_key_PARM_2 + 2)
      0008DF 8D 82            [24] 2731 	mov	dpl,r5
      0008E1 8E 83            [24] 2732 	mov	dph,r6
      0008E3 8F F0            [24] 2733 	mov	b,r7
      0008E5 12r00r00         [24] 2734 	lcall	__gptrget
      0008E8 FC               [12] 2735 	mov	r4,a
      0008E9 60 09            [24] 2736 	jz	00123$
      0008EB BC 01 03         [24] 2737 	cjne	r4,#0x01,00286$
      0008EE 02r09r87         [24] 2738 	ljmp	00124$
      0008F1                       2739 00286$:
      0008F1 02r0Ar34         [24] 2740 	ljmp	00125$
                                   2741 ;	src/main.c:566: case 0 : // address setting
      0008F4                       2742 00123$:
                                   2743 ;	src/main.c:567: send_octet_to_linefi((((*apu8LineFiAddr)<<4)&0xF0) | (*apu8LineFiCmd)&0x0F);
      0008F4 85*09*0C         [24] 2744 	mov	_act_by_one_key_sloc0_1_0,_act_by_one_key_PARM_3
      0008F7 85*0A*0D         [24] 2745 	mov	(_act_by_one_key_sloc0_1_0 + 1),(_act_by_one_key_PARM_3 + 1)
      0008FA 85*0B*0E         [24] 2746 	mov	(_act_by_one_key_sloc0_1_0 + 2),(_act_by_one_key_PARM_3 + 2)
      0008FD 85*0C 82         [24] 2747 	mov	dpl,_act_by_one_key_sloc0_1_0
      000900 85*0D 83         [24] 2748 	mov	dph,(_act_by_one_key_sloc0_1_0 + 1)
      000903 85*0E F0         [24] 2749 	mov	b,(_act_by_one_key_sloc0_1_0 + 2)
      000906 12r00r00         [24] 2750 	lcall	__gptrget
      000909 C4               [12] 2751 	swap	a
      00090A 54 F0            [12] 2752 	anl	a,#0xf0
      00090C F8               [12] 2753 	mov	r0,a
      00090D 53 00 F0         [24] 2754 	anl	ar0,#0xf0
      000910 74 0F            [12] 2755 	mov	a,#0x0f
      000912 5C               [12] 2756 	anl	a,r4
      000913 48               [12] 2757 	orl	a,r0
      000914 F5 82            [12] 2758 	mov	dpl,a
      000916 C0 07            [24] 2759 	push	ar7
      000918 C0 06            [24] 2760 	push	ar6
      00091A C0 05            [24] 2761 	push	ar5
      00091C 12r00r00         [24] 2762 	lcall	_send_octet_to_linefi
      00091F D0 05            [24] 2763 	pop	ar5
      000921 D0 06            [24] 2764 	pop	ar6
      000923 D0 07            [24] 2765 	pop	ar7
                                   2766 ;	src/main.c:568: printf_fast_f("LineFi Sending: 0x%x:\n\r", ((*apu8LineFiAddr)<<4) | *apu8LineFiCmd);
      000925 85*0C 82         [24] 2767 	mov	dpl,_act_by_one_key_sloc0_1_0
      000928 85*0D 83         [24] 2768 	mov	dph,(_act_by_one_key_sloc0_1_0 + 1)
      00092B 85*0E F0         [24] 2769 	mov	b,(_act_by_one_key_sloc0_1_0 + 2)
      00092E 12r00r00         [24] 2770 	lcall	__gptrget
      000931 F8               [12] 2771 	mov	r0,a
      000932 E4               [12] 2772 	clr	a
      000933 C8               [12] 2773 	xch	a,r0
      000934 C4               [12] 2774 	swap	a
      000935 C8               [12] 2775 	xch	a,r0
      000936 68               [12] 2776 	xrl	a,r0
      000937 C8               [12] 2777 	xch	a,r0
      000938 54 F0            [12] 2778 	anl	a,#0xf0
      00093A C8               [12] 2779 	xch	a,r0
      00093B 68               [12] 2780 	xrl	a,r0
      00093C FB               [12] 2781 	mov	r3,a
      00093D 8D 82            [24] 2782 	mov	dpl,r5
      00093F 8E 83            [24] 2783 	mov	dph,r6
      000941 8F F0            [24] 2784 	mov	b,r7
      000943 12r00r00         [24] 2785 	lcall	__gptrget
      000946 7A 00            [12] 2786 	mov	r2,#0x00
      000948 42 00            [12] 2787 	orl	ar0,a
      00094A EA               [12] 2788 	mov	a,r2
      00094B 42 03            [12] 2789 	orl	ar3,a
      00094D C0 00            [24] 2790 	push	ar0
      00094F C0 03            [24] 2791 	push	ar3
      000951 74r08            [12] 2792 	mov	a,#___str_50
      000953 C0 E0            [24] 2793 	push	acc
      000955 74s03            [12] 2794 	mov	a,#(___str_50 >> 8)
      000957 C0 E0            [24] 2795 	push	acc
      000959 12r00r00         [24] 2796 	lcall	_printf_fast_f
      00095C E5 81            [12] 2797 	mov	a,sp
      00095E 24 FC            [12] 2798 	add	a,#0xfc
      000960 F5 81            [12] 2799 	mov	sp,a
                                   2800 ;	src/main.c:569: printf_fast_f("address: 0x%d:\n\r", *apu8LineFiAddr);
      000962 85*0C 82         [24] 2801 	mov	dpl,_act_by_one_key_sloc0_1_0
      000965 85*0D 83         [24] 2802 	mov	dph,(_act_by_one_key_sloc0_1_0 + 1)
      000968 85*0E F0         [24] 2803 	mov	b,(_act_by_one_key_sloc0_1_0 + 2)
      00096B 12r00r00         [24] 2804 	lcall	__gptrget
      00096E FB               [12] 2805 	mov	r3,a
      00096F 7A 00            [12] 2806 	mov	r2,#0x00
      000971 C0 03            [24] 2807 	push	ar3
      000973 C0 02            [24] 2808 	push	ar2
      000975 74r20            [12] 2809 	mov	a,#___str_51
      000977 C0 E0            [24] 2810 	push	acc
      000979 74s03            [12] 2811 	mov	a,#(___str_51 >> 8)
      00097B C0 E0            [24] 2812 	push	acc
      00097D 12r00r00         [24] 2813 	lcall	_printf_fast_f
      000980 E5 81            [12] 2814 	mov	a,sp
      000982 24 FC            [12] 2815 	add	a,#0xfc
      000984 F5 81            [12] 2816 	mov	sp,a
                                   2817 ;	src/main.c:570: break;
      000986 22               [24] 2818 	ret
                                   2819 ;	src/main.c:571: case 1 : // uart speed setting
      000987                       2820 00124$:
                                   2821 ;	src/main.c:572: send_octet_to_linefi((((*apu8LineFiAddr)<<4)&0xF0) | (*apu8LineFiCmd)&0x0F);
      000987 85*09*0C         [24] 2822 	mov	_act_by_one_key_sloc0_1_0,_act_by_one_key_PARM_3
      00098A 85*0A*0D         [24] 2823 	mov	(_act_by_one_key_sloc0_1_0 + 1),(_act_by_one_key_PARM_3 + 1)
      00098D 85*0B*0E         [24] 2824 	mov	(_act_by_one_key_sloc0_1_0 + 2),(_act_by_one_key_PARM_3 + 2)
      000990 85*0C 82         [24] 2825 	mov	dpl,_act_by_one_key_sloc0_1_0
      000993 85*0D 83         [24] 2826 	mov	dph,(_act_by_one_key_sloc0_1_0 + 1)
      000996 85*0E F0         [24] 2827 	mov	b,(_act_by_one_key_sloc0_1_0 + 2)
      000999 12r00r00         [24] 2828 	lcall	__gptrget
      00099C C4               [12] 2829 	swap	a
      00099D 54 F0            [12] 2830 	anl	a,#0xf0
      00099F F8               [12] 2831 	mov	r0,a
      0009A0 53 00 F0         [24] 2832 	anl	ar0,#0xf0
      0009A3 74 0F            [12] 2833 	mov	a,#0x0f
      0009A5 5C               [12] 2834 	anl	a,r4
      0009A6 48               [12] 2835 	orl	a,r0
      0009A7 F5 82            [12] 2836 	mov	dpl,a
      0009A9 C0 07            [24] 2837 	push	ar7
      0009AB C0 06            [24] 2838 	push	ar6
      0009AD C0 05            [24] 2839 	push	ar5
      0009AF 12r00r00         [24] 2840 	lcall	_send_octet_to_linefi
      0009B2 D0 05            [24] 2841 	pop	ar5
      0009B4 D0 06            [24] 2842 	pop	ar6
      0009B6 D0 07            [24] 2843 	pop	ar7
                                   2844 ;	src/main.c:573: printf_fast_f("LineFi Sending: 0x%x:\n\r", ((*apu8LineFiAddr)<<4) | *apu8LineFiCmd);
      0009B8 85*0C 82         [24] 2845 	mov	dpl,_act_by_one_key_sloc0_1_0
      0009BB 85*0D 83         [24] 2846 	mov	dph,(_act_by_one_key_sloc0_1_0 + 1)
      0009BE 85*0E F0         [24] 2847 	mov	b,(_act_by_one_key_sloc0_1_0 + 2)
      0009C1 12r00r00         [24] 2848 	lcall	__gptrget
      0009C4 F8               [12] 2849 	mov	r0,a
      0009C5 E4               [12] 2850 	clr	a
      0009C6 C8               [12] 2851 	xch	a,r0
      0009C7 C4               [12] 2852 	swap	a
      0009C8 C8               [12] 2853 	xch	a,r0
      0009C9 68               [12] 2854 	xrl	a,r0
      0009CA C8               [12] 2855 	xch	a,r0
      0009CB 54 F0            [12] 2856 	anl	a,#0xf0
      0009CD C8               [12] 2857 	xch	a,r0
      0009CE 68               [12] 2858 	xrl	a,r0
      0009CF FB               [12] 2859 	mov	r3,a
      0009D0 8D 82            [24] 2860 	mov	dpl,r5
      0009D2 8E 83            [24] 2861 	mov	dph,r6
      0009D4 8F F0            [24] 2862 	mov	b,r7
      0009D6 12r00r00         [24] 2863 	lcall	__gptrget
      0009D9 7A 00            [12] 2864 	mov	r2,#0x00
      0009DB 42 00            [12] 2865 	orl	ar0,a
      0009DD EA               [12] 2866 	mov	a,r2
      0009DE 42 03            [12] 2867 	orl	ar3,a
      0009E0 C0 00            [24] 2868 	push	ar0
      0009E2 C0 03            [24] 2869 	push	ar3
      0009E4 74r08            [12] 2870 	mov	a,#___str_50
      0009E6 C0 E0            [24] 2871 	push	acc
      0009E8 74s03            [12] 2872 	mov	a,#(___str_50 >> 8)
      0009EA C0 E0            [24] 2873 	push	acc
      0009EC 12r00r00         [24] 2874 	lcall	_printf_fast_f
      0009EF E5 81            [12] 2875 	mov	a,sp
      0009F1 24 FC            [12] 2876 	add	a,#0xfc
      0009F3 F5 81            [12] 2877 	mov	sp,a
                                   2878 ;	src/main.c:574: printf_fast_f("uart speed: %lu:\n\r", gpu32UartSpeed[*apu8LineFiAddr]);
      0009F5 85*0C 82         [24] 2879 	mov	dpl,_act_by_one_key_sloc0_1_0
      0009F8 85*0D 83         [24] 2880 	mov	dph,(_act_by_one_key_sloc0_1_0 + 1)
      0009FB 85*0E F0         [24] 2881 	mov	b,(_act_by_one_key_sloc0_1_0 + 2)
      0009FE 12r00r00         [24] 2882 	lcall	__gptrget
      000A01 75 F0 04         [24] 2883 	mov	b,#0x04
      000A04 A4               [48] 2884 	mul	ab
      000A05 24r5D            [12] 2885 	add	a,#_gpu32UartSpeed
      000A07 F5 82            [12] 2886 	mov	dpl,a
      000A09 74s00            [12] 2887 	mov	a,#(_gpu32UartSpeed >> 8)
      000A0B 35 F0            [12] 2888 	addc	a,b
      000A0D F5 83            [12] 2889 	mov	dph,a
      000A0F E0               [24] 2890 	movx	a,@dptr
      000A10 F8               [12] 2891 	mov	r0,a
      000A11 A3               [24] 2892 	inc	dptr
      000A12 E0               [24] 2893 	movx	a,@dptr
      000A13 F9               [12] 2894 	mov	r1,a
      000A14 A3               [24] 2895 	inc	dptr
      000A15 E0               [24] 2896 	movx	a,@dptr
      000A16 FA               [12] 2897 	mov	r2,a
      000A17 A3               [24] 2898 	inc	dptr
      000A18 E0               [24] 2899 	movx	a,@dptr
      000A19 FB               [12] 2900 	mov	r3,a
      000A1A C0 00            [24] 2901 	push	ar0
      000A1C C0 01            [24] 2902 	push	ar1
      000A1E C0 02            [24] 2903 	push	ar2
      000A20 C0 03            [24] 2904 	push	ar3
      000A22 74rD9            [12] 2905 	mov	a,#___str_47
      000A24 C0 E0            [24] 2906 	push	acc
      000A26 74s02            [12] 2907 	mov	a,#(___str_47 >> 8)
      000A28 C0 E0            [24] 2908 	push	acc
      000A2A 12r00r00         [24] 2909 	lcall	_printf_fast_f
      000A2D E5 81            [12] 2910 	mov	a,sp
      000A2F 24 FA            [12] 2911 	add	a,#0xfa
      000A31 F5 81            [12] 2912 	mov	sp,a
                                   2913 ;	src/main.c:575: break;
      000A33 22               [24] 2914 	ret
                                   2915 ;	src/main.c:576: default :
      000A34                       2916 00125$:
                                   2917 ;	src/main.c:577: send_octet_to_linefi((((*apu8LineFiAddr)<<4)&0xF0) | (*apu8LineFiCmd)&0x0F);
      000A34 A9*09            [24] 2918 	mov	r1,_act_by_one_key_PARM_3
      000A36 AA*0A            [24] 2919 	mov	r2,(_act_by_one_key_PARM_3 + 1)
      000A38 AB*0B            [24] 2920 	mov	r3,(_act_by_one_key_PARM_3 + 2)
      000A3A 89 82            [24] 2921 	mov	dpl,r1
      000A3C 8A 83            [24] 2922 	mov	dph,r2
      000A3E 8B F0            [24] 2923 	mov	b,r3
      000A40 12r00r00         [24] 2924 	lcall	__gptrget
      000A43 C4               [12] 2925 	swap	a
      000A44 54 F0            [12] 2926 	anl	a,#0xf0
      000A46 F8               [12] 2927 	mov	r0,a
      000A47 53 00 F0         [24] 2928 	anl	ar0,#0xf0
      000A4A 74 0F            [12] 2929 	mov	a,#0x0f
      000A4C 5C               [12] 2930 	anl	a,r4
      000A4D 48               [12] 2931 	orl	a,r0
      000A4E F5 82            [12] 2932 	mov	dpl,a
      000A50 C0 07            [24] 2933 	push	ar7
      000A52 C0 06            [24] 2934 	push	ar6
      000A54 C0 05            [24] 2935 	push	ar5
      000A56 C0 03            [24] 2936 	push	ar3
      000A58 C0 02            [24] 2937 	push	ar2
      000A5A C0 01            [24] 2938 	push	ar1
      000A5C 12r00r00         [24] 2939 	lcall	_send_octet_to_linefi
      000A5F D0 01            [24] 2940 	pop	ar1
      000A61 D0 02            [24] 2941 	pop	ar2
      000A63 D0 03            [24] 2942 	pop	ar3
      000A65 D0 05            [24] 2943 	pop	ar5
      000A67 D0 06            [24] 2944 	pop	ar6
      000A69 D0 07            [24] 2945 	pop	ar7
                                   2946 ;	src/main.c:578: printf_fast_f("LineFi Sending: 0x%x:\n\r", ((*apu8LineFiAddr)<<4) | *apu8LineFiCmd);
      000A6B 89 82            [24] 2947 	mov	dpl,r1
      000A6D 8A 83            [24] 2948 	mov	dph,r2
      000A6F 8B F0            [24] 2949 	mov	b,r3
      000A71 12r00r00         [24] 2950 	lcall	__gptrget
      000A74 F9               [12] 2951 	mov	r1,a
      000A75 E4               [12] 2952 	clr	a
      000A76 C9               [12] 2953 	xch	a,r1
      000A77 C4               [12] 2954 	swap	a
      000A78 C9               [12] 2955 	xch	a,r1
      000A79 69               [12] 2956 	xrl	a,r1
      000A7A C9               [12] 2957 	xch	a,r1
      000A7B 54 F0            [12] 2958 	anl	a,#0xf0
      000A7D C9               [12] 2959 	xch	a,r1
      000A7E 69               [12] 2960 	xrl	a,r1
      000A7F FC               [12] 2961 	mov	r4,a
      000A80 8D 82            [24] 2962 	mov	dpl,r5
      000A82 8E 83            [24] 2963 	mov	dph,r6
      000A84 8F F0            [24] 2964 	mov	b,r7
      000A86 12r00r00         [24] 2965 	lcall	__gptrget
      000A89 7F 00            [12] 2966 	mov	r7,#0x00
      000A8B 42 01            [12] 2967 	orl	ar1,a
      000A8D EF               [12] 2968 	mov	a,r7
      000A8E 42 04            [12] 2969 	orl	ar4,a
      000A90 C0 01            [24] 2970 	push	ar1
      000A92 C0 04            [24] 2971 	push	ar4
      000A94 74r08            [12] 2972 	mov	a,#___str_50
      000A96 C0 E0            [24] 2973 	push	acc
      000A98 74s03            [12] 2974 	mov	a,#(___str_50 >> 8)
      000A9A C0 E0            [24] 2975 	push	acc
      000A9C 12r00r00         [24] 2976 	lcall	_printf_fast_f
      000A9F E5 81            [12] 2977 	mov	a,sp
      000AA1 24 FC            [12] 2978 	add	a,#0xfc
      000AA3 F5 81            [12] 2979 	mov	sp,a
                                   2980 ;	src/main.c:581: break;
      000AA5 22               [24] 2981 	ret
                                   2982 ;	src/main.c:582: case 'u' :
      000AA6                       2983 00127$:
                                   2984 ;	src/main.c:583: printf_fast_f("uart speed: %lu:\n\r", gpu32UartSpeed[*apu8LineFiAddr]);
      000AA6 AD*09            [24] 2985 	mov	r5,_act_by_one_key_PARM_3
      000AA8 AE*0A            [24] 2986 	mov	r6,(_act_by_one_key_PARM_3 + 1)
      000AAA AF*0B            [24] 2987 	mov	r7,(_act_by_one_key_PARM_3 + 2)
      000AAC 8D 82            [24] 2988 	mov	dpl,r5
      000AAE 8E 83            [24] 2989 	mov	dph,r6
      000AB0 8F F0            [24] 2990 	mov	b,r7
      000AB2 12r00r00         [24] 2991 	lcall	__gptrget
      000AB5 75 F0 04         [24] 2992 	mov	b,#0x04
      000AB8 A4               [48] 2993 	mul	ab
      000AB9 24r5D            [12] 2994 	add	a,#_gpu32UartSpeed
      000ABB F5 82            [12] 2995 	mov	dpl,a
      000ABD 74s00            [12] 2996 	mov	a,#(_gpu32UartSpeed >> 8)
      000ABF 35 F0            [12] 2997 	addc	a,b
      000AC1 F5 83            [12] 2998 	mov	dph,a
      000AC3 E0               [24] 2999 	movx	a,@dptr
      000AC4 F9               [12] 3000 	mov	r1,a
      000AC5 A3               [24] 3001 	inc	dptr
      000AC6 E0               [24] 3002 	movx	a,@dptr
      000AC7 FA               [12] 3003 	mov	r2,a
      000AC8 A3               [24] 3004 	inc	dptr
      000AC9 E0               [24] 3005 	movx	a,@dptr
      000ACA FB               [12] 3006 	mov	r3,a
      000ACB A3               [24] 3007 	inc	dptr
      000ACC E0               [24] 3008 	movx	a,@dptr
      000ACD FC               [12] 3009 	mov	r4,a
      000ACE C0 07            [24] 3010 	push	ar7
      000AD0 C0 06            [24] 3011 	push	ar6
      000AD2 C0 05            [24] 3012 	push	ar5
      000AD4 C0 01            [24] 3013 	push	ar1
      000AD6 C0 02            [24] 3014 	push	ar2
      000AD8 C0 03            [24] 3015 	push	ar3
      000ADA C0 04            [24] 3016 	push	ar4
      000ADC 74rD9            [12] 3017 	mov	a,#___str_47
      000ADE C0 E0            [24] 3018 	push	acc
      000AE0 74s02            [12] 3019 	mov	a,#(___str_47 >> 8)
      000AE2 C0 E0            [24] 3020 	push	acc
      000AE4 12r00r00         [24] 3021 	lcall	_printf_fast_f
      000AE7 E5 81            [12] 3022 	mov	a,sp
      000AE9 24 FA            [12] 3023 	add	a,#0xfa
      000AEB F5 81            [12] 3024 	mov	sp,a
      000AED D0 05            [24] 3025 	pop	ar5
      000AEF D0 06            [24] 3026 	pop	ar6
      000AF1 D0 07            [24] 3027 	pop	ar7
                                   3028 ;	src/main.c:584: InitialUART1_Timer3(gpu32UartSpeed[*apu8LineFiAddr]);
      000AF3 8D 82            [24] 3029 	mov	dpl,r5
      000AF5 8E 83            [24] 3030 	mov	dph,r6
      000AF7 8F F0            [24] 3031 	mov	b,r7
      000AF9 12r00r00         [24] 3032 	lcall	__gptrget
      000AFC 75 F0 04         [24] 3033 	mov	b,#0x04
      000AFF A4               [48] 3034 	mul	ab
      000B00 24r5D            [12] 3035 	add	a,#_gpu32UartSpeed
      000B02 F5 82            [12] 3036 	mov	dpl,a
      000B04 74s00            [12] 3037 	mov	a,#(_gpu32UartSpeed >> 8)
      000B06 35 F0            [12] 3038 	addc	a,b
      000B08 F5 83            [12] 3039 	mov	dph,a
      000B0A E0               [24] 3040 	movx	a,@dptr
      000B0B FC               [12] 3041 	mov	r4,a
      000B0C A3               [24] 3042 	inc	dptr
      000B0D E0               [24] 3043 	movx	a,@dptr
      000B0E FD               [12] 3044 	mov	r5,a
      000B0F A3               [24] 3045 	inc	dptr
      000B10 E0               [24] 3046 	movx	a,@dptr
      000B11 FE               [12] 3047 	mov	r6,a
      000B12 A3               [24] 3048 	inc	dptr
      000B13 E0               [24] 3049 	movx	a,@dptr
      000B14 8C 82            [24] 3050 	mov	dpl,r4
      000B16 8D 83            [24] 3051 	mov	dph,r5
      000B18 8E F0            [24] 3052 	mov	b,r6
                                   3053 ;	src/main.c:585: break;
      000B1A 02r00r00         [24] 3054 	ljmp	_InitialUART1_Timer3
                                   3055 ;	src/main.c:587: case 'S' :
      000B1D                       3056 00128$:
                                   3057 ;	src/main.c:588: send_octet_to_linefi(u8Data);
      000B1D 90r00r96         [24] 3058 	mov	dptr,#_act_by_one_key_u8Data_65536_88
      000B20 E0               [24] 3059 	movx	a,@dptr
      000B21 F5 82            [12] 3060 	mov	dpl,a
      000B23 12r00r00         [24] 3061 	lcall	_send_octet_to_linefi
                                   3062 ;	src/main.c:589: printf_fast_f("LineFi Sending: %d(0x%x)\n\r", u8Data, u8Data);
      000B26 90r00r96         [24] 3063 	mov	dptr,#_act_by_one_key_u8Data_65536_88
      000B29 E0               [24] 3064 	movx	a,@dptr
      000B2A FF               [12] 3065 	mov	r7,a
      000B2B 7E 00            [12] 3066 	mov	r6,#0x00
      000B2D C0 07            [24] 3067 	push	ar7
      000B2F C0 06            [24] 3068 	push	ar6
      000B31 C0 07            [24] 3069 	push	ar7
      000B33 C0 06            [24] 3070 	push	ar6
      000B35 74r31            [12] 3071 	mov	a,#___str_52
      000B37 C0 E0            [24] 3072 	push	acc
      000B39 74s03            [12] 3073 	mov	a,#(___str_52 >> 8)
      000B3B C0 E0            [24] 3074 	push	acc
      000B3D 12r00r00         [24] 3075 	lcall	_printf_fast_f
      000B40 E5 81            [12] 3076 	mov	a,sp
      000B42 24 FA            [12] 3077 	add	a,#0xfa
      000B44 F5 81            [12] 3078 	mov	sp,a
                                   3079 ;	src/main.c:590: break;
      000B46 22               [24] 3080 	ret
                                   3081 ;	src/main.c:591: case '+' :
      000B47                       3082 00129$:
                                   3083 ;	src/main.c:592: u8Data++;
      000B47 90r00r96         [24] 3084 	mov	dptr,#_act_by_one_key_u8Data_65536_88
      000B4A E0               [24] 3085 	movx	a,@dptr
      000B4B 24 01            [12] 3086 	add	a,#0x01
      000B4D F0               [24] 3087 	movx	@dptr,a
                                   3088 ;	src/main.c:593: printf_fast_f("send data %d(0x%x)\n\r", u8Data, u8Data);
      000B4E E0               [24] 3089 	movx	a,@dptr
      000B4F FF               [12] 3090 	mov	r7,a
      000B50 7E 00            [12] 3091 	mov	r6,#0x00
      000B52 C0 07            [24] 3092 	push	ar7
      000B54 C0 06            [24] 3093 	push	ar6
      000B56 C0 07            [24] 3094 	push	ar7
      000B58 C0 06            [24] 3095 	push	ar6
      000B5A 74r4C            [12] 3096 	mov	a,#___str_53
      000B5C C0 E0            [24] 3097 	push	acc
      000B5E 74s03            [12] 3098 	mov	a,#(___str_53 >> 8)
      000B60 C0 E0            [24] 3099 	push	acc
      000B62 12r00r00         [24] 3100 	lcall	_printf_fast_f
      000B65 E5 81            [12] 3101 	mov	a,sp
      000B67 24 FA            [12] 3102 	add	a,#0xfa
      000B69 F5 81            [12] 3103 	mov	sp,a
                                   3104 ;	src/main.c:594: break;
      000B6B 22               [24] 3105 	ret
                                   3106 ;	src/main.c:595: case '-' :
      000B6C                       3107 00130$:
                                   3108 ;	src/main.c:596: u8Data--;
      000B6C 90r00r96         [24] 3109 	mov	dptr,#_act_by_one_key_u8Data_65536_88
      000B6F E0               [24] 3110 	movx	a,@dptr
      000B70 14               [12] 3111 	dec	a
      000B71 F0               [24] 3112 	movx	@dptr,a
                                   3113 ;	src/main.c:597: printf_fast_f("send data %d(0x%x)\n\r", u8Data, u8Data);
      000B72 E0               [24] 3114 	movx	a,@dptr
      000B73 FF               [12] 3115 	mov	r7,a
      000B74 7E 00            [12] 3116 	mov	r6,#0x00
      000B76 C0 07            [24] 3117 	push	ar7
      000B78 C0 06            [24] 3118 	push	ar6
      000B7A C0 07            [24] 3119 	push	ar7
      000B7C C0 06            [24] 3120 	push	ar6
      000B7E 74r4C            [12] 3121 	mov	a,#___str_53
      000B80 C0 E0            [24] 3122 	push	acc
      000B82 74s03            [12] 3123 	mov	a,#(___str_53 >> 8)
      000B84 C0 E0            [24] 3124 	push	acc
      000B86 12r00r00         [24] 3125 	lcall	_printf_fast_f
      000B89 E5 81            [12] 3126 	mov	a,sp
      000B8B 24 FA            [12] 3127 	add	a,#0xfa
      000B8D F5 81            [12] 3128 	mov	sp,a
                                   3129 ;	src/main.c:598: break;
      000B8F 22               [24] 3130 	ret
                                   3131 ;	src/main.c:600: case 'a' :
      000B90                       3132 00131$:
                                   3133 ;	src/main.c:601: send_octet_to_linefi(0x11);
      000B90 75 82 11         [24] 3134 	mov	dpl,#0x11
                                   3135 ;	src/main.c:602: break;
      000B93 02r00r00         [24] 3136 	ljmp	_send_octet_to_linefi
                                   3137 ;	src/main.c:603: case 'b' :
      000B96                       3138 00132$:
                                   3139 ;	src/main.c:604: send_octet_to_linefi(0x12);
      000B96 75 82 12         [24] 3140 	mov	dpl,#0x12
                                   3141 ;	src/main.c:605: break;
      000B99 02r00r00         [24] 3142 	ljmp	_send_octet_to_linefi
                                   3143 ;	src/main.c:606: case 'c' :
      000B9C                       3144 00133$:
                                   3145 ;	src/main.c:607: send_octet_to_linefi(0x13);
      000B9C 75 82 13         [24] 3146 	mov	dpl,#0x13
                                   3147 ;	src/main.c:608: break;
                                   3148 ;	src/main.c:609: case 'H' :
                                   3149 ;	src/main.c:610: print_help();
                                   3150 ;	src/main.c:611: break;
      000B9F 02r00r00         [24] 3151 	ljmp	_send_octet_to_linefi
                                   3152 ;	src/main.c:612: case 'R' :
      000BA2                       3153 00135$:
                                   3154 ;	src/main.c:613: send_octet_to_linefi(((*apu8LineFiAddr)<<4)|1);
      000BA2 AD*09            [24] 3155 	mov	r5,_act_by_one_key_PARM_3
      000BA4 AE*0A            [24] 3156 	mov	r6,(_act_by_one_key_PARM_3 + 1)
      000BA6 AF*0B            [24] 3157 	mov	r7,(_act_by_one_key_PARM_3 + 2)
      000BA8 8D 82            [24] 3158 	mov	dpl,r5
      000BAA 8E 83            [24] 3159 	mov	dph,r6
      000BAC 8F F0            [24] 3160 	mov	b,r7
      000BAE 12r00r00         [24] 3161 	lcall	__gptrget
      000BB1 C4               [12] 3162 	swap	a
      000BB2 54 F0            [12] 3163 	anl	a,#0xf0
      000BB4 FC               [12] 3164 	mov	r4,a
      000BB5 74 01            [12] 3165 	mov	a,#0x01
      000BB7 4C               [12] 3166 	orl	a,r4
      000BB8 F5 82            [12] 3167 	mov	dpl,a
      000BBA C0 07            [24] 3168 	push	ar7
      000BBC C0 06            [24] 3169 	push	ar6
      000BBE C0 05            [24] 3170 	push	ar5
      000BC0 12r00r00         [24] 3171 	lcall	_send_octet_to_linefi
      000BC3 D0 05            [24] 3172 	pop	ar5
      000BC5 D0 06            [24] 3173 	pop	ar6
      000BC7 D0 07            [24] 3174 	pop	ar7
                                   3175 ;	src/main.c:614: printf_fast_f("Rotate!!:%d \n\r", *apu8LineFiAddr);
      000BC9 8D 82            [24] 3176 	mov	dpl,r5
      000BCB 8E 83            [24] 3177 	mov	dph,r6
      000BCD 8F F0            [24] 3178 	mov	b,r7
      000BCF 12r00r00         [24] 3179 	lcall	__gptrget
      000BD2 FD               [12] 3180 	mov	r5,a
      000BD3 7F 00            [12] 3181 	mov	r7,#0x00
      000BD5 C0 05            [24] 3182 	push	ar5
      000BD7 C0 07            [24] 3183 	push	ar7
      000BD9 74r61            [12] 3184 	mov	a,#___str_54
      000BDB C0 E0            [24] 3185 	push	acc
      000BDD 74s03            [12] 3186 	mov	a,#(___str_54 >> 8)
      000BDF C0 E0            [24] 3187 	push	acc
      000BE1 12r00r00         [24] 3188 	lcall	_printf_fast_f
      000BE4 E5 81            [12] 3189 	mov	a,sp
      000BE6 24 FC            [12] 3190 	add	a,#0xfc
      000BE8 F5 81            [12] 3191 	mov	sp,a
                                   3192 ;	src/main.c:615: break;
                                   3193 ;	src/main.c:616: case 'r' :
      000BEA 22               [24] 3194 	ret
      000BEB                       3195 00136$:
                                   3196 ;	src/main.c:617: send_octet_to_linefi(((*apu8LineFiAddr)<<4)|0);
      000BEB AD*09            [24] 3197 	mov	r5,_act_by_one_key_PARM_3
      000BED AE*0A            [24] 3198 	mov	r6,(_act_by_one_key_PARM_3 + 1)
      000BEF AF*0B            [24] 3199 	mov	r7,(_act_by_one_key_PARM_3 + 2)
      000BF1 8D 82            [24] 3200 	mov	dpl,r5
      000BF3 8E 83            [24] 3201 	mov	dph,r6
      000BF5 8F F0            [24] 3202 	mov	b,r7
      000BF7 12r00r00         [24] 3203 	lcall	__gptrget
      000BFA C4               [12] 3204 	swap	a
      000BFB 54 F0            [12] 3205 	anl	a,#0xf0
      000BFD F5 82            [12] 3206 	mov	dpl,a
      000BFF C0 07            [24] 3207 	push	ar7
      000C01 C0 06            [24] 3208 	push	ar6
      000C03 C0 05            [24] 3209 	push	ar5
      000C05 12r00r00         [24] 3210 	lcall	_send_octet_to_linefi
      000C08 D0 05            [24] 3211 	pop	ar5
      000C0A D0 06            [24] 3212 	pop	ar6
      000C0C D0 07            [24] 3213 	pop	ar7
                                   3214 ;	src/main.c:618: printf_fast_f("Stop    :%d \n\r", *apu8LineFiAddr);
      000C0E 8D 82            [24] 3215 	mov	dpl,r5
      000C10 8E 83            [24] 3216 	mov	dph,r6
      000C12 8F F0            [24] 3217 	mov	b,r7
      000C14 12r00r00         [24] 3218 	lcall	__gptrget
      000C17 FD               [12] 3219 	mov	r5,a
      000C18 7F 00            [12] 3220 	mov	r7,#0x00
      000C1A C0 05            [24] 3221 	push	ar5
      000C1C C0 07            [24] 3222 	push	ar7
      000C1E 74r70            [12] 3223 	mov	a,#___str_55
      000C20 C0 E0            [24] 3224 	push	acc
      000C22 74s03            [12] 3225 	mov	a,#(___str_55 >> 8)
      000C24 C0 E0            [24] 3226 	push	acc
      000C26 12r00r00         [24] 3227 	lcall	_printf_fast_f
      000C29 E5 81            [12] 3228 	mov	a,sp
      000C2B 24 FC            [12] 3229 	add	a,#0xfc
      000C2D F5 81            [12] 3230 	mov	sp,a
                                   3231 ;	src/main.c:620: } //switch(au8RxUART)
                                   3232 ;	src/main.c:621: }
      000C2F 22               [24] 3233 	ret
                                   3234 ;------------------------------------------------------------
                                   3235 ;Allocation info for local variables in function 'start_aloha'
                                   3236 ;------------------------------------------------------------
                                   3237 ;apcStr                    Allocated to registers r5 r6 r7 
                                   3238 ;------------------------------------------------------------
                                   3239 ;	src/main.c:637: void start_aloha(linefi_packet_t * apcStr) 
                                   3240 ;	-----------------------------------------
                                   3241 ;	 function start_aloha
                                   3242 ;	-----------------------------------------
      000C30                       3243 _start_aloha:
      000C30 AD 82            [24] 3244 	mov	r5,dpl
      000C32 AE 83            [24] 3245 	mov	r6,dph
      000C34 AF F0            [24] 3246 	mov	r7,b
                                   3247 ;	src/main.c:639: apcStr->u8Type = 100;
      000C36 74 01            [12] 3248 	mov	a,#0x01
      000C38 2D               [12] 3249 	add	a,r5
      000C39 FA               [12] 3250 	mov	r2,a
      000C3A E4               [12] 3251 	clr	a
      000C3B 3E               [12] 3252 	addc	a,r6
      000C3C FB               [12] 3253 	mov	r3,a
      000C3D 8F 04            [24] 3254 	mov	ar4,r7
      000C3F 8A 82            [24] 3255 	mov	dpl,r2
      000C41 8B 83            [24] 3256 	mov	dph,r3
      000C43 8C F0            [24] 3257 	mov	b,r4
      000C45 74 64            [12] 3258 	mov	a,#0x64
      000C47 12r00r00         [24] 3259 	lcall	__gptrput
                                   3260 ;	src/main.c:640: add_crc_linefi_packet_packet(apcStr);
      000C4A 8D 82            [24] 3261 	mov	dpl,r5
      000C4C 8E 83            [24] 3262 	mov	dph,r6
      000C4E 8F F0            [24] 3263 	mov	b,r7
      000C50 C0 07            [24] 3264 	push	ar7
      000C52 C0 06            [24] 3265 	push	ar6
      000C54 C0 05            [24] 3266 	push	ar5
      000C56 12r00r00         [24] 3267 	lcall	_add_crc_linefi_packet_packet
      000C59 D0 05            [24] 3268 	pop	ar5
      000C5B D0 06            [24] 3269 	pop	ar6
      000C5D D0 07            [24] 3270 	pop	ar7
                                   3271 ;	src/main.c:641: send_linefi_packet(apcStr);
      000C5F 8D 82            [24] 3272 	mov	dpl,r5
      000C61 8E 83            [24] 3273 	mov	dph,r6
      000C63 8F F0            [24] 3274 	mov	b,r7
                                   3275 ;	src/main.c:642: }
      000C65 02r00r00         [24] 3276 	ljmp	_send_linefi_packet
                                   3277 ;------------------------------------------------------------
                                   3278 ;Allocation info for local variables in function 'send_ACK'
                                   3279 ;------------------------------------------------------------
                                   3280 ;send_apcStr               Allocated with name '_send_ACK_PARM_2'
                                   3281 ;received_apcStr           Allocated to registers r5 r6 r7 
                                   3282 ;slave_addr                Allocated with name '_send_ACK_slave_addr_65536_99'
                                   3283 ;------------------------------------------------------------
                                   3284 ;	src/main.c:643: void send_ACK(linefi_packet_t * received_apcStr, linefi_packet_t * send_apcStr)
                                   3285 ;	-----------------------------------------
                                   3286 ;	 function send_ACK
                                   3287 ;	-----------------------------------------
      000C68                       3288 _send_ACK:
      000C68 AD 82            [24] 3289 	mov	r5,dpl
      000C6A AE 83            [24] 3290 	mov	r6,dph
      000C6C AF F0            [24] 3291 	mov	r7,b
                                   3292 ;	src/main.c:645: UINT8 __xdata slave_addr = received_apcStr->u8Addr;
      000C6E 74 02            [12] 3293 	mov	a,#0x02
      000C70 2D               [12] 3294 	add	a,r5
      000C71 FA               [12] 3295 	mov	r2,a
      000C72 E4               [12] 3296 	clr	a
      000C73 3E               [12] 3297 	addc	a,r6
      000C74 FB               [12] 3298 	mov	r3,a
      000C75 8F 04            [24] 3299 	mov	ar4,r7
      000C77 8A 82            [24] 3300 	mov	dpl,r2
      000C79 8B 83            [24] 3301 	mov	dph,r3
      000C7B 8C F0            [24] 3302 	mov	b,r4
      000C7D 12r00r00         [24] 3303 	lcall	__gptrget
      000C80 FA               [12] 3304 	mov	r2,a
                                   3305 ;	src/main.c:646: send_apcStr->u8Ver = received_apcStr->u8Ver;
      000C81 A9*0F            [24] 3306 	mov	r1,_send_ACK_PARM_2
      000C83 AB*10            [24] 3307 	mov	r3,(_send_ACK_PARM_2 + 1)
      000C85 AC*11            [24] 3308 	mov	r4,(_send_ACK_PARM_2 + 2)
      000C87 8D 82            [24] 3309 	mov	dpl,r5
      000C89 8E 83            [24] 3310 	mov	dph,r6
      000C8B 8F F0            [24] 3311 	mov	b,r7
      000C8D 12r00r00         [24] 3312 	lcall	__gptrget
      000C90 89 82            [24] 3313 	mov	dpl,r1
      000C92 8B 83            [24] 3314 	mov	dph,r3
      000C94 8C F0            [24] 3315 	mov	b,r4
      000C96 12r00r00         [24] 3316 	lcall	__gptrput
                                   3317 ;	src/main.c:647: send_apcStr->u8Addr = slave_addr;
      000C99 74 02            [12] 3318 	mov	a,#0x02
      000C9B 29               [12] 3319 	add	a,r1
      000C9C FD               [12] 3320 	mov	r5,a
      000C9D E4               [12] 3321 	clr	a
      000C9E 3B               [12] 3322 	addc	a,r3
      000C9F FE               [12] 3323 	mov	r6,a
      000CA0 8C 07            [24] 3324 	mov	ar7,r4
      000CA2 8D 82            [24] 3325 	mov	dpl,r5
      000CA4 8E 83            [24] 3326 	mov	dph,r6
      000CA6 8F F0            [24] 3327 	mov	b,r7
      000CA8 EA               [12] 3328 	mov	a,r2
      000CA9 12r00r00         [24] 3329 	lcall	__gptrput
                                   3330 ;	src/main.c:648: add_crc_linefi_packet_packet(send_apcStr);
      000CAC 89 82            [24] 3331 	mov	dpl,r1
      000CAE 8B 83            [24] 3332 	mov	dph,r3
      000CB0 8C F0            [24] 3333 	mov	b,r4
      000CB2 12r00r00         [24] 3334 	lcall	_add_crc_linefi_packet_packet
                                   3335 ;	src/main.c:649: send_linefi_packet(send_apcStr);
      000CB5 85*0F 82         [24] 3336 	mov	dpl,_send_ACK_PARM_2
      000CB8 85*10 83         [24] 3337 	mov	dph,(_send_ACK_PARM_2 + 1)
      000CBB 85*11 F0         [24] 3338 	mov	b,(_send_ACK_PARM_2 + 2)
                                   3339 ;	src/main.c:650: }
      000CBE 02r00r00         [24] 3340 	ljmp	_send_linefi_packet
                                   3341 ;------------------------------------------------------------
                                   3342 ;Allocation info for local variables in function 'make_linefi_payload'
                                   3343 ;------------------------------------------------------------
                                   3344 ;au8ULTMode                Allocated with name '_make_linefi_payload_PARM_2'
                                   3345 ;au8ULTData                Allocated with name '_make_linefi_payload_PARM_3'
                                   3346 ;apu8Data                  Allocated with name '_make_linefi_payload_PARM_4'
                                   3347 ;au32LineFiUpSpeed         Allocated with name '_make_linefi_payload_au32LineFiUpSpeed_65536_100'
                                   3348 ;sloc0                     Allocated with name '_make_linefi_payload_sloc0_1_0'
                                   3349 ;------------------------------------------------------------
                                   3350 ;	src/main.c:652: void make_linefi_payload(UINT32 au32LineFiUpSpeed, UINT8 au8ULTMode, UINT8 au8ULTData, UINT8 *apu8Data)
                                   3351 ;	-----------------------------------------
                                   3352 ;	 function make_linefi_payload
                                   3353 ;	-----------------------------------------
      000CC1                       3354 _make_linefi_payload:
      000CC1 85 82*17         [24] 3355 	mov	_make_linefi_payload_au32LineFiUpSpeed_65536_100,dpl
      000CC4 85 83*18         [24] 3356 	mov	(_make_linefi_payload_au32LineFiUpSpeed_65536_100 + 1),dph
      000CC7 85 F0*19         [24] 3357 	mov	(_make_linefi_payload_au32LineFiUpSpeed_65536_100 + 2),b
      000CCA F5*1A            [12] 3358 	mov	(_make_linefi_payload_au32LineFiUpSpeed_65536_100 + 3),a
                                   3359 ;	src/main.c:654: apu8Data[0] = (au32LineFiUpSpeed>>16);
      000CCC A9*14            [24] 3360 	mov	r1,_make_linefi_payload_PARM_4
      000CCE AA*15            [24] 3361 	mov	r2,(_make_linefi_payload_PARM_4 + 1)
      000CD0 AB*16            [24] 3362 	mov	r3,(_make_linefi_payload_PARM_4 + 2)
      000CD2 A8*19            [24] 3363 	mov	r0,(_make_linefi_payload_au32LineFiUpSpeed_65536_100 + 2)
      000CD4 89 82            [24] 3364 	mov	dpl,r1
      000CD6 8A 83            [24] 3365 	mov	dph,r2
      000CD8 8B F0            [24] 3366 	mov	b,r3
      000CDA E8               [12] 3367 	mov	a,r0
      000CDB 12r00r00         [24] 3368 	lcall	__gptrput
                                   3369 ;	src/main.c:655: apu8Data[1] = (au32LineFiUpSpeed>>8);
      000CDE 74 01            [12] 3370 	mov	a,#0x01
      000CE0 29               [12] 3371 	add	a,r1
      000CE1 FD               [12] 3372 	mov	r5,a
      000CE2 E4               [12] 3373 	clr	a
      000CE3 3A               [12] 3374 	addc	a,r2
      000CE4 FE               [12] 3375 	mov	r6,a
      000CE5 8B 07            [24] 3376 	mov	ar7,r3
      000CE7 AC*18            [24] 3377 	mov	r4,(_make_linefi_payload_au32LineFiUpSpeed_65536_100 + 1)
      000CE9 8D 82            [24] 3378 	mov	dpl,r5
      000CEB 8E 83            [24] 3379 	mov	dph,r6
      000CED 8F F0            [24] 3380 	mov	b,r7
      000CEF EC               [12] 3381 	mov	a,r4
      000CF0 12r00r00         [24] 3382 	lcall	__gptrput
                                   3383 ;	src/main.c:656: apu8Data[2] = (au32LineFiUpSpeed>>0);
      000CF3 74 02            [12] 3384 	mov	a,#0x02
      000CF5 29               [12] 3385 	add	a,r1
      000CF6 F5*1B            [12] 3386 	mov	_make_linefi_payload_sloc0_1_0,a
      000CF8 E4               [12] 3387 	clr	a
      000CF9 3A               [12] 3388 	addc	a,r2
      000CFA F5*1C            [12] 3389 	mov	(_make_linefi_payload_sloc0_1_0 + 1),a
      000CFC 8B*1D            [24] 3390 	mov	(_make_linefi_payload_sloc0_1_0 + 2),r3
      000CFE AF*17            [24] 3391 	mov	r7,_make_linefi_payload_au32LineFiUpSpeed_65536_100
      000D00 85*1B 82         [24] 3392 	mov	dpl,_make_linefi_payload_sloc0_1_0
      000D03 85*1C 83         [24] 3393 	mov	dph,(_make_linefi_payload_sloc0_1_0 + 1)
      000D06 85*1D F0         [24] 3394 	mov	b,(_make_linefi_payload_sloc0_1_0 + 2)
      000D09 EF               [12] 3395 	mov	a,r7
      000D0A 12r00r00         [24] 3396 	lcall	__gptrput
                                   3397 ;	src/main.c:660: apu8Data[2]);
      000D0D 7E 00            [12] 3398 	mov	r6,#0x00
                                   3399 ;	src/main.c:659: apu8Data[1],
      000D0F 8C*1B            [24] 3400 	mov	_make_linefi_payload_sloc0_1_0,r4
                                   3401 ;	1-genFromRTrack replaced	mov	(_make_linefi_payload_sloc0_1_0 + 1),#0x00
      000D11 8E*1C            [24] 3402 	mov	(_make_linefi_payload_sloc0_1_0 + 1),r6
                                   3403 ;	src/main.c:658: apu8Data[0],
      000D13 7D 00            [12] 3404 	mov	r5,#0x00
                                   3405 ;	src/main.c:657: printf_fast_f("%lu(%x, %x, %x)\r\n", au32LineFiUpSpeed,
      000D15 C0 03            [24] 3406 	push	ar3
      000D17 C0 02            [24] 3407 	push	ar2
      000D19 C0 01            [24] 3408 	push	ar1
      000D1B C0 07            [24] 3409 	push	ar7
      000D1D C0 06            [24] 3410 	push	ar6
      000D1F C0*1B            [24] 3411 	push	_make_linefi_payload_sloc0_1_0
      000D21 C0*1C            [24] 3412 	push	(_make_linefi_payload_sloc0_1_0 + 1)
      000D23 C0 00            [24] 3413 	push	ar0
      000D25 C0 05            [24] 3414 	push	ar5
      000D27 C0*17            [24] 3415 	push	_make_linefi_payload_au32LineFiUpSpeed_65536_100
      000D29 C0*18            [24] 3416 	push	(_make_linefi_payload_au32LineFiUpSpeed_65536_100 + 1)
      000D2B C0*19            [24] 3417 	push	(_make_linefi_payload_au32LineFiUpSpeed_65536_100 + 2)
      000D2D C0*1A            [24] 3418 	push	(_make_linefi_payload_au32LineFiUpSpeed_65536_100 + 3)
      000D2F 74r7F            [12] 3419 	mov	a,#___str_56
      000D31 C0 E0            [24] 3420 	push	acc
      000D33 74s03            [12] 3421 	mov	a,#(___str_56 >> 8)
      000D35 C0 E0            [24] 3422 	push	acc
      000D37 12r00r00         [24] 3423 	lcall	_printf_fast_f
      000D3A E5 81            [12] 3424 	mov	a,sp
      000D3C 24 F4            [12] 3425 	add	a,#0xf4
      000D3E F5 81            [12] 3426 	mov	sp,a
      000D40 D0 01            [24] 3427 	pop	ar1
      000D42 D0 02            [24] 3428 	pop	ar2
      000D44 D0 03            [24] 3429 	pop	ar3
                                   3430 ;	src/main.c:661: apu8Data[3] = au8ULTMode;
      000D46 74 03            [12] 3431 	mov	a,#0x03
      000D48 29               [12] 3432 	add	a,r1
      000D49 FD               [12] 3433 	mov	r5,a
      000D4A E4               [12] 3434 	clr	a
      000D4B 3A               [12] 3435 	addc	a,r2
      000D4C FE               [12] 3436 	mov	r6,a
      000D4D 8B 07            [24] 3437 	mov	ar7,r3
      000D4F 8D 82            [24] 3438 	mov	dpl,r5
      000D51 8E 83            [24] 3439 	mov	dph,r6
      000D53 8F F0            [24] 3440 	mov	b,r7
      000D55 E5*12            [12] 3441 	mov	a,_make_linefi_payload_PARM_2
      000D57 12r00r00         [24] 3442 	lcall	__gptrput
                                   3443 ;	src/main.c:662: apu8Data[4] = au8ULTData;
      000D5A 74 04            [12] 3444 	mov	a,#0x04
      000D5C 29               [12] 3445 	add	a,r1
      000D5D F9               [12] 3446 	mov	r1,a
      000D5E E4               [12] 3447 	clr	a
      000D5F 3A               [12] 3448 	addc	a,r2
      000D60 FA               [12] 3449 	mov	r2,a
      000D61 89 82            [24] 3450 	mov	dpl,r1
      000D63 8A 83            [24] 3451 	mov	dph,r2
      000D65 8B F0            [24] 3452 	mov	b,r3
      000D67 E5*13            [12] 3453 	mov	a,_make_linefi_payload_PARM_3
                                   3454 ;	src/main.c:663: }
      000D69 02r00r00         [24] 3455 	ljmp	__gptrput
                                   3456 ;------------------------------------------------------------
                                   3457 ;Allocation info for local variables in function 'main'
                                   3458 ;------------------------------------------------------------
                                   3459 ;u8RxBufIdx                Allocated to registers 
                                   3460 ;u8Count2                  Allocated to registers 
                                   3461 ;u8RxPktCnt                Allocated to registers 
                                   3462 ;u8PreambleCnt             Allocated to registers 
                                   3463 ;i                         Allocated to registers r6 
                                   3464 ;u8RxUART                  Allocated with name '_main_u8RxUART_65536_103'
                                   3465 ;u8RxUART1                 Allocated with name '_main_u8RxUART1_65536_103'
                                   3466 ;u16Cnt                    Allocated with name '_main_u16Cnt_65536_103'
                                   3467 ;u8OutputState             Allocated with name '_main_u8OutputState_65536_103'
                                   3468 ;u8StateRxCSC              Allocated with name '_main_u8StateRxCSC_65536_103'
                                   3469 ;u8LineFiAddr              Allocated with name '_main_u8LineFiAddr_65536_103'
                                   3470 ;u8LineFiSpeed             Allocated with name '_main_u8LineFiSpeed_65536_103'
                                   3471 ;u8LineFiCmd               Allocated with name '_main_u8LineFiCmd_65536_103'
                                   3472 ;u8PwrOnFirstFlag          Allocated with name '_main_u8PwrOnFirstFlag_65536_103'
                                   3473 ;u8SwNum                   Allocated with name '_main_u8SwNum_65536_103'
                                   3474 ;u8StatePeriodicSend       Allocated with name '_main_u8StatePeriodicSend_65536_103'
                                   3475 ;u8PSCmd                   Allocated with name '_main_u8PSCmd_65536_103'
                                   3476 ;u8StateUart0InputMode     Allocated with name '_main_u8StateUart0InputMode_65536_103'
                                   3477 ;pcBuf                     Allocated with name '_main_pcBuf_65536_103'
                                   3478 ;pu8Data                   Allocated with name '_main_pu8Data_65536_103'
                                   3479 ;u8DataIdx                 Allocated with name '_main_u8DataIdx_65536_103'
                                   3480 ;ucBufIdx                  Allocated with name '_main_ucBufIdx_65536_103'
                                   3481 ;pstLineFiPkt              Allocated with name '_main_pstLineFiPkt_65536_103'
                                   3482 ;stLineFiPkt_test          Allocated with name '_main_stLineFiPkt_test_65536_103'
                                   3483 ;stLineFiPkt               Allocated with name '_main_stLineFiPkt_65536_103'
                                   3484 ;------------------------------------------------------------
                                   3485 ;	src/main.c:687: void main (void)
                                   3486 ;	-----------------------------------------
                                   3487 ;	 function main
                                   3488 ;	-----------------------------------------
      000D6C                       3489 _main:
                                   3490 ;	src/main.c:694: UINT8 __xdata u8LineFiAddr = 1;
      000D6C 90r00r99         [24] 3491 	mov	dptr,#_main_u8LineFiAddr_65536_103
      000D6F 74 01            [12] 3492 	mov	a,#0x01
      000D71 F0               [24] 3493 	movx	@dptr,a
                                   3494 ;	src/main.c:695: UINT8 __xdata u8LineFiSpeed = 5;
      000D72 90r00r9A         [24] 3495 	mov	dptr,#_main_u8LineFiSpeed_65536_103
      000D75 74 05            [12] 3496 	mov	a,#0x05
      000D77 F0               [24] 3497 	movx	@dptr,a
                                   3498 ;	src/main.c:696: UINT8 __xdata u8LineFiCmd = 1;
      000D78 90r00r9B         [24] 3499 	mov	dptr,#_main_u8LineFiCmd_65536_103
      000D7B 74 01            [12] 3500 	mov	a,#0x01
      000D7D F0               [24] 3501 	movx	@dptr,a
                                   3502 ;	src/main.c:697: UINT8 __xdata u8PwrOnFirstFlag = 1;
      000D7E 90r00r9C         [24] 3503 	mov	dptr,#_main_u8PwrOnFirstFlag_65536_103
      000D81 F0               [24] 3504 	movx	@dptr,a
                                   3505 ;	src/main.c:700: UINT8 __xdata u8StatePeriodicSend = STATE_PS_INIT;
      000D82 90r00r9E         [24] 3506 	mov	dptr,#_main_u8StatePeriodicSend_65536_103
      000D85 E4               [12] 3507 	clr	a
      000D86 F0               [24] 3508 	movx	@dptr,a
                                   3509 ;	src/main.c:701: UINT8 __xdata u8PSCmd = STATE_PS_INIT;
      000D87 90r00r9F         [24] 3510 	mov	dptr,#_main_u8PSCmd_65536_103
      000D8A F0               [24] 3511 	movx	@dptr,a
                                   3512 ;	src/main.c:704: uart0_input_mode_t __xdata u8StateUart0InputMode = UART0_INPUT_MODE8;
      000D8B 90r00rA0         [24] 3513 	mov	dptr,#_main_u8StateUart0InputMode_65536_103
      000D8E 74 08            [12] 3514 	mov	a,#0x08
      000D90 F0               [24] 3515 	movx	@dptr,a
                                   3516 ;	src/main.c:708: unsigned char __xdata pu8Data[MAX_DATA] = {0,0,0,0,0,0,0,0,0,0};
      000D91 90r00rD3         [24] 3517 	mov	dptr,#_main_pu8Data_65536_103
      000D94 E4               [12] 3518 	clr	a
      000D95 F0               [24] 3519 	movx	@dptr,a
      000D96 90r00rD4         [24] 3520 	mov	dptr,#(_main_pu8Data_65536_103 + 0x0001)
      000D99 F0               [24] 3521 	movx	@dptr,a
      000D9A 90r00rD5         [24] 3522 	mov	dptr,#(_main_pu8Data_65536_103 + 0x0002)
      000D9D F0               [24] 3523 	movx	@dptr,a
      000D9E 90r00rD6         [24] 3524 	mov	dptr,#(_main_pu8Data_65536_103 + 0x0003)
      000DA1 F0               [24] 3525 	movx	@dptr,a
      000DA2 90r00rD7         [24] 3526 	mov	dptr,#(_main_pu8Data_65536_103 + 0x0004)
      000DA5 F0               [24] 3527 	movx	@dptr,a
      000DA6 90r00rD8         [24] 3528 	mov	dptr,#(_main_pu8Data_65536_103 + 0x0005)
      000DA9 F0               [24] 3529 	movx	@dptr,a
      000DAA 90r00rD9         [24] 3530 	mov	dptr,#(_main_pu8Data_65536_103 + 0x0006)
      000DAD F0               [24] 3531 	movx	@dptr,a
      000DAE 90r00rDA         [24] 3532 	mov	dptr,#(_main_pu8Data_65536_103 + 0x0007)
      000DB1 F0               [24] 3533 	movx	@dptr,a
      000DB2 90r00rDB         [24] 3534 	mov	dptr,#(_main_pu8Data_65536_103 + 0x0008)
      000DB5 F0               [24] 3535 	movx	@dptr,a
      000DB6 90r00rDC         [24] 3536 	mov	dptr,#(_main_pu8Data_65536_103 + 0x0009)
      000DB9 F0               [24] 3537 	movx	@dptr,a
                                   3538 ;	src/main.c:709: unsigned char __xdata u8DataIdx = 0;
      000DBA 90r00rDD         [24] 3539 	mov	dptr,#_main_u8DataIdx_65536_103
      000DBD F0               [24] 3540 	movx	@dptr,a
                                   3541 ;	src/main.c:710: uint8  __xdata ucBufIdx = 0;
      000DBE 90r00rDE         [24] 3542 	mov	dptr,#_main_ucBufIdx_65536_103
      000DC1 F0               [24] 3543 	movx	@dptr,a
                                   3544 ;	src/main.c:712: linefi_packet_t __xdata pstLineFiPkt[] = {
      000DC2 90r00rDF         [24] 3545 	mov	dptr,#_main_pstLineFiPkt_65536_103
      000DC5 04               [12] 3546 	inc	a
      000DC6 F0               [24] 3547 	movx	@dptr,a
      000DC7 90r00rE0         [24] 3548 	mov	dptr,#(_main_pstLineFiPkt_65536_103 + 0x0001)
      000DCA 04               [12] 3549 	inc	a
      000DCB F0               [24] 3550 	movx	@dptr,a
      000DCC 90r00rE1         [24] 3551 	mov	dptr,#(_main_pstLineFiPkt_65536_103 + 0x0002)
      000DCF 14               [12] 3552 	dec	a
      000DD0 F0               [24] 3553 	movx	@dptr,a
      000DD1 90r00rE2         [24] 3554 	mov	dptr,#(_main_pstLineFiPkt_65536_103 + 0x0003)
      000DD4 74 0A            [12] 3555 	mov	a,#0x0a
      000DD6 F0               [24] 3556 	movx	@dptr,a
      000DD7 90r00rE3         [24] 3557 	mov	dptr,#(_main_pstLineFiPkt_65536_103 + 0x0004)
      000DDA 03               [12] 3558 	rr	a
      000DDB F0               [24] 3559 	movx	@dptr,a
      000DDC 90r00rE4         [24] 3560 	mov	dptr,#(_main_pstLineFiPkt_65536_103 + 0x0005)
      000DDF 74r1B            [12] 3561 	mov	a,#_gpu8Data
      000DE1 F0               [24] 3562 	movx	@dptr,a
      000DE2 74s00            [12] 3563 	mov	a,#(_gpu8Data >> 8)
      000DE4 A3               [24] 3564 	inc	dptr
      000DE5 F0               [24] 3565 	movx	@dptr,a
      000DE6 E4               [12] 3566 	clr	a
      000DE7 A3               [24] 3567 	inc	dptr
      000DE8 F0               [24] 3568 	movx	@dptr,a
      000DE9 90r00rE7         [24] 3569 	mov	dptr,#(_main_pstLineFiPkt_65536_103 + 0x0008)
      000DEC 04               [12] 3570 	inc	a
      000DED F0               [24] 3571 	movx	@dptr,a
      000DEE 90r00rE8         [24] 3572 	mov	dptr,#(_main_pstLineFiPkt_65536_103 + 0x0009)
      000DF1 04               [12] 3573 	inc	a
      000DF2 F0               [24] 3574 	movx	@dptr,a
      000DF3 90r00rE9         [24] 3575 	mov	dptr,#(_main_pstLineFiPkt_65536_103 + 0x000a)
      000DF6 F0               [24] 3576 	movx	@dptr,a
      000DF7 90r00rEA         [24] 3577 	mov	dptr,#(_main_pstLineFiPkt_65536_103 + 0x000b)
      000DFA 74 0A            [12] 3578 	mov	a,#0x0a
      000DFC F0               [24] 3579 	movx	@dptr,a
      000DFD 90r00rEB         [24] 3580 	mov	dptr,#(_main_pstLineFiPkt_65536_103 + 0x000c)
      000E00 03               [12] 3581 	rr	a
      000E01 F0               [24] 3582 	movx	@dptr,a
      000E02 90r00rEC         [24] 3583 	mov	dptr,#(_main_pstLineFiPkt_65536_103 + 0x000d)
      000E05 74r1B            [12] 3584 	mov	a,#_gpu8Data
      000E07 F0               [24] 3585 	movx	@dptr,a
      000E08 74s00            [12] 3586 	mov	a,#(_gpu8Data >> 8)
      000E0A A3               [24] 3587 	inc	dptr
      000E0B F0               [24] 3588 	movx	@dptr,a
      000E0C E4               [12] 3589 	clr	a
      000E0D A3               [24] 3590 	inc	dptr
      000E0E F0               [24] 3591 	movx	@dptr,a
      000E0F 90r00rEF         [24] 3592 	mov	dptr,#(_main_pstLineFiPkt_65536_103 + 0x0010)
      000E12 04               [12] 3593 	inc	a
      000E13 F0               [24] 3594 	movx	@dptr,a
      000E14 90r00rF0         [24] 3595 	mov	dptr,#(_main_pstLineFiPkt_65536_103 + 0x0011)
      000E17 04               [12] 3596 	inc	a
      000E18 F0               [24] 3597 	movx	@dptr,a
      000E19 90r00rF1         [24] 3598 	mov	dptr,#(_main_pstLineFiPkt_65536_103 + 0x0012)
      000E1C 04               [12] 3599 	inc	a
      000E1D F0               [24] 3600 	movx	@dptr,a
      000E1E 90r00rF2         [24] 3601 	mov	dptr,#(_main_pstLineFiPkt_65536_103 + 0x0013)
      000E21 74 0A            [12] 3602 	mov	a,#0x0a
      000E23 F0               [24] 3603 	movx	@dptr,a
      000E24 90r00rF3         [24] 3604 	mov	dptr,#(_main_pstLineFiPkt_65536_103 + 0x0014)
      000E27 03               [12] 3605 	rr	a
      000E28 F0               [24] 3606 	movx	@dptr,a
      000E29 90r00rF4         [24] 3607 	mov	dptr,#(_main_pstLineFiPkt_65536_103 + 0x0015)
      000E2C 74r1B            [12] 3608 	mov	a,#_gpu8Data
      000E2E F0               [24] 3609 	movx	@dptr,a
      000E2F 74s00            [12] 3610 	mov	a,#(_gpu8Data >> 8)
      000E31 A3               [24] 3611 	inc	dptr
      000E32 F0               [24] 3612 	movx	@dptr,a
      000E33 E4               [12] 3613 	clr	a
      000E34 A3               [24] 3614 	inc	dptr
      000E35 F0               [24] 3615 	movx	@dptr,a
      000E36 90r00rF7         [24] 3616 	mov	dptr,#(_main_pstLineFiPkt_65536_103 + 0x0018)
      000E39 04               [12] 3617 	inc	a
      000E3A F0               [24] 3618 	movx	@dptr,a
      000E3B 90r00rF8         [24] 3619 	mov	dptr,#(_main_pstLineFiPkt_65536_103 + 0x0019)
      000E3E 04               [12] 3620 	inc	a
      000E3F F0               [24] 3621 	movx	@dptr,a
      000E40 90r00rF9         [24] 3622 	mov	dptr,#(_main_pstLineFiPkt_65536_103 + 0x001a)
      000E43 23               [12] 3623 	rl	a
      000E44 F0               [24] 3624 	movx	@dptr,a
      000E45 90r00rFA         [24] 3625 	mov	dptr,#(_main_pstLineFiPkt_65536_103 + 0x001b)
      000E48 74 0A            [12] 3626 	mov	a,#0x0a
      000E4A F0               [24] 3627 	movx	@dptr,a
      000E4B 90r00rFB         [24] 3628 	mov	dptr,#(_main_pstLineFiPkt_65536_103 + 0x001c)
      000E4E 03               [12] 3629 	rr	a
      000E4F F0               [24] 3630 	movx	@dptr,a
      000E50 90r00rFC         [24] 3631 	mov	dptr,#(_main_pstLineFiPkt_65536_103 + 0x001d)
      000E53 74r1B            [12] 3632 	mov	a,#_gpu8Data
      000E55 F0               [24] 3633 	movx	@dptr,a
      000E56 74s00            [12] 3634 	mov	a,#(_gpu8Data >> 8)
      000E58 A3               [24] 3635 	inc	dptr
      000E59 F0               [24] 3636 	movx	@dptr,a
      000E5A E4               [12] 3637 	clr	a
      000E5B A3               [24] 3638 	inc	dptr
      000E5C F0               [24] 3639 	movx	@dptr,a
      000E5D 90r00rFF         [24] 3640 	mov	dptr,#(_main_pstLineFiPkt_65536_103 + 0x0020)
      000E60 04               [12] 3641 	inc	a
      000E61 F0               [24] 3642 	movx	@dptr,a
      000E62 90r01r00         [24] 3643 	mov	dptr,#(_main_pstLineFiPkt_65536_103 + 0x0021)
      000E65 04               [12] 3644 	inc	a
      000E66 F0               [24] 3645 	movx	@dptr,a
      000E67 90r01r01         [24] 3646 	mov	dptr,#(_main_pstLineFiPkt_65536_103 + 0x0022)
      000E6A 74 05            [12] 3647 	mov	a,#0x05
      000E6C F0               [24] 3648 	movx	@dptr,a
      000E6D 90r01r02         [24] 3649 	mov	dptr,#(_main_pstLineFiPkt_65536_103 + 0x0023)
      000E70 23               [12] 3650 	rl	a
      000E71 F0               [24] 3651 	movx	@dptr,a
      000E72 90r01r03         [24] 3652 	mov	dptr,#(_main_pstLineFiPkt_65536_103 + 0x0024)
      000E75 03               [12] 3653 	rr	a
      000E76 F0               [24] 3654 	movx	@dptr,a
      000E77 90r01r04         [24] 3655 	mov	dptr,#(_main_pstLineFiPkt_65536_103 + 0x0025)
      000E7A 74r1B            [12] 3656 	mov	a,#_gpu8Data
      000E7C F0               [24] 3657 	movx	@dptr,a
      000E7D 74s00            [12] 3658 	mov	a,#(_gpu8Data >> 8)
      000E7F A3               [24] 3659 	inc	dptr
      000E80 F0               [24] 3660 	movx	@dptr,a
      000E81 E4               [12] 3661 	clr	a
      000E82 A3               [24] 3662 	inc	dptr
      000E83 F0               [24] 3663 	movx	@dptr,a
                                   3664 ;	src/main.c:720: linefi_packet_t __xdata stLineFiPkt_test = { // For sending periodic packet
      000E84 90r01r07         [24] 3665 	mov	dptr,#_main_stLineFiPkt_test_65536_103
      000E87 04               [12] 3666 	inc	a
      000E88 F0               [24] 3667 	movx	@dptr,a
      000E89 90r01r08         [24] 3668 	mov	dptr,#(_main_stLineFiPkt_test_65536_103 + 0x0001)
      000E8C 74 07            [12] 3669 	mov	a,#0x07
      000E8E F0               [24] 3670 	movx	@dptr,a
      000E8F 90r01r09         [24] 3671 	mov	dptr,#(_main_stLineFiPkt_test_65536_103 + 0x0002)
      000E92 74 01            [12] 3672 	mov	a,#0x01
      000E94 F0               [24] 3673 	movx	@dptr,a
      000E95 90r01r0A         [24] 3674 	mov	dptr,#(_main_stLineFiPkt_test_65536_103 + 0x0003)
      000E98 C4               [12] 3675 	swap	a
      000E99 F0               [24] 3676 	movx	@dptr,a
      000E9A 90r01r0B         [24] 3677 	mov	dptr,#(_main_stLineFiPkt_test_65536_103 + 0x0004)
      000E9D 74 FF            [12] 3678 	mov	a,#0xff
      000E9F F0               [24] 3679 	movx	@dptr,a
      000EA0 90r01r0C         [24] 3680 	mov	dptr,#(_main_stLineFiPkt_test_65536_103 + 0x0005)
      000EA3 74r2F            [12] 3681 	mov	a,#_gpu8Data2
      000EA5 F0               [24] 3682 	movx	@dptr,a
      000EA6 74s00            [12] 3683 	mov	a,#(_gpu8Data2 >> 8)
      000EA8 A3               [24] 3684 	inc	dptr
      000EA9 F0               [24] 3685 	movx	@dptr,a
      000EAA E4               [12] 3686 	clr	a
      000EAB A3               [24] 3687 	inc	dptr
      000EAC F0               [24] 3688 	movx	@dptr,a
                                   3689 ;	src/main.c:728: linefi_packet_t __xdata stLineFiPkt = {
      000EAD 90r01r0F         [24] 3690 	mov	dptr,#_main_stLineFiPkt_65536_103
      000EB0 04               [12] 3691 	inc	a
      000EB1 F0               [24] 3692 	movx	@dptr,a
      000EB2 90r01r10         [24] 3693 	mov	dptr,#(_main_stLineFiPkt_65536_103 + 0x0001)
      000EB5 74 64            [12] 3694 	mov	a,#0x64
      000EB7 F0               [24] 3695 	movx	@dptr,a
      000EB8 90r01r11         [24] 3696 	mov	dptr,#(_main_stLineFiPkt_65536_103 + 0x0002)
      000EBB 74 01            [12] 3697 	mov	a,#0x01
      000EBD F0               [24] 3698 	movx	@dptr,a
      000EBE 90r01r12         [24] 3699 	mov	dptr,#(_main_stLineFiPkt_65536_103 + 0x0003)
      000EC1 C4               [12] 3700 	swap	a
      000EC2 F0               [24] 3701 	movx	@dptr,a
      000EC3 90r01r13         [24] 3702 	mov	dptr,#(_main_stLineFiPkt_65536_103 + 0x0004)
      000EC6 74 05            [12] 3703 	mov	a,#0x05
      000EC8 F0               [24] 3704 	movx	@dptr,a
      000EC9 90r01r14         [24] 3705 	mov	dptr,#(_main_stLineFiPkt_65536_103 + 0x0005)
      000ECC 74r1B            [12] 3706 	mov	a,#_gpu8Data
      000ECE F0               [24] 3707 	movx	@dptr,a
      000ECF 74s00            [12] 3708 	mov	a,#(_gpu8Data >> 8)
      000ED1 A3               [24] 3709 	inc	dptr
      000ED2 F0               [24] 3710 	movx	@dptr,a
      000ED3 E4               [12] 3711 	clr	a
      000ED4 A3               [24] 3712 	inc	dptr
      000ED5 F0               [24] 3713 	movx	@dptr,a
                                   3714 ;	src/main.c:737: gpio_setup();
      000ED6 12r03r27         [24] 3715 	lcall	_gpio_setup
                                   3716 ;	src/main.c:738: uart_setup();
      000ED9 12r00r00         [24] 3717 	lcall	_uart_setup
                                   3718 ;	src/main.c:740: MODIFY_HIRC_166();
      000EDC 12r01rAD         [24] 3719 	lcall	_MODIFY_HIRC_166
                                   3720 ;	src/main.c:742: clr_T0M;// 16/12 MHz
      000EDF 53 8E F7         [24] 3721 	anl	_CKCON,#0xf7
                                   3722 ;	src/main.c:745: set_ET0;                                    //enable Timer0 interrupt
                                   3723 ;	assignBit
      000EE2 D2 A9            [12] 3724 	setb	_ET0
                                   3725 ;	src/main.c:746: set_TR0;                                    //Timer0 run
                                   3726 ;	assignBit
      000EE4 D2 8C            [12] 3727 	setb	_TR0
                                   3728 ;	src/main.c:748: gu8UART = 0;
      000EE6 75*00 00         [24] 3729 	mov	_gu8UART,#0x00
                                   3730 ;	src/main.c:749: printf_fast_f("This is UART0\n\r");
      000EE9 74r91            [12] 3731 	mov	a,#___str_57
      000EEB C0 E0            [24] 3732 	push	acc
      000EED 74s03            [12] 3733 	mov	a,#(___str_57 >> 8)
      000EEF C0 E0            [24] 3734 	push	acc
      000EF1 12r00r00         [24] 3735 	lcall	_printf_fast_f
      000EF4 15 81            [12] 3736 	dec	sp
      000EF6 15 81            [12] 3737 	dec	sp
                                   3738 ;	src/main.c:750: printf_fast_f("LineFi Master\n\r");
      000EF8 74rA1            [12] 3739 	mov	a,#___str_58
      000EFA C0 E0            [24] 3740 	push	acc
      000EFC 74s03            [12] 3741 	mov	a,#(___str_58 >> 8)
      000EFE C0 E0            [24] 3742 	push	acc
      000F00 12r00r00         [24] 3743 	lcall	_printf_fast_f
      000F03 15 81            [12] 3744 	dec	sp
      000F05 15 81            [12] 3745 	dec	sp
                                   3746 ;	src/main.c:751: gu8UART = 1;
      000F07 75*00 01         [24] 3747 	mov	_gu8UART,#0x01
                                   3748 ;	src/main.c:752: printf_fast_f("This is UART1\n\r");
      000F0A 74rB1            [12] 3749 	mov	a,#___str_59
      000F0C C0 E0            [24] 3750 	push	acc
      000F0E 74s03            [12] 3751 	mov	a,#(___str_59 >> 8)
      000F10 C0 E0            [24] 3752 	push	acc
      000F12 12r00r00         [24] 3753 	lcall	_printf_fast_f
      000F15 15 81            [12] 3754 	dec	sp
      000F17 15 81            [12] 3755 	dec	sp
                                   3756 ;	src/main.c:759: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000F19 7E 30            [12] 3757 	mov	r6,#0x30
      000F1B 7F 75            [12] 3758 	mov	r7,#0x75
      000F1D                       3759 00255$:
                                   3760 ;	src/main.c:760: nop; nop; nop; nop; nop;
      000F1D 00               [12] 3761 	NOP
      000F1E 00               [12] 3762 	NOP
      000F1F 00               [12] 3763 	NOP
      000F20 00               [12] 3764 	NOP
      000F21 00               [12] 3765 	NOP
      000F22 1E               [12] 3766 	dec	r6
      000F23 BE FF 01         [24] 3767 	cjne	r6,#0xff,00599$
      000F26 1F               [12] 3768 	dec	r7
      000F27                       3769 00599$:
                                   3770 ;	src/main.c:759: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000F27 EE               [12] 3771 	mov	a,r6
      000F28 4F               [12] 3772 	orl	a,r7
      000F29 70 F2            [24] 3773 	jnz	00255$
                                   3774 ;	src/main.c:762: LINEFI_TX = 1;
                                   3775 ;	assignBit
      000F2B D2 96            [12] 3776 	setb	_P16
                                   3777 ;	src/main.c:763: gu8UART = 0;
      000F2D 75*00 00         [24] 3778 	mov	_gu8UART,#0x00
                                   3779 ;	src/main.c:770: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000F30 7E 30            [12] 3780 	mov	r6,#0x30
      000F32 7F 75            [12] 3781 	mov	r7,#0x75
      000F34                       3782 00258$:
                                   3783 ;	src/main.c:771: nop; nop; nop; nop; nop;
      000F34 00               [12] 3784 	NOP
      000F35 00               [12] 3785 	NOP
      000F36 00               [12] 3786 	NOP
      000F37 00               [12] 3787 	NOP
      000F38 00               [12] 3788 	NOP
      000F39 1E               [12] 3789 	dec	r6
      000F3A BE FF 01         [24] 3790 	cjne	r6,#0xff,00601$
      000F3D 1F               [12] 3791 	dec	r7
      000F3E                       3792 00601$:
                                   3793 ;	src/main.c:770: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000F3E EE               [12] 3794 	mov	a,r6
      000F3F 4F               [12] 3795 	orl	a,r7
      000F40 70 F2            [24] 3796 	jnz	00258$
                                   3797 ;	src/main.c:774: InitialUART1_Timer3(gpu32UartSpeed[LINEFI_DEFAULT_RATE_IDX]);
      000F42 90r00r71         [24] 3798 	mov	dptr,#(_gpu32UartSpeed + 0x0014)
      000F45 E0               [24] 3799 	movx	a,@dptr
      000F46 FC               [12] 3800 	mov	r4,a
      000F47 A3               [24] 3801 	inc	dptr
      000F48 E0               [24] 3802 	movx	a,@dptr
      000F49 FD               [12] 3803 	mov	r5,a
      000F4A A3               [24] 3804 	inc	dptr
      000F4B E0               [24] 3805 	movx	a,@dptr
      000F4C FE               [12] 3806 	mov	r6,a
      000F4D A3               [24] 3807 	inc	dptr
      000F4E E0               [24] 3808 	movx	a,@dptr
      000F4F 8C 82            [24] 3809 	mov	dpl,r4
      000F51 8D 83            [24] 3810 	mov	dph,r5
      000F53 8E F0            [24] 3811 	mov	b,r6
      000F55 12r00r00         [24] 3812 	lcall	_InitialUART1_Timer3
                                   3813 ;	src/main.c:776: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000F58 7E 30            [12] 3814 	mov	r6,#0x30
      000F5A 7F 75            [12] 3815 	mov	r7,#0x75
      000F5C                       3816 00261$:
                                   3817 ;	src/main.c:777: nop; nop; nop; nop; nop;
      000F5C 00               [12] 3818 	NOP
      000F5D 00               [12] 3819 	NOP
      000F5E 00               [12] 3820 	NOP
      000F5F 00               [12] 3821 	NOP
      000F60 00               [12] 3822 	NOP
      000F61 1E               [12] 3823 	dec	r6
      000F62 BE FF 01         [24] 3824 	cjne	r6,#0xff,00603$
      000F65 1F               [12] 3825 	dec	r7
      000F66                       3826 00603$:
                                   3827 ;	src/main.c:776: for (u16Cnt = 0 ; u16Cnt < 30000; u16Cnt++) {
      000F66 EE               [12] 3828 	mov	a,r6
      000F67 4F               [12] 3829 	orl	a,r7
      000F68 70 F2            [24] 3830 	jnz	00261$
                                   3831 ;	src/main.c:779: LINEFI_TX = 1;
                                   3832 ;	assignBit
      000F6A D2 96            [12] 3833 	setb	_P16
                                   3834 ;	src/main.c:781: printf("%s\r\n", gcUartInputMode[u8StateUart0InputMode]);
      000F6C 90r00r18         [24] 3835 	mov	dptr,#(_gcUartInputMode + 0x0018)
      000F6F E0               [24] 3836 	movx	a,@dptr
      000F70 FD               [12] 3837 	mov	r5,a
      000F71 A3               [24] 3838 	inc	dptr
      000F72 E0               [24] 3839 	movx	a,@dptr
      000F73 FE               [12] 3840 	mov	r6,a
      000F74 A3               [24] 3841 	inc	dptr
      000F75 E0               [24] 3842 	movx	a,@dptr
      000F76 FF               [12] 3843 	mov	r7,a
      000F77 C0 05            [24] 3844 	push	ar5
      000F79 C0 06            [24] 3845 	push	ar6
      000F7B C0 07            [24] 3846 	push	ar7
      000F7D 74rC1            [12] 3847 	mov	a,#___str_60
      000F7F C0 E0            [24] 3848 	push	acc
      000F81 74s03            [12] 3849 	mov	a,#(___str_60 >> 8)
      000F83 C0 E0            [24] 3850 	push	acc
      000F85 74 80            [12] 3851 	mov	a,#0x80
      000F87 C0 E0            [24] 3852 	push	acc
      000F89 12r00r00         [24] 3853 	lcall	_printf
      000F8C E5 81            [12] 3854 	mov	a,sp
      000F8E 24 FA            [12] 3855 	add	a,#0xfa
      000F90 F5 81            [12] 3856 	mov	sp,a
                                   3857 ;	src/main.c:782: LINEFI_EN0 = 1;
                                   3858 ;	assignBit
      000F92 D2 90            [12] 3859 	setb	_P10
                                   3860 ;	src/main.c:783: LINEFI_EN1 = 0;
                                   3861 ;	assignBit
      000F94 C2 91            [12] 3862 	clr	_P11
                                   3863 ;	src/main.c:784: LINEFI_EN2 = 0;
                                   3864 ;	assignBit
      000F96 C2 92            [12] 3865 	clr	_P12
                                   3866 ;	src/main.c:786: while(1) {
      000F98                       3867 00251$:
                                   3868 ;	src/main.c:790: if (getchar_uart0(&u8RxUART)) { // 유아트 입력이 있을 때
      000F98 90r00r97         [24] 3869 	mov	dptr,#_main_u8RxUART_65536_103
      000F9B 75 F0 00         [24] 3870 	mov	b,#0x00
      000F9E 12r00r00         [24] 3871 	lcall	_getchar_uart0
      000FA1 E5 82            [12] 3872 	mov	a,dpl
      000FA3 70 03            [24] 3873 	jnz	00605$
      000FA5 02r15rB3         [24] 3874 	ljmp	00199$
      000FA8                       3875 00605$:
                                   3876 ;	src/main.c:792: switch(u8RxUART) {
      000FA8 90r00r97         [24] 3877 	mov	dptr,#_main_u8RxUART_65536_103
      000FAB E0               [24] 3878 	movx	a,@dptr
      000FAC FF               [12] 3879 	mov	r7,a
      000FAD BF 1B 02         [24] 3880 	cjne	r7,#0x1b,00606$
      000FB0 80 0D            [24] 3881 	sjmp	00104$
      000FB2                       3882 00606$:
      000FB2 BF 1C 02         [24] 3883 	cjne	r7,#0x1c,00607$
      000FB5 80 51            [24] 3884 	sjmp	00108$
      000FB7                       3885 00607$:
      000FB7 BF 1D 02         [24] 3886 	cjne	r7,#0x1d,00608$
      000FBA 80 4C            [24] 3887 	sjmp	00108$
      000FBC                       3888 00608$:
      000FBC 02r10r51         [24] 3889 	ljmp	00111$
                                   3890 ;	src/main.c:793: case KEY_ESC :
      000FBF                       3891 00104$:
                                   3892 ;	src/main.c:794: u8StateUart0InputMode++;
      000FBF 90r00rA0         [24] 3893 	mov	dptr,#_main_u8StateUart0InputMode_65536_103
      000FC2 E0               [24] 3894 	movx	a,@dptr
      000FC3 24 01            [12] 3895 	add	a,#0x01
      000FC5 F0               [24] 3896 	movx	@dptr,a
                                   3897 ;	src/main.c:795: if (u8StateUart0InputMode == MAX_STATE_UART0_INPUT) {
      000FC6 E0               [24] 3898 	movx	a,@dptr
      000FC7 FE               [12] 3899 	mov	r6,a
      000FC8 BE 09 05         [24] 3900 	cjne	r6,#0x09,00106$
                                   3901 ;	src/main.c:796: u8StateUart0InputMode = 0;
      000FCB 90r00rA0         [24] 3902 	mov	dptr,#_main_u8StateUart0InputMode_65536_103
      000FCE E4               [12] 3903 	clr	a
      000FCF F0               [24] 3904 	movx	@dptr,a
      000FD0                       3905 00106$:
                                   3906 ;	src/main.c:798: printf("%s\r\n", gcUartInputMode[u8StateUart0InputMode]);
      000FD0 90r00rA0         [24] 3907 	mov	dptr,#_main_u8StateUart0InputMode_65536_103
      000FD3 E0               [24] 3908 	movx	a,@dptr
      000FD4 75 F0 03         [24] 3909 	mov	b,#0x03
      000FD7 A4               [48] 3910 	mul	ab
      000FD8 24r00            [12] 3911 	add	a,#_gcUartInputMode
      000FDA F5 82            [12] 3912 	mov	dpl,a
      000FDC 74s00            [12] 3913 	mov	a,#(_gcUartInputMode >> 8)
      000FDE 35 F0            [12] 3914 	addc	a,b
      000FE0 F5 83            [12] 3915 	mov	dph,a
      000FE2 E0               [24] 3916 	movx	a,@dptr
      000FE3 FC               [12] 3917 	mov	r4,a
      000FE4 A3               [24] 3918 	inc	dptr
      000FE5 E0               [24] 3919 	movx	a,@dptr
      000FE6 FD               [12] 3920 	mov	r5,a
      000FE7 A3               [24] 3921 	inc	dptr
      000FE8 E0               [24] 3922 	movx	a,@dptr
      000FE9 FE               [12] 3923 	mov	r6,a
      000FEA C0 04            [24] 3924 	push	ar4
      000FEC C0 05            [24] 3925 	push	ar5
      000FEE C0 06            [24] 3926 	push	ar6
      000FF0 74rC1            [12] 3927 	mov	a,#___str_60
      000FF2 C0 E0            [24] 3928 	push	acc
      000FF4 74s03            [12] 3929 	mov	a,#(___str_60 >> 8)
      000FF6 C0 E0            [24] 3930 	push	acc
      000FF8 74 80            [12] 3931 	mov	a,#0x80
      000FFA C0 E0            [24] 3932 	push	acc
      000FFC 12r00r00         [24] 3933 	lcall	_printf
      000FFF E5 81            [12] 3934 	mov	a,sp
      001001 24 FA            [12] 3935 	add	a,#0xfa
      001003 F5 81            [12] 3936 	mov	sp,a
                                   3937 ;	src/main.c:799: break;
      001005 02r15rF7         [24] 3938 	ljmp	00200$
                                   3939 ;	src/main.c:801: case KEY_29 :
      001008                       3940 00108$:
                                   3941 ;	src/main.c:802: u8StateUart0InputMode--;
      001008 90r00rA0         [24] 3942 	mov	dptr,#_main_u8StateUart0InputMode_65536_103
      00100B E0               [24] 3943 	movx	a,@dptr
      00100C 14               [12] 3944 	dec	a
      00100D F0               [24] 3945 	movx	@dptr,a
                                   3946 ;	src/main.c:803: if (u8StateUart0InputMode == 255) {
      00100E E0               [24] 3947 	movx	a,@dptr
      00100F FE               [12] 3948 	mov	r6,a
      001010 BE FF 06         [24] 3949 	cjne	r6,#0xff,00110$
                                   3950 ;	src/main.c:804: u8StateUart0InputMode = MAX_STATE_UART0_INPUT-1;
      001013 90r00rA0         [24] 3951 	mov	dptr,#_main_u8StateUart0InputMode_65536_103
      001016 74 08            [12] 3952 	mov	a,#0x08
      001018 F0               [24] 3953 	movx	@dptr,a
      001019                       3954 00110$:
                                   3955 ;	src/main.c:806: printf("%s\r\n", gcUartInputMode[u8StateUart0InputMode]);
      001019 90r00rA0         [24] 3956 	mov	dptr,#_main_u8StateUart0InputMode_65536_103
      00101C E0               [24] 3957 	movx	a,@dptr
      00101D 75 F0 03         [24] 3958 	mov	b,#0x03
      001020 A4               [48] 3959 	mul	ab
      001021 24r00            [12] 3960 	add	a,#_gcUartInputMode
      001023 F5 82            [12] 3961 	mov	dpl,a
      001025 74s00            [12] 3962 	mov	a,#(_gcUartInputMode >> 8)
      001027 35 F0            [12] 3963 	addc	a,b
      001029 F5 83            [12] 3964 	mov	dph,a
      00102B E0               [24] 3965 	movx	a,@dptr
      00102C FC               [12] 3966 	mov	r4,a
      00102D A3               [24] 3967 	inc	dptr
      00102E E0               [24] 3968 	movx	a,@dptr
      00102F FD               [12] 3969 	mov	r5,a
      001030 A3               [24] 3970 	inc	dptr
      001031 E0               [24] 3971 	movx	a,@dptr
      001032 FE               [12] 3972 	mov	r6,a
      001033 C0 04            [24] 3973 	push	ar4
      001035 C0 05            [24] 3974 	push	ar5
      001037 C0 06            [24] 3975 	push	ar6
      001039 74rC1            [12] 3976 	mov	a,#___str_60
      00103B C0 E0            [24] 3977 	push	acc
      00103D 74s03            [12] 3978 	mov	a,#(___str_60 >> 8)
      00103F C0 E0            [24] 3979 	push	acc
      001041 74 80            [12] 3980 	mov	a,#0x80
      001043 C0 E0            [24] 3981 	push	acc
      001045 12r00r00         [24] 3982 	lcall	_printf
      001048 E5 81            [12] 3983 	mov	a,sp
      00104A 24 FA            [12] 3984 	add	a,#0xfa
      00104C F5 81            [12] 3985 	mov	sp,a
                                   3986 ;	src/main.c:807: break;
      00104E 02r15rF7         [24] 3987 	ljmp	00200$
                                   3988 ;	src/main.c:809: default :
      001051                       3989 00111$:
                                   3990 ;	src/main.c:810: switch(u8StateUart0InputMode) {
      001051 90r00rA0         [24] 3991 	mov	dptr,#_main_u8StateUart0InputMode_65536_103
      001054 E0               [24] 3992 	movx	a,@dptr
      001055 FE               [12] 3993 	mov  r6,a
      001056 24 F7            [12] 3994 	add	a,#0xff - 0x08
      001058 50 03            [24] 3995 	jnc	00613$
      00105A 02r15rF7         [24] 3996 	ljmp	00200$
      00105D                       3997 00613$:
      00105D EE               [12] 3998 	mov	a,r6
      00105E 24 0A            [12] 3999 	add	a,#(00614$-3-.)
      001060 83               [24] 4000 	movc	a,@a+pc
      001061 F5 82            [12] 4001 	mov	dpl,a
      001063 EE               [12] 4002 	mov	a,r6
      001064 24 0D            [12] 4003 	add	a,#(00615$-3-.)
      001066 83               [24] 4004 	movc	a,@a+pc
      001067 F5 83            [12] 4005 	mov	dph,a
      001069 E4               [12] 4006 	clr	a
      00106A 73               [24] 4007 	jmp	@a+dptr
      00106B                       4008 00614$:
      00106Br7D                    4009 	.db	00112$
      00106Cr97                    4010 	.db	00113$
      00106DrB4                    4011 	.db	00114$
      00106ErAF                    4012 	.db	00135$
      00106Fr92                    4013 	.db	00151$
      001070rCB                    4014 	.db	00155$
      001071r5C                    4015 	.db	00176$
      001072r78                    4016 	.db	00177$
      001073rF7                    4017 	.db	00200$
      001074                       4018 00615$:
      001074s10                    4019 	.db	00112$>>8
      001075s10                    4020 	.db	00113$>>8
      001076s10                    4021 	.db	00114$>>8
      001077s11                    4022 	.db	00135$>>8
      001078s12                    4023 	.db	00151$>>8
      001079s12                    4024 	.db	00155$>>8
      00107As15                    4025 	.db	00176$>>8
      00107Bs15                    4026 	.db	00177$>>8
      00107Cs15                    4027 	.db	00200$>>8
                                   4028 ;	src/main.c:811: case UART0_INPUT_MODE0 :
      00107D                       4029 00112$:
                                   4030 ;	src/main.c:812: act_by_one_key(u8RxUART, &u8LineFiCmd, &u8LineFiAddr);
      00107D 75*06r9B         [24] 4031 	mov	_act_by_one_key_PARM_2,#_main_u8LineFiCmd_65536_103
      001080 75*07s00         [24] 4032 	mov	(_act_by_one_key_PARM_2 + 1),#(_main_u8LineFiCmd_65536_103 >> 8)
      001083 75*08 00         [24] 4033 	mov	(_act_by_one_key_PARM_2 + 2),#0x00
      001086 75*09r99         [24] 4034 	mov	_act_by_one_key_PARM_3,#_main_u8LineFiAddr_65536_103
      001089 75*0As00         [24] 4035 	mov	(_act_by_one_key_PARM_3 + 1),#(_main_u8LineFiAddr_65536_103 >> 8)
      00108C 75*0B 00         [24] 4036 	mov	(_act_by_one_key_PARM_3 + 2),#0x00
      00108F 8F 82            [24] 4037 	mov	dpl,r7
      001091 12r05r9A         [24] 4038 	lcall	_act_by_one_key
                                   4039 ;	src/main.c:813: break;
      001094 02r15rF7         [24] 4040 	ljmp	00200$
                                   4041 ;	src/main.c:814: case UART0_INPUT_MODE1 :
      001097                       4042 00113$:
                                   4043 ;	src/main.c:815: gu16TimeCnt = 0;
      001097 90r00r57         [24] 4044 	mov	dptr,#_gu16TimeCnt
      00109A E4               [12] 4045 	clr	a
      00109B F0               [24] 4046 	movx	@dptr,a
      00109C A3               [24] 4047 	inc	dptr
      00109D F0               [24] 4048 	movx	@dptr,a
                                   4049 ;	src/main.c:816: pcBuf[ucBufIdx++] = u8RxUART;
      00109E 90r00rDE         [24] 4050 	mov	dptr,#_main_ucBufIdx_65536_103
      0010A1 E0               [24] 4051 	movx	a,@dptr
      0010A2 FE               [12] 4052 	mov	r6,a
      0010A3 04               [12] 4053 	inc	a
      0010A4 F0               [24] 4054 	movx	@dptr,a
      0010A5 EE               [12] 4055 	mov	a,r6
      0010A6 24rA1            [12] 4056 	add	a,#_main_pcBuf_65536_103
      0010A8 F5 82            [12] 4057 	mov	dpl,a
      0010AA E4               [12] 4058 	clr	a
      0010AB 34s00            [12] 4059 	addc	a,#(_main_pcBuf_65536_103 >> 8)
      0010AD F5 83            [12] 4060 	mov	dph,a
      0010AF EF               [12] 4061 	mov	a,r7
      0010B0 F0               [24] 4062 	movx	@dptr,a
                                   4063 ;	src/main.c:818: break;
      0010B1 02r15rF7         [24] 4064 	ljmp	00200$
                                   4065 ;	src/main.c:819: case UART0_INPUT_MODE2 : // mimic 5keys on board
      0010B4                       4066 00114$:
                                   4067 ;	src/main.c:820: switch(u8RxUART) {
      0010B4 BF 66 02         [24] 4068 	cjne	r7,#0x66,00616$
      0010B7 80 18            [24] 4069 	sjmp	00115$
      0010B9                       4070 00616$:
      0010B9 BF 67 02         [24] 4071 	cjne	r7,#0x67,00617$
      0010BC 80 28            [24] 4072 	sjmp	00118$
      0010BE                       4073 00617$:
      0010BE BF 68 02         [24] 4074 	cjne	r7,#0x68,00618$
      0010C1 80 38            [24] 4075 	sjmp	00121$
      0010C3                       4076 00618$:
      0010C3 BF 6A 02         [24] 4077 	cjne	r7,#0x6a,00619$
      0010C6 80 4B            [24] 4078 	sjmp	00122$
      0010C8                       4079 00619$:
      0010C8 BF 6B 03         [24] 4080 	cjne	r7,#0x6b,00620$
      0010CB 02r11r43         [24] 4081 	ljmp	00125$
      0010CE                       4082 00620$:
      0010CE 02r11r71         [24] 4083 	ljmp	00128$
                                   4084 ;	src/main.c:821: case 'f' : // down SW1
      0010D1                       4085 00115$:
                                   4086 ;	src/main.c:822: u8LineFiAddr--;
      0010D1 90r00r99         [24] 4087 	mov	dptr,#_main_u8LineFiAddr_65536_103
      0010D4 E0               [24] 4088 	movx	a,@dptr
      0010D5 14               [12] 4089 	dec	a
      0010D6 F0               [24] 4090 	movx	@dptr,a
                                   4091 ;	src/main.c:823: if (u8LineFiAddr == 0) {
      0010D7 E0               [24] 4092 	movx	a,@dptr
      0010D8 60 03            [24] 4093 	jz	00621$
      0010DA 02r11r71         [24] 4094 	ljmp	00128$
      0010DD                       4095 00621$:
                                   4096 ;	src/main.c:824: u8LineFiAddr = 1;
      0010DD 90r00r99         [24] 4097 	mov	dptr,#_main_u8LineFiAddr_65536_103
      0010E0 74 01            [12] 4098 	mov	a,#0x01
      0010E2 F0               [24] 4099 	movx	@dptr,a
                                   4100 ;	src/main.c:826: break;
      0010E3 02r11r71         [24] 4101 	ljmp	00128$
                                   4102 ;	src/main.c:827: case 'g' : // right SW2
      0010E6                       4103 00118$:
                                   4104 ;	src/main.c:828: u8LineFiCmd--;
      0010E6 90r00r9B         [24] 4105 	mov	dptr,#_main_u8LineFiCmd_65536_103
      0010E9 E0               [24] 4106 	movx	a,@dptr
      0010EA 14               [12] 4107 	dec	a
      0010EB F0               [24] 4108 	movx	@dptr,a
                                   4109 ;	src/main.c:829: if (u8LineFiCmd == 0) {
      0010EC E0               [24] 4110 	movx	a,@dptr
      0010ED 60 03            [24] 4111 	jz	00622$
      0010EF 02r11r71         [24] 4112 	ljmp	00128$
      0010F2                       4113 00622$:
                                   4114 ;	src/main.c:830: u8LineFiCmd = 1;
      0010F2 90r00r9B         [24] 4115 	mov	dptr,#_main_u8LineFiCmd_65536_103
      0010F5 74 01            [12] 4116 	mov	a,#0x01
      0010F7 F0               [24] 4117 	movx	@dptr,a
                                   4118 ;	src/main.c:832: break;
      0010F8 02r11r71         [24] 4119 	ljmp	00128$
                                   4120 ;	src/main.c:833: case 'h' : // center SW3
      0010FB                       4121 00121$:
                                   4122 ;	src/main.c:834: stLineFiPkt.pu8Data = pu8Data;
      0010FB 90r01r14         [24] 4123 	mov	dptr,#(_main_stLineFiPkt_65536_103 + 0x0005)
      0010FE 74rD3            [12] 4124 	mov	a,#_main_pu8Data_65536_103
      001100 F0               [24] 4125 	movx	@dptr,a
      001101 74s00            [12] 4126 	mov	a,#(_main_pu8Data_65536_103 >> 8)
      001103 A3               [24] 4127 	inc	dptr
      001104 F0               [24] 4128 	movx	@dptr,a
      001105 E4               [12] 4129 	clr	a
      001106 A3               [24] 4130 	inc	dptr
      001107 F0               [24] 4131 	movx	@dptr,a
                                   4132 ;	src/main.c:835: send_linefi_packet(&stLineFiPkt);
      001108 90r01r0F         [24] 4133 	mov	dptr,#_main_stLineFiPkt_65536_103
      00110B 75 F0 00         [24] 4134 	mov	b,#0x00
      00110E 12r00r00         [24] 4135 	lcall	_send_linefi_packet
                                   4136 ;	src/main.c:836: break;
                                   4137 ;	src/main.c:838: case 'j' : //  left SW4
      001111 80 5E            [24] 4138 	sjmp	00128$
      001113                       4139 00122$:
                                   4140 ;	src/main.c:839: u8LineFiCmd++;
      001113 90r00r9B         [24] 4141 	mov	dptr,#_main_u8LineFiCmd_65536_103
      001116 E0               [24] 4142 	movx	a,@dptr
      001117 24 01            [12] 4143 	add	a,#0x01
      001119 F0               [24] 4144 	movx	@dptr,a
                                   4145 ;	src/main.c:840: if (u8LineFiCmd == 101) {
      00111A E0               [24] 4146 	movx	a,@dptr
      00111B FE               [12] 4147 	mov	r6,a
      00111C BE 65 06         [24] 4148 	cjne	r6,#0x65,00124$
                                   4149 ;	src/main.c:841: u8LineFiCmd = 100;
      00111F 90r00r9B         [24] 4150 	mov	dptr,#_main_u8LineFiCmd_65536_103
      001122 74 64            [12] 4151 	mov	a,#0x64
      001124 F0               [24] 4152 	movx	@dptr,a
      001125                       4153 00124$:
                                   4154 ;	src/main.c:843: printf_fast_f("command: %d\n\r", u8LineFiCmd);
      001125 90r00r9B         [24] 4155 	mov	dptr,#_main_u8LineFiCmd_65536_103
      001128 E0               [24] 4156 	movx	a,@dptr
      001129 FE               [12] 4157 	mov	r6,a
      00112A 7D 00            [12] 4158 	mov	r5,#0x00
      00112C C0 06            [24] 4159 	push	ar6
      00112E C0 05            [24] 4160 	push	ar5
      001130 74rFA            [12] 4161 	mov	a,#___str_49
      001132 C0 E0            [24] 4162 	push	acc
      001134 74s02            [12] 4163 	mov	a,#(___str_49 >> 8)
      001136 C0 E0            [24] 4164 	push	acc
      001138 12r00r00         [24] 4165 	lcall	_printf_fast_f
      00113B E5 81            [12] 4166 	mov	a,sp
      00113D 24 FC            [12] 4167 	add	a,#0xfc
      00113F F5 81            [12] 4168 	mov	sp,a
                                   4169 ;	src/main.c:844: break;
                                   4170 ;	src/main.c:845: case 'k' : // up SW5
      001141 80 2E            [24] 4171 	sjmp	00128$
      001143                       4172 00125$:
                                   4173 ;	src/main.c:846: u8LineFiAddr++;
      001143 90r00r99         [24] 4174 	mov	dptr,#_main_u8LineFiAddr_65536_103
      001146 E0               [24] 4175 	movx	a,@dptr
      001147 24 01            [12] 4176 	add	a,#0x01
      001149 F0               [24] 4177 	movx	@dptr,a
                                   4178 ;	src/main.c:847: if (u8LineFiAddr == 16) {
      00114A E0               [24] 4179 	movx	a,@dptr
      00114B FE               [12] 4180 	mov	r6,a
      00114C BE 10 06         [24] 4181 	cjne	r6,#0x10,00127$
                                   4182 ;	src/main.c:848: u8LineFiAddr = 15;
      00114F 90r00r99         [24] 4183 	mov	dptr,#_main_u8LineFiAddr_65536_103
      001152 74 0F            [12] 4184 	mov	a,#0x0f
      001154 F0               [24] 4185 	movx	@dptr,a
      001155                       4186 00127$:
                                   4187 ;	src/main.c:850: printf_fast_f("address: %d\n\r", u8LineFiAddr);
      001155 90r00r99         [24] 4188 	mov	dptr,#_main_u8LineFiAddr_65536_103
      001158 E0               [24] 4189 	movx	a,@dptr
      001159 FE               [12] 4190 	mov	r6,a
      00115A 7D 00            [12] 4191 	mov	r5,#0x00
      00115C C0 06            [24] 4192 	push	ar6
      00115E C0 05            [24] 4193 	push	ar5
      001160 74rEC            [12] 4194 	mov	a,#___str_48
      001162 C0 E0            [24] 4195 	push	acc
      001164 74s02            [12] 4196 	mov	a,#(___str_48 >> 8)
      001166 C0 E0            [24] 4197 	push	acc
      001168 12r00r00         [24] 4198 	lcall	_printf_fast_f
      00116B E5 81            [12] 4199 	mov	a,sp
      00116D 24 FC            [12] 4200 	add	a,#0xfc
      00116F F5 81            [12] 4201 	mov	sp,a
                                   4202 ;	src/main.c:852: }
      001171                       4203 00128$:
                                   4204 ;	src/main.c:854: switch(u8RxUART) {
      001171 90r00r97         [24] 4205 	mov	dptr,#_main_u8RxUART_65536_103
      001174 E0               [24] 4206 	movx	a,@dptr
      001175 FE               [12] 4207 	mov	r6,a
      001176 BE 66 02         [24] 4208 	cjne	r6,#0x66,00627$
      001179 80 18            [24] 4209 	sjmp	00132$
      00117B                       4210 00627$:
      00117B BE 67 02         [24] 4211 	cjne	r6,#0x67,00628$
      00117E 80 13            [24] 4212 	sjmp	00132$
      001180                       4213 00628$:
      001180 BE 68 03         [24] 4214 	cjne	r6,#0x68,00629$
      001183 02r15rF7         [24] 4215 	ljmp	00200$
      001186                       4216 00629$:
      001186 BE 6A 02         [24] 4217 	cjne	r6,#0x6a,00630$
      001189 80 08            [24] 4218 	sjmp	00132$
      00118B                       4219 00630$:
      00118B BE 6B 02         [24] 4220 	cjne	r6,#0x6b,00631$
      00118E 80 03            [24] 4221 	sjmp	00632$
      001190                       4222 00631$:
      001190 02r15rF7         [24] 4223 	ljmp	00200$
      001193                       4224 00632$:
                                   4225 ;	src/main.c:858: case 'k' : // up SW5
      001193                       4226 00132$:
                                   4227 ;	src/main.c:859: stLineFiPkt.u8Addr = u8LineFiAddr;
      001193 90r00r99         [24] 4228 	mov	dptr,#_main_u8LineFiAddr_65536_103
      001196 E0               [24] 4229 	movx	a,@dptr
      001197 90r01r11         [24] 4230 	mov	dptr,#(_main_stLineFiPkt_65536_103 + 0x0002)
      00119A F0               [24] 4231 	movx	@dptr,a
                                   4232 ;	src/main.c:860: stLineFiPkt.u8Type = u8LineFiCmd;
      00119B 90r00r9B         [24] 4233 	mov	dptr,#_main_u8LineFiCmd_65536_103
      00119E E0               [24] 4234 	movx	a,@dptr
      00119F 90r01r10         [24] 4235 	mov	dptr,#(_main_stLineFiPkt_65536_103 + 0x0001)
      0011A2 F0               [24] 4236 	movx	@dptr,a
                                   4237 ;	src/main.c:861: print_linefipacket(&stLineFiPkt);
      0011A3 90r01r0F         [24] 4238 	mov	dptr,#_main_stLineFiPkt_65536_103
      0011A6 75 F0 00         [24] 4239 	mov	b,#0x00
      0011A9 12r00r00         [24] 4240 	lcall	_print_linefipacket
                                   4241 ;	src/main.c:862: break;
      0011AC 02r15rF7         [24] 4242 	ljmp	00200$
                                   4243 ;	src/main.c:869: case UART0_INPUT_MODE3 : // slave gpio pin setting
      0011AF                       4244 00135$:
                                   4245 ;	src/main.c:870: switch(u8RxUART) {
      0011AF BF 68 02         [24] 4246 	cjne	r7,#0x68,00633$
      0011B2 80 0F            [24] 4247 	sjmp	00136$
      0011B4                       4248 00633$:
      0011B4 BF 6A 02         [24] 4249 	cjne	r7,#0x6a,00634$
      0011B7 80 1C            [24] 4250 	sjmp	00139$
      0011B9                       4251 00634$:
      0011B9 BF 6B 02         [24] 4252 	cjne	r7,#0x6b,00635$
      0011BC 80 31            [24] 4253 	sjmp	00140$
      0011BE                       4254 00635$:
                                   4255 ;	src/main.c:871: case 'h' : // left
      0011BE BF 6C 5A         [24] 4256 	cjne	r7,#0x6c,00144$
      0011C1 80 46            [24] 4257 	sjmp	00141$
      0011C3                       4258 00136$:
                                   4259 ;	src/main.c:872: u8DataIdx--;
      0011C3 90r00rDD         [24] 4260 	mov	dptr,#_main_u8DataIdx_65536_103
      0011C6 E0               [24] 4261 	movx	a,@dptr
      0011C7 14               [12] 4262 	dec	a
      0011C8 F0               [24] 4263 	movx	@dptr,a
                                   4264 ;	src/main.c:873: if (u8DataIdx == 255) {
      0011C9 E0               [24] 4265 	movx	a,@dptr
      0011CA FE               [12] 4266 	mov	r6,a
      0011CB BE FF 4D         [24] 4267 	cjne	r6,#0xff,00144$
                                   4268 ;	src/main.c:874: u8DataIdx = 0;
      0011CE 90r00rDD         [24] 4269 	mov	dptr,#_main_u8DataIdx_65536_103
      0011D1 E4               [12] 4270 	clr	a
      0011D2 F0               [24] 4271 	movx	@dptr,a
                                   4272 ;	src/main.c:876: break;
                                   4273 ;	src/main.c:877: case 'j' : // down 
      0011D3 80 46            [24] 4274 	sjmp	00144$
      0011D5                       4275 00139$:
                                   4276 ;	src/main.c:878: pu8Data[u8DataIdx]--;
      0011D5 90r00rDD         [24] 4277 	mov	dptr,#_main_u8DataIdx_65536_103
      0011D8 E0               [24] 4278 	movx	a,@dptr
      0011D9 24rD3            [12] 4279 	add	a,#_main_pu8Data_65536_103
      0011DB FE               [12] 4280 	mov	r6,a
      0011DC E4               [12] 4281 	clr	a
      0011DD 34s00            [12] 4282 	addc	a,#(_main_pu8Data_65536_103 >> 8)
      0011DF FD               [12] 4283 	mov	r5,a
      0011E0 8E 82            [24] 4284 	mov	dpl,r6
      0011E2 8D 83            [24] 4285 	mov	dph,r5
      0011E4 E0               [24] 4286 	movx	a,@dptr
      0011E5 FC               [12] 4287 	mov	r4,a
      0011E6 1C               [12] 4288 	dec	r4
      0011E7 8E 82            [24] 4289 	mov	dpl,r6
      0011E9 8D 83            [24] 4290 	mov	dph,r5
      0011EB EC               [12] 4291 	mov	a,r4
      0011EC F0               [24] 4292 	movx	@dptr,a
                                   4293 ;	src/main.c:879: break;
                                   4294 ;	src/main.c:880: case 'k' : // up 
      0011ED 80 2C            [24] 4295 	sjmp	00144$
      0011EF                       4296 00140$:
                                   4297 ;	src/main.c:881: pu8Data[u8DataIdx]++;
      0011EF 90r00rDD         [24] 4298 	mov	dptr,#_main_u8DataIdx_65536_103
      0011F2 E0               [24] 4299 	movx	a,@dptr
      0011F3 24rD3            [12] 4300 	add	a,#_main_pu8Data_65536_103
      0011F5 FE               [12] 4301 	mov	r6,a
      0011F6 E4               [12] 4302 	clr	a
      0011F7 34s00            [12] 4303 	addc	a,#(_main_pu8Data_65536_103 >> 8)
      0011F9 FD               [12] 4304 	mov	r5,a
      0011FA 8E 82            [24] 4305 	mov	dpl,r6
      0011FC 8D 83            [24] 4306 	mov	dph,r5
      0011FE E0               [24] 4307 	movx	a,@dptr
      0011FF FC               [12] 4308 	mov	r4,a
      001200 0C               [12] 4309 	inc	r4
      001201 8E 82            [24] 4310 	mov	dpl,r6
      001203 8D 83            [24] 4311 	mov	dph,r5
      001205 EC               [12] 4312 	mov	a,r4
      001206 F0               [24] 4313 	movx	@dptr,a
                                   4314 ;	src/main.c:882: break;
                                   4315 ;	src/main.c:883: case 'l' : // right 
      001207 80 12            [24] 4316 	sjmp	00144$
      001209                       4317 00141$:
                                   4318 ;	src/main.c:884: u8DataIdx++;
      001209 90r00rDD         [24] 4319 	mov	dptr,#_main_u8DataIdx_65536_103
      00120C E0               [24] 4320 	movx	a,@dptr
      00120D 24 01            [12] 4321 	add	a,#0x01
      00120F F0               [24] 4322 	movx	@dptr,a
                                   4323 ;	src/main.c:885: if (u8DataIdx == MAX_DATA) {
      001210 E0               [24] 4324 	movx	a,@dptr
      001211 FE               [12] 4325 	mov	r6,a
      001212 BE 0A 06         [24] 4326 	cjne	r6,#0x0a,00144$
                                   4327 ;	src/main.c:886: u8DataIdx--;;
      001215 EE               [12] 4328 	mov	a,r6
      001216 14               [12] 4329 	dec	a
      001217 90r00rDD         [24] 4330 	mov	dptr,#_main_u8DataIdx_65536_103
      00121A F0               [24] 4331 	movx	@dptr,a
                                   4332 ;	src/main.c:889: }
      00121B                       4333 00144$:
                                   4334 ;	src/main.c:890: switch(u8RxUART) {
      00121B 90r00r97         [24] 4335 	mov	dptr,#_main_u8RxUART_65536_103
      00121E E0               [24] 4336 	movx	a,@dptr
      00121F FE               [12] 4337 	mov	r6,a
      001220 BE 68 02         [24] 4338 	cjne	r6,#0x68,00641$
      001223 80 0D            [24] 4339 	sjmp	00146$
      001225                       4340 00641$:
      001225 BE 6A 02         [24] 4341 	cjne	r6,#0x6a,00642$
      001228 80 26            [24] 4342 	sjmp	00301$
      00122A                       4343 00642$:
      00122A BE 6B 02         [24] 4344 	cjne	r6,#0x6b,00643$
      00122D 80 21            [24] 4345 	sjmp	00301$
      00122F                       4346 00643$:
      00122F BE 6C 60         [24] 4347 	cjne	r6,#0x6c,00151$
                                   4348 ;	src/main.c:892: case 'l' : // right
      001232                       4349 00146$:
                                   4350 ;	src/main.c:893: printf_fast_f("DataIdx:%d\r\n", u8DataIdx);
      001232 90r00rDD         [24] 4351 	mov	dptr,#_main_u8DataIdx_65536_103
      001235 E0               [24] 4352 	movx	a,@dptr
      001236 FE               [12] 4353 	mov	r6,a
      001237 7D 00            [12] 4354 	mov	r5,#0x00
      001239 C0 06            [24] 4355 	push	ar6
      00123B C0 05            [24] 4356 	push	ar5
      00123D 74rC6            [12] 4357 	mov	a,#___str_61
      00123F C0 E0            [24] 4358 	push	acc
      001241 74s03            [12] 4359 	mov	a,#(___str_61 >> 8)
      001243 C0 E0            [24] 4360 	push	acc
      001245 12r00r00         [24] 4361 	lcall	_printf_fast_f
      001248 E5 81            [12] 4362 	mov	a,sp
      00124A 24 FC            [12] 4363 	add	a,#0xfc
      00124C F5 81            [12] 4364 	mov	sp,a
                                   4365 ;	src/main.c:894: break;
                                   4366 ;	src/main.c:899: for (i=0;i<MAX_DATA;i++) {
      00124E 80 42            [24] 4367 	sjmp	00151$
      001250                       4368 00301$:
      001250 7E 00            [12] 4369 	mov	r6,#0x00
      001252                       4370 00262$:
                                   4371 ;	src/main.c:900: printf("0x%x ", pu8Data[i]);
      001252 EE               [12] 4372 	mov	a,r6
      001253 24rD3            [12] 4373 	add	a,#_main_pu8Data_65536_103
      001255 F5 82            [12] 4374 	mov	dpl,a
      001257 E4               [12] 4375 	clr	a
      001258 34s00            [12] 4376 	addc	a,#(_main_pu8Data_65536_103 >> 8)
      00125A F5 83            [12] 4377 	mov	dph,a
      00125C E0               [24] 4378 	movx	a,@dptr
      00125D FD               [12] 4379 	mov	r5,a
      00125E 7C 00            [12] 4380 	mov	r4,#0x00
      001260 C0 06            [24] 4381 	push	ar6
      001262 C0 05            [24] 4382 	push	ar5
      001264 C0 04            [24] 4383 	push	ar4
      001266 74rD3            [12] 4384 	mov	a,#___str_62
      001268 C0 E0            [24] 4385 	push	acc
      00126A 74s03            [12] 4386 	mov	a,#(___str_62 >> 8)
      00126C C0 E0            [24] 4387 	push	acc
      00126E 74 80            [12] 4388 	mov	a,#0x80
      001270 C0 E0            [24] 4389 	push	acc
      001272 12r00r00         [24] 4390 	lcall	_printf
      001275 E5 81            [12] 4391 	mov	a,sp
      001277 24 FB            [12] 4392 	add	a,#0xfb
      001279 F5 81            [12] 4393 	mov	sp,a
      00127B D0 06            [24] 4394 	pop	ar6
                                   4395 ;	src/main.c:899: for (i=0;i<MAX_DATA;i++) {
      00127D 0E               [12] 4396 	inc	r6
      00127E BE 0A 00         [24] 4397 	cjne	r6,#0x0a,00646$
      001281                       4398 00646$:
      001281 40 CF            [24] 4399 	jc	00262$
                                   4400 ;	src/main.c:902: printf_fast_f("\r\n");
      001283 74r2E            [12] 4401 	mov	a,#___str_5
      001285 C0 E0            [24] 4402 	push	acc
      001287 74s00            [12] 4403 	mov	a,#(___str_5 >> 8)
      001289 C0 E0            [24] 4404 	push	acc
      00128B 12r00r00         [24] 4405 	lcall	_printf_fast_f
      00128E 15 81            [12] 4406 	dec	sp
      001290 15 81            [12] 4407 	dec	sp
                                   4408 ;	src/main.c:906: case UART0_INPUT_MODE4 : // 주기적으로 하향 패킷 생성 스테이트머신 제어용 CLI
      001292                       4409 00151$:
                                   4410 ;	src/main.c:907: switch(u8RxUART) {
      001292 90r00r97         [24] 4411 	mov	dptr,#_main_u8RxUART_65536_103
      001295 E0               [24] 4412 	movx	a,@dptr
      001296 FE               [12] 4413 	mov	r6,a
      001297 BE 65 02         [24] 4414 	cjne	r6,#0x65,00648$
      00129A 80 1A            [24] 4415 	sjmp	00153$
      00129C                       4416 00648$:
      00129C BE 73 2C         [24] 4417 	cjne	r6,#0x73,00155$
                                   4418 ;	src/main.c:909: printf_fast_f("START periodic packet generating..\r\n");
      00129F 74rD9            [12] 4419 	mov	a,#___str_63
      0012A1 C0 E0            [24] 4420 	push	acc
      0012A3 74s03            [12] 4421 	mov	a,#(___str_63 >> 8)
      0012A5 C0 E0            [24] 4422 	push	acc
      0012A7 12r00r00         [24] 4423 	lcall	_printf_fast_f
      0012AA 15 81            [12] 4424 	dec	sp
      0012AC 15 81            [12] 4425 	dec	sp
                                   4426 ;	src/main.c:910: u8PSCmd = CMD_PS_START;
      0012AE 90r00r9F         [24] 4427 	mov	dptr,#_main_u8PSCmd_65536_103
      0012B1 74 04            [12] 4428 	mov	a,#0x04
      0012B3 F0               [24] 4429 	movx	@dptr,a
                                   4430 ;	src/main.c:911: break;
                                   4431 ;	src/main.c:912: case 'e' : // 종료
      0012B4 80 15            [24] 4432 	sjmp	00155$
      0012B6                       4433 00153$:
                                   4434 ;	src/main.c:913: printf_fast_f("STOP  periodic packet generating..\r\n");
      0012B6 74rFE            [12] 4435 	mov	a,#___str_64
      0012B8 C0 E0            [24] 4436 	push	acc
      0012BA 74s03            [12] 4437 	mov	a,#(___str_64 >> 8)
      0012BC C0 E0            [24] 4438 	push	acc
      0012BE 12r00r00         [24] 4439 	lcall	_printf_fast_f
      0012C1 15 81            [12] 4440 	dec	sp
      0012C3 15 81            [12] 4441 	dec	sp
                                   4442 ;	src/main.c:914: u8PSCmd = CMD_PS_END;
      0012C5 90r00r9F         [24] 4443 	mov	dptr,#_main_u8PSCmd_65536_103
      0012C8 74 05            [12] 4444 	mov	a,#0x05
      0012CA F0               [24] 4445 	movx	@dptr,a
                                   4446 ;	src/main.c:918: case UART0_INPUT_MODE5 : // 상향 시험용
      0012CB                       4447 00155$:
                                   4448 ;	src/main.c:919: switch(u8RxUART) {
      0012CB 90r00r97         [24] 4449 	mov	dptr,#_main_u8RxUART_65536_103
      0012CE E0               [24] 4450 	movx	a,@dptr
      0012CF FE               [12] 4451 	mov	r6,a
      0012D0 BE 30 02         [24] 4452 	cjne	r6,#0x30,00651$
      0012D3 80 2C            [24] 4453 	sjmp	00156$
      0012D5                       4454 00651$:
      0012D5 BE 31 02         [24] 4455 	cjne	r6,#0x31,00652$
      0012D8 80 60            [24] 4456 	sjmp	00157$
      0012DA                       4457 00652$:
      0012DA BE 32 03         [24] 4458 	cjne	r6,#0x32,00653$
      0012DD 02r13r73         [24] 4459 	ljmp	00158$
      0012E0                       4460 00653$:
      0012E0 BE 33 03         [24] 4461 	cjne	r6,#0x33,00654$
      0012E3 02r13rAC         [24] 4462 	ljmp	00159$
      0012E6                       4463 00654$:
      0012E6 BE 34 03         [24] 4464 	cjne	r6,#0x34,00655$
      0012E9 02r13rE5         [24] 4465 	ljmp	00160$
      0012EC                       4466 00655$:
      0012EC BE 35 03         [24] 4467 	cjne	r6,#0x35,00656$
      0012EF 02r14r1E         [24] 4468 	ljmp	00161$
      0012F2                       4469 00656$:
      0012F2 BE 6A 03         [24] 4470 	cjne	r6,#0x6a,00657$
      0012F5 02r14r9F         [24] 4471 	ljmp	00165$
      0012F8                       4472 00657$:
      0012F8 BE 6B 03         [24] 4473 	cjne	r6,#0x6b,00658$
      0012FB 02r14r57         [24] 4474 	ljmp	00162$
      0012FE                       4475 00658$:
      0012FE 02r14rE3         [24] 4476 	ljmp	00168$
                                   4477 ;	src/main.c:920: case '0' : // 
      001301                       4478 00156$:
                                   4479 ;	src/main.c:921: make_linefi_payload(gpu32UartSpeed[u8LineFiSpeed], ULTMODE_INIT, 0, pu8Data);
      001301 90r00r9A         [24] 4480 	mov	dptr,#_main_u8LineFiSpeed_65536_103
      001304 E0               [24] 4481 	movx	a,@dptr
      001305 75 F0 04         [24] 4482 	mov	b,#0x04
      001308 A4               [48] 4483 	mul	ab
      001309 24r5D            [12] 4484 	add	a,#_gpu32UartSpeed
      00130B F5 82            [12] 4485 	mov	dpl,a
      00130D 74s00            [12] 4486 	mov	a,#(_gpu32UartSpeed >> 8)
      00130F 35 F0            [12] 4487 	addc	a,b
      001311 F5 83            [12] 4488 	mov	dph,a
      001313 E0               [24] 4489 	movx	a,@dptr
      001314 FB               [12] 4490 	mov	r3,a
      001315 A3               [24] 4491 	inc	dptr
      001316 E0               [24] 4492 	movx	a,@dptr
      001317 FC               [12] 4493 	mov	r4,a
      001318 A3               [24] 4494 	inc	dptr
      001319 E0               [24] 4495 	movx	a,@dptr
      00131A FD               [12] 4496 	mov	r5,a
      00131B A3               [24] 4497 	inc	dptr
      00131C E0               [24] 4498 	movx	a,@dptr
      00131D FE               [12] 4499 	mov	r6,a
      00131E 75*14rD3         [24] 4500 	mov	_make_linefi_payload_PARM_4,#_main_pu8Data_65536_103
      001321 75*15s00         [24] 4501 	mov	(_make_linefi_payload_PARM_4 + 1),#(_main_pu8Data_65536_103 >> 8)
      001324 75*16 00         [24] 4502 	mov	(_make_linefi_payload_PARM_4 + 2),#0x00
      001327 75*12 00         [24] 4503 	mov	_make_linefi_payload_PARM_2,#0x00
      00132A 75*13 00         [24] 4504 	mov	_make_linefi_payload_PARM_3,#0x00
      00132D 8B 82            [24] 4505 	mov	dpl,r3
      00132F 8C 83            [24] 4506 	mov	dph,r4
      001331 8D F0            [24] 4507 	mov	b,r5
      001333 EE               [12] 4508 	mov	a,r6
      001334 12r0CrC1         [24] 4509 	lcall	_make_linefi_payload
                                   4510 ;	src/main.c:922: break;
      001337 02r14rE3         [24] 4511 	ljmp	00168$
                                   4512 ;	src/main.c:923: case '1' : // 
      00133A                       4513 00157$:
                                   4514 ;	src/main.c:924: make_linefi_payload(gpu32UartSpeed[u8LineFiSpeed], ULTMODE_PREAMBLE, 0, pu8Data);
      00133A 90r00r9A         [24] 4515 	mov	dptr,#_main_u8LineFiSpeed_65536_103
      00133D E0               [24] 4516 	movx	a,@dptr
      00133E 75 F0 04         [24] 4517 	mov	b,#0x04
      001341 A4               [48] 4518 	mul	ab
      001342 24r5D            [12] 4519 	add	a,#_gpu32UartSpeed
      001344 F5 82            [12] 4520 	mov	dpl,a
      001346 74s00            [12] 4521 	mov	a,#(_gpu32UartSpeed >> 8)
      001348 35 F0            [12] 4522 	addc	a,b
      00134A F5 83            [12] 4523 	mov	dph,a
      00134C E0               [24] 4524 	movx	a,@dptr
      00134D FB               [12] 4525 	mov	r3,a
      00134E A3               [24] 4526 	inc	dptr
      00134F E0               [24] 4527 	movx	a,@dptr
      001350 FC               [12] 4528 	mov	r4,a
      001351 A3               [24] 4529 	inc	dptr
      001352 E0               [24] 4530 	movx	a,@dptr
      001353 FD               [12] 4531 	mov	r5,a
      001354 A3               [24] 4532 	inc	dptr
      001355 E0               [24] 4533 	movx	a,@dptr
      001356 FE               [12] 4534 	mov	r6,a
      001357 75*14rD3         [24] 4535 	mov	_make_linefi_payload_PARM_4,#_main_pu8Data_65536_103
      00135A 75*15s00         [24] 4536 	mov	(_make_linefi_payload_PARM_4 + 1),#(_main_pu8Data_65536_103 >> 8)
      00135D 75*16 00         [24] 4537 	mov	(_make_linefi_payload_PARM_4 + 2),#0x00
      001360 75*12 01         [24] 4538 	mov	_make_linefi_payload_PARM_2,#0x01
      001363 75*13 00         [24] 4539 	mov	_make_linefi_payload_PARM_3,#0x00
      001366 8B 82            [24] 4540 	mov	dpl,r3
      001368 8C 83            [24] 4541 	mov	dph,r4
      00136A 8D F0            [24] 4542 	mov	b,r5
      00136C EE               [12] 4543 	mov	a,r6
      00136D 12r0CrC1         [24] 4544 	lcall	_make_linefi_payload
                                   4545 ;	src/main.c:925: break;
      001370 02r14rE3         [24] 4546 	ljmp	00168$
                                   4547 ;	src/main.c:926: case '2' : // 
      001373                       4548 00158$:
                                   4549 ;	src/main.c:927: make_linefi_payload(gpu32UartSpeed[u8LineFiSpeed], ULTMODE_DATA, 0, pu8Data);
      001373 90r00r9A         [24] 4550 	mov	dptr,#_main_u8LineFiSpeed_65536_103
      001376 E0               [24] 4551 	movx	a,@dptr
      001377 75 F0 04         [24] 4552 	mov	b,#0x04
      00137A A4               [48] 4553 	mul	ab
      00137B 24r5D            [12] 4554 	add	a,#_gpu32UartSpeed
      00137D F5 82            [12] 4555 	mov	dpl,a
      00137F 74s00            [12] 4556 	mov	a,#(_gpu32UartSpeed >> 8)
      001381 35 F0            [12] 4557 	addc	a,b
      001383 F5 83            [12] 4558 	mov	dph,a
      001385 E0               [24] 4559 	movx	a,@dptr
      001386 FB               [12] 4560 	mov	r3,a
      001387 A3               [24] 4561 	inc	dptr
      001388 E0               [24] 4562 	movx	a,@dptr
      001389 FC               [12] 4563 	mov	r4,a
      00138A A3               [24] 4564 	inc	dptr
      00138B E0               [24] 4565 	movx	a,@dptr
      00138C FD               [12] 4566 	mov	r5,a
      00138D A3               [24] 4567 	inc	dptr
      00138E E0               [24] 4568 	movx	a,@dptr
      00138F FE               [12] 4569 	mov	r6,a
      001390 75*14rD3         [24] 4570 	mov	_make_linefi_payload_PARM_4,#_main_pu8Data_65536_103
      001393 75*15s00         [24] 4571 	mov	(_make_linefi_payload_PARM_4 + 1),#(_main_pu8Data_65536_103 >> 8)
      001396 75*16 00         [24] 4572 	mov	(_make_linefi_payload_PARM_4 + 2),#0x00
      001399 75*12 02         [24] 4573 	mov	_make_linefi_payload_PARM_2,#0x02
      00139C 75*13 00         [24] 4574 	mov	_make_linefi_payload_PARM_3,#0x00
      00139F 8B 82            [24] 4575 	mov	dpl,r3
      0013A1 8C 83            [24] 4576 	mov	dph,r4
      0013A3 8D F0            [24] 4577 	mov	b,r5
      0013A5 EE               [12] 4578 	mov	a,r6
      0013A6 12r0CrC1         [24] 4579 	lcall	_make_linefi_payload
                                   4580 ;	src/main.c:928: break;
      0013A9 02r14rE3         [24] 4581 	ljmp	00168$
                                   4582 ;	src/main.c:929: case '3' : // 
      0013AC                       4583 00159$:
                                   4584 ;	src/main.c:930: make_linefi_payload(gpu32UartSpeed[u8LineFiSpeed], ULTMODE_DATA, 0xff, pu8Data);
      0013AC 90r00r9A         [24] 4585 	mov	dptr,#_main_u8LineFiSpeed_65536_103
      0013AF E0               [24] 4586 	movx	a,@dptr
      0013B0 75 F0 04         [24] 4587 	mov	b,#0x04
      0013B3 A4               [48] 4588 	mul	ab
      0013B4 24r5D            [12] 4589 	add	a,#_gpu32UartSpeed
      0013B6 F5 82            [12] 4590 	mov	dpl,a
      0013B8 74s00            [12] 4591 	mov	a,#(_gpu32UartSpeed >> 8)
      0013BA 35 F0            [12] 4592 	addc	a,b
      0013BC F5 83            [12] 4593 	mov	dph,a
      0013BE E0               [24] 4594 	movx	a,@dptr
      0013BF FB               [12] 4595 	mov	r3,a
      0013C0 A3               [24] 4596 	inc	dptr
      0013C1 E0               [24] 4597 	movx	a,@dptr
      0013C2 FC               [12] 4598 	mov	r4,a
      0013C3 A3               [24] 4599 	inc	dptr
      0013C4 E0               [24] 4600 	movx	a,@dptr
      0013C5 FD               [12] 4601 	mov	r5,a
      0013C6 A3               [24] 4602 	inc	dptr
      0013C7 E0               [24] 4603 	movx	a,@dptr
      0013C8 FE               [12] 4604 	mov	r6,a
      0013C9 75*14rD3         [24] 4605 	mov	_make_linefi_payload_PARM_4,#_main_pu8Data_65536_103
      0013CC 75*15s00         [24] 4606 	mov	(_make_linefi_payload_PARM_4 + 1),#(_main_pu8Data_65536_103 >> 8)
      0013CF 75*16 00         [24] 4607 	mov	(_make_linefi_payload_PARM_4 + 2),#0x00
      0013D2 75*12 02         [24] 4608 	mov	_make_linefi_payload_PARM_2,#0x02
      0013D5 75*13 FF         [24] 4609 	mov	_make_linefi_payload_PARM_3,#0xff
      0013D8 8B 82            [24] 4610 	mov	dpl,r3
      0013DA 8C 83            [24] 4611 	mov	dph,r4
      0013DC 8D F0            [24] 4612 	mov	b,r5
      0013DE EE               [12] 4613 	mov	a,r6
      0013DF 12r0CrC1         [24] 4614 	lcall	_make_linefi_payload
                                   4615 ;	src/main.c:931: break;
      0013E2 02r14rE3         [24] 4616 	ljmp	00168$
                                   4617 ;	src/main.c:932: case '4' : // 
      0013E5                       4618 00160$:
                                   4619 ;	src/main.c:933: make_linefi_payload(gpu32UartSpeed[u8LineFiSpeed], ULTMODE_NO_MANCHESTER, 0x0, pu8Data);
      0013E5 90r00r9A         [24] 4620 	mov	dptr,#_main_u8LineFiSpeed_65536_103
      0013E8 E0               [24] 4621 	movx	a,@dptr
      0013E9 75 F0 04         [24] 4622 	mov	b,#0x04
      0013EC A4               [48] 4623 	mul	ab
      0013ED 24r5D            [12] 4624 	add	a,#_gpu32UartSpeed
      0013EF F5 82            [12] 4625 	mov	dpl,a
      0013F1 74s00            [12] 4626 	mov	a,#(_gpu32UartSpeed >> 8)
      0013F3 35 F0            [12] 4627 	addc	a,b
      0013F5 F5 83            [12] 4628 	mov	dph,a
      0013F7 E0               [24] 4629 	movx	a,@dptr
      0013F8 FB               [12] 4630 	mov	r3,a
      0013F9 A3               [24] 4631 	inc	dptr
      0013FA E0               [24] 4632 	movx	a,@dptr
      0013FB FC               [12] 4633 	mov	r4,a
      0013FC A3               [24] 4634 	inc	dptr
      0013FD E0               [24] 4635 	movx	a,@dptr
      0013FE FD               [12] 4636 	mov	r5,a
      0013FF A3               [24] 4637 	inc	dptr
      001400 E0               [24] 4638 	movx	a,@dptr
      001401 FE               [12] 4639 	mov	r6,a
      001402 75*14rD3         [24] 4640 	mov	_make_linefi_payload_PARM_4,#_main_pu8Data_65536_103
      001405 75*15s00         [24] 4641 	mov	(_make_linefi_payload_PARM_4 + 1),#(_main_pu8Data_65536_103 >> 8)
      001408 75*16 00         [24] 4642 	mov	(_make_linefi_payload_PARM_4 + 2),#0x00
      00140B 75*12 03         [24] 4643 	mov	_make_linefi_payload_PARM_2,#0x03
      00140E 75*13 00         [24] 4644 	mov	_make_linefi_payload_PARM_3,#0x00
      001411 8B 82            [24] 4645 	mov	dpl,r3
      001413 8C 83            [24] 4646 	mov	dph,r4
      001415 8D F0            [24] 4647 	mov	b,r5
      001417 EE               [12] 4648 	mov	a,r6
      001418 12r0CrC1         [24] 4649 	lcall	_make_linefi_payload
                                   4650 ;	src/main.c:934: break;
      00141B 02r14rE3         [24] 4651 	ljmp	00168$
                                   4652 ;	src/main.c:935: case '5' : // 
      00141E                       4653 00161$:
                                   4654 ;	src/main.c:936: make_linefi_payload(gpu32UartSpeed[u8LineFiSpeed], ULTMODE_NO_MANCHESTER, 0xff, pu8Data);
      00141E 90r00r9A         [24] 4655 	mov	dptr,#_main_u8LineFiSpeed_65536_103
      001421 E0               [24] 4656 	movx	a,@dptr
      001422 75 F0 04         [24] 4657 	mov	b,#0x04
      001425 A4               [48] 4658 	mul	ab
      001426 24r5D            [12] 4659 	add	a,#_gpu32UartSpeed
      001428 F5 82            [12] 4660 	mov	dpl,a
      00142A 74s00            [12] 4661 	mov	a,#(_gpu32UartSpeed >> 8)
      00142C 35 F0            [12] 4662 	addc	a,b
      00142E F5 83            [12] 4663 	mov	dph,a
      001430 E0               [24] 4664 	movx	a,@dptr
      001431 FB               [12] 4665 	mov	r3,a
      001432 A3               [24] 4666 	inc	dptr
      001433 E0               [24] 4667 	movx	a,@dptr
      001434 FC               [12] 4668 	mov	r4,a
      001435 A3               [24] 4669 	inc	dptr
      001436 E0               [24] 4670 	movx	a,@dptr
      001437 FD               [12] 4671 	mov	r5,a
      001438 A3               [24] 4672 	inc	dptr
      001439 E0               [24] 4673 	movx	a,@dptr
      00143A FE               [12] 4674 	mov	r6,a
      00143B 75*14rD3         [24] 4675 	mov	_make_linefi_payload_PARM_4,#_main_pu8Data_65536_103
      00143E 75*15s00         [24] 4676 	mov	(_make_linefi_payload_PARM_4 + 1),#(_main_pu8Data_65536_103 >> 8)
      001441 75*16 00         [24] 4677 	mov	(_make_linefi_payload_PARM_4 + 2),#0x00
      001444 75*12 03         [24] 4678 	mov	_make_linefi_payload_PARM_2,#0x03
      001447 75*13 FF         [24] 4679 	mov	_make_linefi_payload_PARM_3,#0xff
      00144A 8B 82            [24] 4680 	mov	dpl,r3
      00144C 8C 83            [24] 4681 	mov	dph,r4
      00144E 8D F0            [24] 4682 	mov	b,r5
      001450 EE               [12] 4683 	mov	a,r6
      001451 12r0CrC1         [24] 4684 	lcall	_make_linefi_payload
                                   4685 ;	src/main.c:937: break;
      001454 02r14rE3         [24] 4686 	ljmp	00168$
                                   4687 ;	src/main.c:939: case 'k' : // speed up
      001457                       4688 00162$:
                                   4689 ;	src/main.c:940: if (u8LineFiSpeed  < 13) {
      001457 90r00r9A         [24] 4690 	mov	dptr,#_main_u8LineFiSpeed_65536_103
      00145A E0               [24] 4691 	movx	a,@dptr
      00145B FE               [12] 4692 	mov	r6,a
      00145C BE 0D 00         [24] 4693 	cjne	r6,#0x0d,00659$
      00145F                       4694 00659$:
      00145F 50 06            [24] 4695 	jnc	00164$
                                   4696 ;	src/main.c:941: u8LineFiSpeed++;
      001461 90r00r9A         [24] 4697 	mov	dptr,#_main_u8LineFiSpeed_65536_103
      001464 EE               [12] 4698 	mov	a,r6
      001465 04               [12] 4699 	inc	a
      001466 F0               [24] 4700 	movx	@dptr,a
      001467                       4701 00164$:
                                   4702 ;	src/main.c:943: printf_fast_f("uart speed: %lu:\n\r", gpu32UartSpeed[u8LineFiSpeed]);
      001467 90r00r9A         [24] 4703 	mov	dptr,#_main_u8LineFiSpeed_65536_103
      00146A E0               [24] 4704 	movx	a,@dptr
      00146B 75 F0 04         [24] 4705 	mov	b,#0x04
      00146E A4               [48] 4706 	mul	ab
      00146F 24r5D            [12] 4707 	add	a,#_gpu32UartSpeed
      001471 F5 82            [12] 4708 	mov	dpl,a
      001473 74s00            [12] 4709 	mov	a,#(_gpu32UartSpeed >> 8)
      001475 35 F0            [12] 4710 	addc	a,b
      001477 F5 83            [12] 4711 	mov	dph,a
      001479 E0               [24] 4712 	movx	a,@dptr
      00147A FB               [12] 4713 	mov	r3,a
      00147B A3               [24] 4714 	inc	dptr
      00147C E0               [24] 4715 	movx	a,@dptr
      00147D FC               [12] 4716 	mov	r4,a
      00147E A3               [24] 4717 	inc	dptr
      00147F E0               [24] 4718 	movx	a,@dptr
      001480 FD               [12] 4719 	mov	r5,a
      001481 A3               [24] 4720 	inc	dptr
      001482 E0               [24] 4721 	movx	a,@dptr
      001483 FE               [12] 4722 	mov	r6,a
      001484 C0 03            [24] 4723 	push	ar3
      001486 C0 04            [24] 4724 	push	ar4
      001488 C0 05            [24] 4725 	push	ar5
      00148A C0 06            [24] 4726 	push	ar6
      00148C 74rD9            [12] 4727 	mov	a,#___str_47
      00148E C0 E0            [24] 4728 	push	acc
      001490 74s02            [12] 4729 	mov	a,#(___str_47 >> 8)
      001492 C0 E0            [24] 4730 	push	acc
      001494 12r00r00         [24] 4731 	lcall	_printf_fast_f
      001497 E5 81            [12] 4732 	mov	a,sp
      001499 24 FA            [12] 4733 	add	a,#0xfa
      00149B F5 81            [12] 4734 	mov	sp,a
                                   4735 ;	src/main.c:944: break;
                                   4736 ;	src/main.c:945: case 'j' : // speed down
      00149D 80 44            [24] 4737 	sjmp	00168$
      00149F                       4738 00165$:
                                   4739 ;	src/main.c:946: if (u8LineFiSpeed  != 0) {
      00149F 90r00r9A         [24] 4740 	mov	dptr,#_main_u8LineFiSpeed_65536_103
      0014A2 E0               [24] 4741 	movx	a,@dptr
      0014A3 FE               [12] 4742 	mov	r6,a
      0014A4 E0               [24] 4743 	movx	a,@dptr
      0014A5 60 06            [24] 4744 	jz	00167$
                                   4745 ;	src/main.c:947: u8LineFiSpeed--;
      0014A7 EE               [12] 4746 	mov	a,r6
      0014A8 14               [12] 4747 	dec	a
      0014A9 90r00r9A         [24] 4748 	mov	dptr,#_main_u8LineFiSpeed_65536_103
      0014AC F0               [24] 4749 	movx	@dptr,a
      0014AD                       4750 00167$:
                                   4751 ;	src/main.c:949: printf_fast_f("uart speed: %lu:\n\r", gpu32UartSpeed[u8LineFiSpeed]);
      0014AD 90r00r9A         [24] 4752 	mov	dptr,#_main_u8LineFiSpeed_65536_103
      0014B0 E0               [24] 4753 	movx	a,@dptr
      0014B1 75 F0 04         [24] 4754 	mov	b,#0x04
      0014B4 A4               [48] 4755 	mul	ab
      0014B5 24r5D            [12] 4756 	add	a,#_gpu32UartSpeed
      0014B7 F5 82            [12] 4757 	mov	dpl,a
      0014B9 74s00            [12] 4758 	mov	a,#(_gpu32UartSpeed >> 8)
      0014BB 35 F0            [12] 4759 	addc	a,b
      0014BD F5 83            [12] 4760 	mov	dph,a
      0014BF E0               [24] 4761 	movx	a,@dptr
      0014C0 FB               [12] 4762 	mov	r3,a
      0014C1 A3               [24] 4763 	inc	dptr
      0014C2 E0               [24] 4764 	movx	a,@dptr
      0014C3 FC               [12] 4765 	mov	r4,a
      0014C4 A3               [24] 4766 	inc	dptr
      0014C5 E0               [24] 4767 	movx	a,@dptr
      0014C6 FD               [12] 4768 	mov	r5,a
      0014C7 A3               [24] 4769 	inc	dptr
      0014C8 E0               [24] 4770 	movx	a,@dptr
      0014C9 FE               [12] 4771 	mov	r6,a
      0014CA C0 03            [24] 4772 	push	ar3
      0014CC C0 04            [24] 4773 	push	ar4
      0014CE C0 05            [24] 4774 	push	ar5
      0014D0 C0 06            [24] 4775 	push	ar6
      0014D2 74rD9            [12] 4776 	mov	a,#___str_47
      0014D4 C0 E0            [24] 4777 	push	acc
      0014D6 74s02            [12] 4778 	mov	a,#(___str_47 >> 8)
      0014D8 C0 E0            [24] 4779 	push	acc
      0014DA 12r00r00         [24] 4780 	lcall	_printf_fast_f
      0014DD E5 81            [12] 4781 	mov	a,sp
      0014DF 24 FA            [12] 4782 	add	a,#0xfa
      0014E1 F5 81            [12] 4783 	mov	sp,a
                                   4784 ;	src/main.c:951: }
      0014E3                       4785 00168$:
                                   4786 ;	src/main.c:952: switch(u8RxUART) {
      0014E3 90r00r97         [24] 4787 	mov	dptr,#_main_u8RxUART_65536_103
      0014E6 E0               [24] 4788 	movx	a,@dptr
      0014E7 FE               [12] 4789 	mov	r6,a
      0014E8 BE 30 02         [24] 4790 	cjne	r6,#0x30,00662$
      0014EB 80 1C            [24] 4791 	sjmp	00174$
      0014ED                       4792 00662$:
      0014ED BE 31 02         [24] 4793 	cjne	r6,#0x31,00663$
      0014F0 80 17            [24] 4794 	sjmp	00174$
      0014F2                       4795 00663$:
      0014F2 BE 32 02         [24] 4796 	cjne	r6,#0x32,00664$
      0014F5 80 12            [24] 4797 	sjmp	00174$
      0014F7                       4798 00664$:
      0014F7 BE 33 02         [24] 4799 	cjne	r6,#0x33,00665$
      0014FA 80 0D            [24] 4800 	sjmp	00174$
      0014FC                       4801 00665$:
      0014FC BE 34 02         [24] 4802 	cjne	r6,#0x34,00666$
      0014FF 80 08            [24] 4803 	sjmp	00174$
      001501                       4804 00666$:
      001501 BE 35 02         [24] 4805 	cjne	r6,#0x35,00667$
      001504 80 03            [24] 4806 	sjmp	00668$
      001506                       4807 00667$:
      001506 02r15rF7         [24] 4808 	ljmp	00200$
      001509                       4809 00668$:
                                   4810 ;	src/main.c:958: case '5' : // 
      001509                       4811 00174$:
                                   4812 ;	src/main.c:959: stLineFiPkt.u8Type = Type_UpLinkTest;
      001509 90r01r10         [24] 4813 	mov	dptr,#(_main_stLineFiPkt_65536_103 + 0x0001)
      00150C 74 07            [12] 4814 	mov	a,#0x07
      00150E F0               [24] 4815 	movx	@dptr,a
                                   4816 ;	src/main.c:960: stLineFiPkt.u8Size = 10;
      00150F 90r01r12         [24] 4817 	mov	dptr,#(_main_stLineFiPkt_65536_103 + 0x0003)
      001512 74 0A            [12] 4818 	mov	a,#0x0a
      001514 F0               [24] 4819 	movx	@dptr,a
                                   4820 ;	src/main.c:961: stLineFiPkt.pu8Data = pu8Data;
      001515 90r01r14         [24] 4821 	mov	dptr,#(_main_stLineFiPkt_65536_103 + 0x0005)
      001518 74rD3            [12] 4822 	mov	a,#_main_pu8Data_65536_103
      00151A F0               [24] 4823 	movx	@dptr,a
      00151B 74s00            [12] 4824 	mov	a,#(_main_pu8Data_65536_103 >> 8)
      00151D A3               [24] 4825 	inc	dptr
      00151E F0               [24] 4826 	movx	@dptr,a
      00151F E4               [12] 4827 	clr	a
      001520 A3               [24] 4828 	inc	dptr
      001521 F0               [24] 4829 	movx	@dptr,a
                                   4830 ;	src/main.c:963: send_linefi_packet(&stLineFiPkt);
      001522 90r01r0F         [24] 4831 	mov	dptr,#_main_stLineFiPkt_65536_103
      001525 75 F0 00         [24] 4832 	mov	b,#0x00
      001528 12r00r00         [24] 4833 	lcall	_send_linefi_packet
                                   4834 ;	src/main.c:964: print_linefipacket(&stLineFiPkt);
      00152B 90r01r0F         [24] 4835 	mov	dptr,#_main_stLineFiPkt_65536_103
      00152E 75 F0 00         [24] 4836 	mov	b,#0x00
      001531 12r00r00         [24] 4837 	lcall	_print_linefipacket
                                   4838 ;	src/main.c:965: InitialUART1_Timer3(gpu32UartSpeed[u8LineFiSpeed]);
      001534 90r00r9A         [24] 4839 	mov	dptr,#_main_u8LineFiSpeed_65536_103
      001537 E0               [24] 4840 	movx	a,@dptr
      001538 75 F0 04         [24] 4841 	mov	b,#0x04
      00153B A4               [48] 4842 	mul	ab
      00153C 24r5D            [12] 4843 	add	a,#_gpu32UartSpeed
      00153E F5 82            [12] 4844 	mov	dpl,a
      001540 74s00            [12] 4845 	mov	a,#(_gpu32UartSpeed >> 8)
      001542 35 F0            [12] 4846 	addc	a,b
      001544 F5 83            [12] 4847 	mov	dph,a
      001546 E0               [24] 4848 	movx	a,@dptr
      001547 FB               [12] 4849 	mov	r3,a
      001548 A3               [24] 4850 	inc	dptr
      001549 E0               [24] 4851 	movx	a,@dptr
      00154A FC               [12] 4852 	mov	r4,a
      00154B A3               [24] 4853 	inc	dptr
      00154C E0               [24] 4854 	movx	a,@dptr
      00154D FD               [12] 4855 	mov	r5,a
      00154E A3               [24] 4856 	inc	dptr
      00154F E0               [24] 4857 	movx	a,@dptr
      001550 8B 82            [24] 4858 	mov	dpl,r3
      001552 8C 83            [24] 4859 	mov	dph,r4
      001554 8D F0            [24] 4860 	mov	b,r5
      001556 12r00r00         [24] 4861 	lcall	_InitialUART1_Timer3
                                   4862 ;	src/main.c:969: break;
      001559 02r15rF7         [24] 4863 	ljmp	00200$
                                   4864 ;	src/main.c:970: case UART0_INPUT_MODE6 : // 루프백 확인
      00155C                       4865 00176$:
                                   4866 ;	src/main.c:971: printf_fast_f("%c", u8RxUART);
      00155C 8F 05            [24] 4867 	mov	ar5,r7
      00155E 7E 00            [12] 4868 	mov	r6,#0x00
      001560 C0 05            [24] 4869 	push	ar5
      001562 C0 06            [24] 4870 	push	ar6
      001564 74r31            [12] 4871 	mov	a,#___str_6
      001566 C0 E0            [24] 4872 	push	acc
      001568 74s00            [12] 4873 	mov	a,#(___str_6 >> 8)
      00156A C0 E0            [24] 4874 	push	acc
      00156C 12r00r00         [24] 4875 	lcall	_printf_fast_f
      00156F E5 81            [12] 4876 	mov	a,sp
      001571 24 FC            [12] 4877 	add	a,#0xfc
      001573 F5 81            [12] 4878 	mov	sp,a
                                   4879 ;	src/main.c:972: break;
      001575 02r15rF7         [24] 4880 	ljmp	00200$
                                   4881 ;	src/main.c:973: case UART0_INPUT_MODE7 : // uart0 --> uart1 통과
      001578                       4882 00177$:
                                   4883 ;	src/main.c:974: if ((u8RxUART>>4) == 0) {
      001578 EF               [12] 4884 	mov	a,r7
      001579 C4               [12] 4885 	swap	a
      00157A 54 0F            [12] 4886 	anl	a,#0x0f
      00157C 70 1F            [24] 4887 	jnz	00184$
                                   4888 ;	src/main.c:975: switch(u8RxUART) {
      00157E EF               [12] 4889 	mov	a,r7
      00157F FE               [12] 4890 	mov	r6,a
      001580 24 FC            [12] 4891 	add	a,#0xff - 0x03
      001582 50 03            [24] 4892 	jnc	00670$
      001584 02r15rF7         [24] 4893 	ljmp	00200$
      001587                       4894 00670$:
      001587 EE               [12] 4895 	mov	a,r6
      001588 2E               [12] 4896 	add	a,r6
                                   4897 ;	src/main.c:976: case 0 :
      001589 90r15r8D         [24] 4898 	mov	dptr,#00671$
      00158C 73               [24] 4899 	jmp	@a+dptr
      00158D                       4900 00671$:
      00158D 80 06            [24] 4901 	sjmp	00178$
      00158F 80 08            [24] 4902 	sjmp	00179$
      001591 80 64            [24] 4903 	sjmp	00200$
      001593 80 62            [24] 4904 	sjmp	00200$
      001595                       4905 00178$:
                                   4906 ;	src/main.c:977: LINEFI_EN0 = 0;
                                   4907 ;	assignBit
      001595 C2 90            [12] 4908 	clr	_P10
                                   4909 ;	src/main.c:978: break;
                                   4910 ;	src/main.c:979: case 1 :
      001597 80 5E            [24] 4911 	sjmp	00200$
      001599                       4912 00179$:
                                   4913 ;	src/main.c:980: LINEFI_EN0 = 1;
                                   4914 ;	assignBit
      001599 D2 90            [12] 4915 	setb	_P10
                                   4916 ;	src/main.c:982: break;
                                   4917 ;	src/main.c:987: }
      00159B 80 5A            [24] 4918 	sjmp	00200$
      00159D                       4919 00184$:
                                   4920 ;	src/main.c:990: send_octet_to_linefi(u8RxUART);
      00159D 8F 82            [24] 4921 	mov	dpl,r7
      00159F 12r00r00         [24] 4922 	lcall	_send_octet_to_linefi
                                   4923 ;	src/main.c:991: printf_fast_f("OK");
      0015A2 74r23            [12] 4924 	mov	a,#___str_65
      0015A4 C0 E0            [24] 4925 	push	acc
      0015A6 74s04            [12] 4926 	mov	a,#(___str_65 >> 8)
      0015A8 C0 E0            [24] 4927 	push	acc
      0015AA 12r00r00         [24] 4928 	lcall	_printf_fast_f
      0015AD 15 81            [12] 4929 	dec	sp
      0015AF 15 81            [12] 4930 	dec	sp
                                   4931 ;	src/main.c:993: break;
                                   4932 ;	src/main.c:998: } //switch(u8RxUART)
      0015B1 80 44            [24] 4933 	sjmp	00200$
      0015B3                       4934 00199$:
                                   4935 ;	src/main.c:1002: switch(u8StateUart0InputMode) {
      0015B3 90r00rA0         [24] 4936 	mov	dptr,#_main_u8StateUart0InputMode_65536_103
      0015B6 E0               [24] 4937 	movx	a,@dptr
      0015B7 FF               [12] 4938 	mov  r7,a
      0015B8 24 FB            [12] 4939 	add	a,#0xff - 0x04
      0015BA 40 3B            [24] 4940 	jc	00200$
      0015BC EF               [12] 4941 	mov	a,r7
      0015BD 2F               [12] 4942 	add	a,r7
                                   4943 ;	src/main.c:1005: case UART0_INPUT_MODE1 :
      0015BE 90r15rC2         [24] 4944 	mov	dptr,#00673$
      0015C1 73               [24] 4945 	jmp	@a+dptr
      0015C2                       4946 00673$:
      0015C2 80 33            [24] 4947 	sjmp	00200$
      0015C4 80 06            [24] 4948 	sjmp	00190$
      0015C6 80 2F            [24] 4949 	sjmp	00200$
      0015C8 80 2D            [24] 4950 	sjmp	00200$
      0015CA 80 2B            [24] 4951 	sjmp	00200$
      0015CC                       4952 00190$:
                                   4953 ;	src/main.c:1006: if (gu16TimeCnt > 10 && ucBufIdx != 0) {
      0015CC 90r00r57         [24] 4954 	mov	dptr,#_gu16TimeCnt
      0015CF E0               [24] 4955 	movx	a,@dptr
      0015D0 FE               [12] 4956 	mov	r6,a
      0015D1 A3               [24] 4957 	inc	dptr
      0015D2 E0               [24] 4958 	movx	a,@dptr
      0015D3 FF               [12] 4959 	mov	r7,a
      0015D4 C3               [12] 4960 	clr	c
      0015D5 74 0A            [12] 4961 	mov	a,#0x0a
      0015D7 9E               [12] 4962 	subb	a,r6
      0015D8 E4               [12] 4963 	clr	a
      0015D9 9F               [12] 4964 	subb	a,r7
      0015DA 50 1B            [24] 4965 	jnc	00200$
      0015DC 90r00rDE         [24] 4966 	mov	dptr,#_main_ucBufIdx_65536_103
      0015DF E0               [24] 4967 	movx	a,@dptr
      0015E0 FF               [12] 4968 	mov	r7,a
      0015E1 E0               [24] 4969 	movx	a,@dptr
      0015E2 60 13            [24] 4970 	jz	00200$
                                   4971 ;	src/main.c:1007: printoutbuf(ucBufIdx, pcBuf);
      0015E4 75*03rA1         [24] 4972 	mov	_printoutbuf_PARM_2,#_main_pcBuf_65536_103
      0015E7 75*04s00         [24] 4973 	mov	(_printoutbuf_PARM_2 + 1),#(_main_pcBuf_65536_103 >> 8)
      0015EA 75*05 00         [24] 4974 	mov	(_printoutbuf_PARM_2 + 2),#0x00
      0015ED 8F 82            [24] 4975 	mov	dpl,r7
      0015EF 12r04r69         [24] 4976 	lcall	_printoutbuf
                                   4977 ;	src/main.c:1008: ucBufIdx = 0;
      0015F2 90r00rDE         [24] 4978 	mov	dptr,#_main_ucBufIdx_65536_103
      0015F5 E4               [12] 4979 	clr	a
      0015F6 F0               [24] 4980 	movx	@dptr,a
                                   4981 ;	src/main.c:1017: } //switch(u8StateUart0InputMode)
      0015F7                       4982 00200$:
                                   4983 ;	src/main.c:1025: if (u8PwrOnFirstFlag) { // 전원 켜진 후, 한 번만 동작
      0015F7 90r00r9C         [24] 4984 	mov	dptr,#_main_u8PwrOnFirstFlag_65536_103
      0015FA E0               [24] 4985 	movx	a,@dptr
      0015FB FF               [12] 4986 	mov	r7,a
      0015FC 70 03            [24] 4987 	jnz	00676$
      0015FE 02r16rFC         [24] 4988 	ljmp	00212$
      001601                       4989 00676$:
                                   4990 ;	src/main.c:1026: switch (state_switches((SW_U<<0)| (SW_R<<1)| (SW_L<<2)| (SW_D<<3)| (SW_C<<4), &u8SwNum)) {
      001601 A2 95            [12] 4991 	mov	c,_P15
      001603 E4               [12] 4992 	clr	a
      001604 33               [12] 4993 	rlc	a
      001605 FE               [12] 4994 	mov	r6,a
      001606 A2 B0            [12] 4995 	mov	c,_P30
      001608 E4               [12] 4996 	clr	a
      001609 33               [12] 4997 	rlc	a
      00160A 25 E0            [12] 4998 	add	a,acc
      00160C 42 06            [12] 4999 	orl	ar6,a
      00160E A2 80            [12] 5000 	mov	c,_P00
      001610 E4               [12] 5001 	clr	a
      001611 33               [12] 5002 	rlc	a
      001612 25 E0            [12] 5003 	add	a,acc
      001614 25 E0            [12] 5004 	add	a,acc
      001616 42 06            [12] 5005 	orl	ar6,a
      001618 A2 93            [12] 5006 	mov	c,_P13
      00161A E4               [12] 5007 	clr	a
      00161B 33               [12] 5008 	rlc	a
      00161C C4               [12] 5009 	swap	a
      00161D 03               [12] 5010 	rr	a
      00161E 54 F8            [12] 5011 	anl	a,#0xf8
      001620 42 06            [12] 5012 	orl	ar6,a
      001622 A2 97            [12] 5013 	mov	c,_P17
      001624 E4               [12] 5014 	clr	a
      001625 33               [12] 5015 	rlc	a
      001626 C4               [12] 5016 	swap	a
      001627 54 F0            [12] 5017 	anl	a,#0xf0
      001629 4E               [12] 5018 	orl	a,r6
      00162A F5 82            [12] 5019 	mov	dpl,a
      00162C 75*00r9D         [24] 5020 	mov	_state_switches_PARM_2,#_main_u8SwNum_65536_103
      00162F 75*01s00         [24] 5021 	mov	(_state_switches_PARM_2 + 1),#(_main_u8SwNum_65536_103 >> 8)
      001632 75*02 00         [24] 5022 	mov	(_state_switches_PARM_2 + 2),#0x00
      001635 C0 07            [24] 5023 	push	ar7
      001637 12r03r7C         [24] 5024 	lcall	_state_switches
      00163A AE 82            [24] 5025 	mov	r6,dpl
      00163C D0 07            [24] 5026 	pop	ar7
      00163E BE 01 02         [24] 5027 	cjne	r6,#0x01,00677$
      001641 80 03            [24] 5028 	sjmp	00678$
      001643                       5029 00677$:
      001643 02r17r33         [24] 5030 	ljmp	00213$
      001646                       5031 00678$:
                                   5032 ;	src/main.c:1028: switch(u8PwrOnFirstFlag) {
      001646 EF               [12] 5033 	mov	a,r7
      001647 FE               [12] 5034 	mov	r6,a
      001648 24 FA            [12] 5035 	add	a,#0xff - 0x05
      00164A 50 03            [24] 5036 	jnc	00679$
      00164C 02r17r33         [24] 5037 	ljmp	00213$
      00164F                       5038 00679$:
      00164F EE               [12] 5039 	mov	a,r6
      001650 2E               [12] 5040 	add	a,r6
      001651 2E               [12] 5041 	add	a,r6
      001652 90r16r56         [24] 5042 	mov	dptr,#00680$
      001655 73               [24] 5043 	jmp	@a+dptr
      001656                       5044 00680$:
      001656 02r17r33         [24] 5045 	ljmp	00213$
      001659 02r16r68         [24] 5046 	ljmp	00202$
      00165C 02r16r79         [24] 5047 	ljmp	00203$
      00165F 02r16rE4         [24] 5048 	ljmp	00204$
      001662 02r16rEC         [24] 5049 	ljmp	00205$
      001665 02r16rF4         [24] 5050 	ljmp	00206$
                                   5051 ;	src/main.c:1029: case 1 :
      001668                       5052 00202$:
                                   5053 ;	src/main.c:1030: LINEFI_TX = 1;
                                   5054 ;	assignBit
      001668 D2 96            [12] 5055 	setb	_P16
                                   5056 ;	src/main.c:1031: LINEFI_EN0 = 0;
                                   5057 ;	assignBit
      00166A C2 90            [12] 5058 	clr	_P10
                                   5059 ;	src/main.c:1032: LINEFI_EN1 = 1;
                                   5060 ;	assignBit
      00166C D2 91            [12] 5061 	setb	_P11
                                   5062 ;	src/main.c:1033: LINEFI_EN2 = 0;
                                   5063 ;	assignBit
      00166E C2 92            [12] 5064 	clr	_P12
                                   5065 ;	src/main.c:1034: u8PwrOnFirstFlag++;
      001670 90r00r9C         [24] 5066 	mov	dptr,#_main_u8PwrOnFirstFlag_65536_103
      001673 EF               [12] 5067 	mov	a,r7
      001674 04               [12] 5068 	inc	a
      001675 F0               [24] 5069 	movx	@dptr,a
                                   5070 ;	src/main.c:1035: break;
      001676 02r17r33         [24] 5071 	ljmp	00213$
                                   5072 ;	src/main.c:1036: case 2 :
      001679                       5073 00203$:
                                   5074 ;	src/main.c:1037: InitialUART1_Timer3(gpu32UartSpeed[0]);
      001679 90r00r5D         [24] 5075 	mov	dptr,#_gpu32UartSpeed
      00167C E0               [24] 5076 	movx	a,@dptr
      00167D FB               [12] 5077 	mov	r3,a
      00167E A3               [24] 5078 	inc	dptr
      00167F E0               [24] 5079 	movx	a,@dptr
      001680 FC               [12] 5080 	mov	r4,a
      001681 A3               [24] 5081 	inc	dptr
      001682 E0               [24] 5082 	movx	a,@dptr
      001683 FD               [12] 5083 	mov	r5,a
      001684 A3               [24] 5084 	inc	dptr
      001685 E0               [24] 5085 	movx	a,@dptr
      001686 8B 82            [24] 5086 	mov	dpl,r3
      001688 8C 83            [24] 5087 	mov	dph,r4
      00168A 8D F0            [24] 5088 	mov	b,r5
      00168C 12r00r00         [24] 5089 	lcall	_InitialUART1_Timer3
                                   5090 ;	src/main.c:1038: send_octet_to_linefi(((LINEFI_DEFAULT_RATE_IDX<<4)&0xF0) | (1)&0x0F);
      00168F 75 82 51         [24] 5091 	mov	dpl,#0x51
      001692 12r00r00         [24] 5092 	lcall	_send_octet_to_linefi
                                   5093 ;	src/main.c:1039: printf_fast_f("uart speed: %lu:\n\r", gpu32UartSpeed[LINEFI_DEFAULT_RATE_IDX]);
      001695 90r00r71         [24] 5094 	mov	dptr,#(_gpu32UartSpeed + 0x0014)
      001698 E0               [24] 5095 	movx	a,@dptr
      001699 FB               [12] 5096 	mov	r3,a
      00169A A3               [24] 5097 	inc	dptr
      00169B E0               [24] 5098 	movx	a,@dptr
      00169C FC               [12] 5099 	mov	r4,a
      00169D A3               [24] 5100 	inc	dptr
      00169E E0               [24] 5101 	movx	a,@dptr
      00169F FD               [12] 5102 	mov	r5,a
      0016A0 A3               [24] 5103 	inc	dptr
      0016A1 E0               [24] 5104 	movx	a,@dptr
      0016A2 FE               [12] 5105 	mov	r6,a
      0016A3 C0 03            [24] 5106 	push	ar3
      0016A5 C0 04            [24] 5107 	push	ar4
      0016A7 C0 05            [24] 5108 	push	ar5
      0016A9 C0 06            [24] 5109 	push	ar6
      0016AB 74rD9            [12] 5110 	mov	a,#___str_47
      0016AD C0 E0            [24] 5111 	push	acc
      0016AF 74s02            [12] 5112 	mov	a,#(___str_47 >> 8)
      0016B1 C0 E0            [24] 5113 	push	acc
      0016B3 12r00r00         [24] 5114 	lcall	_printf_fast_f
      0016B6 E5 81            [12] 5115 	mov	a,sp
      0016B8 24 FA            [12] 5116 	add	a,#0xfa
      0016BA F5 81            [12] 5117 	mov	sp,a
                                   5118 ;	src/main.c:1040: InitialUART1_Timer3(gpu32UartSpeed[LINEFI_DEFAULT_RATE_IDX]);
      0016BC 90r00r71         [24] 5119 	mov	dptr,#(_gpu32UartSpeed + 0x0014)
      0016BF E0               [24] 5120 	movx	a,@dptr
      0016C0 FB               [12] 5121 	mov	r3,a
      0016C1 A3               [24] 5122 	inc	dptr
      0016C2 E0               [24] 5123 	movx	a,@dptr
      0016C3 FC               [12] 5124 	mov	r4,a
      0016C4 A3               [24] 5125 	inc	dptr
      0016C5 E0               [24] 5126 	movx	a,@dptr
      0016C6 FD               [12] 5127 	mov	r5,a
      0016C7 A3               [24] 5128 	inc	dptr
      0016C8 E0               [24] 5129 	movx	a,@dptr
      0016C9 8B 82            [24] 5130 	mov	dpl,r3
      0016CB 8C 83            [24] 5131 	mov	dph,r4
      0016CD 8D F0            [24] 5132 	mov	b,r5
      0016CF 12r00r00         [24] 5133 	lcall	_InitialUART1_Timer3
                                   5134 ;	src/main.c:1042: u8LineFiCmd = 2;
      0016D2 90r00r9B         [24] 5135 	mov	dptr,#_main_u8LineFiCmd_65536_103
      0016D5 74 02            [12] 5136 	mov	a,#0x02
      0016D7 F0               [24] 5137 	movx	@dptr,a
                                   5138 ;	src/main.c:1043: u8LineFiAddr = 1;
      0016D8 90r00r99         [24] 5139 	mov	dptr,#_main_u8LineFiAddr_65536_103
      0016DB 14               [12] 5140 	dec	a
      0016DC F0               [24] 5141 	movx	@dptr,a
                                   5142 ;	src/main.c:1044: u8PwrOnFirstFlag = 0;
      0016DD 90r00r9C         [24] 5143 	mov	dptr,#_main_u8PwrOnFirstFlag_65536_103
      0016E0 E4               [12] 5144 	clr	a
      0016E1 F0               [24] 5145 	movx	@dptr,a
                                   5146 ;	src/main.c:1045: break;
                                   5147 ;	src/main.c:1046: case 3 :
      0016E2 80 4F            [24] 5148 	sjmp	00213$
      0016E4                       5149 00204$:
                                   5150 ;	src/main.c:1047: u8PwrOnFirstFlag++;
      0016E4 90r00r9C         [24] 5151 	mov	dptr,#_main_u8PwrOnFirstFlag_65536_103
      0016E7 EF               [12] 5152 	mov	a,r7
      0016E8 04               [12] 5153 	inc	a
      0016E9 F0               [24] 5154 	movx	@dptr,a
                                   5155 ;	src/main.c:1048: break;
                                   5156 ;	src/main.c:1049: case 4 :
      0016EA 80 47            [24] 5157 	sjmp	00213$
      0016EC                       5158 00205$:
                                   5159 ;	src/main.c:1050: u8PwrOnFirstFlag++;
      0016EC 90r00r9C         [24] 5160 	mov	dptr,#_main_u8PwrOnFirstFlag_65536_103
      0016EF EF               [12] 5161 	mov	a,r7
      0016F0 04               [12] 5162 	inc	a
      0016F1 F0               [24] 5163 	movx	@dptr,a
                                   5164 ;	src/main.c:1051: break;
                                   5165 ;	src/main.c:1052: case 5 :
      0016F2 80 3F            [24] 5166 	sjmp	00213$
      0016F4                       5167 00206$:
                                   5168 ;	src/main.c:1053: u8PwrOnFirstFlag++;
      0016F4 90r00r9C         [24] 5169 	mov	dptr,#_main_u8PwrOnFirstFlag_65536_103
      0016F7 EF               [12] 5170 	mov	a,r7
      0016F8 04               [12] 5171 	inc	a
      0016F9 F0               [24] 5172 	movx	@dptr,a
                                   5173 ;	src/main.c:1085: } //switch (state_switches((SW1<<0)| (SW2<<1)| (SW3<<2)| (SW4<<3) | (SW5<<4), &u8SwNum))
      0016FA 80 37            [24] 5174 	sjmp	00213$
      0016FC                       5175 00212$:
                                   5176 ;	src/main.c:1088: switch (state_switches((SW_U<<0)| (SW_R<<1)| (SW_L<<2)| (SW_D<<3) | (SW_C<<4), &u8SwNum)) {
      0016FC A2 95            [12] 5177 	mov	c,_P15
      0016FE E4               [12] 5178 	clr	a
      0016FF 33               [12] 5179 	rlc	a
      001700 FF               [12] 5180 	mov	r7,a
      001701 A2 B0            [12] 5181 	mov	c,_P30
      001703 E4               [12] 5182 	clr	a
      001704 33               [12] 5183 	rlc	a
      001705 25 E0            [12] 5184 	add	a,acc
      001707 42 07            [12] 5185 	orl	ar7,a
      001709 A2 80            [12] 5186 	mov	c,_P00
      00170B E4               [12] 5187 	clr	a
      00170C 33               [12] 5188 	rlc	a
      00170D 25 E0            [12] 5189 	add	a,acc
      00170F 25 E0            [12] 5190 	add	a,acc
      001711 42 07            [12] 5191 	orl	ar7,a
      001713 A2 93            [12] 5192 	mov	c,_P13
      001715 E4               [12] 5193 	clr	a
      001716 33               [12] 5194 	rlc	a
      001717 C4               [12] 5195 	swap	a
      001718 03               [12] 5196 	rr	a
      001719 54 F8            [12] 5197 	anl	a,#0xf8
      00171B 42 07            [12] 5198 	orl	ar7,a
      00171D A2 97            [12] 5199 	mov	c,_P17
      00171F E4               [12] 5200 	clr	a
      001720 33               [12] 5201 	rlc	a
      001721 C4               [12] 5202 	swap	a
      001722 54 F0            [12] 5203 	anl	a,#0xf0
      001724 4F               [12] 5204 	orl	a,r7
      001725 F5 82            [12] 5205 	mov	dpl,a
      001727 75*00r9D         [24] 5206 	mov	_state_switches_PARM_2,#_main_u8SwNum_65536_103
      00172A 75*01s00         [24] 5207 	mov	(_state_switches_PARM_2 + 1),#(_main_u8SwNum_65536_103 >> 8)
      00172D 75*02 00         [24] 5208 	mov	(_state_switches_PARM_2 + 2),#0x00
      001730 12r03r7C         [24] 5209 	lcall	_state_switches
                                   5210 ;	src/main.c:1272: } //switch (state_switches((SW_U<<0)| (SW_R<<1)| (SW_L<<2)| (SW_D<<3) | (SW_C<<4), &u8SwNum))
      001733                       5211 00213$:
                                   5212 ;	src/main.c:1297: switch(u8StatePeriodicSend) {
      001733 90r00r9E         [24] 5213 	mov	dptr,#_main_u8StatePeriodicSend_65536_103
      001736 E0               [24] 5214 	movx	a,@dptr
      001737 FF               [12] 5215 	mov	r7,a
      001738 60 0D            [24] 5216 	jz	00214$
      00173A BF 01 02         [24] 5217 	cjne	r7,#0x01,00682$
      00173D 80 3D            [24] 5218 	sjmp	00217$
      00173F                       5219 00682$:
      00173F BF 03 02         [24] 5220 	cjne	r7,#0x03,00683$
      001742 80 62            [24] 5221 	sjmp	00220$
      001744                       5222 00683$:
      001744 02r0Fr98         [24] 5223 	ljmp	00251$
                                   5224 ;	src/main.c:1298: case STATE_PS_INIT : // 초기 시스템 시작
      001747                       5225 00214$:
                                   5226 ;	src/main.c:1299: if (u8PSCmd == CMD_PS_START) {
      001747 90r00r9F         [24] 5227 	mov	dptr,#_main_u8PSCmd_65536_103
      00174A E0               [24] 5228 	movx	a,@dptr
      00174B FF               [12] 5229 	mov	r7,a
      00174C BF 04 02         [24] 5230 	cjne	r7,#0x04,00684$
      00174F 80 03            [24] 5231 	sjmp	00685$
      001751                       5232 00684$:
      001751 02r0Fr98         [24] 5233 	ljmp	00251$
      001754                       5234 00685$:
                                   5235 ;	src/main.c:1300: u8StatePeriodicSend = STATE_PS_WAITING;
      001754 90r00r9E         [24] 5236 	mov	dptr,#_main_u8StatePeriodicSend_65536_103
      001757 74 03            [12] 5237 	mov	a,#0x03
      001759 F0               [24] 5238 	movx	@dptr,a
                                   5239 ;	src/main.c:1301: gu16TimeCntMilliSec = 0;
      00175A 90r00r59         [24] 5240 	mov	dptr,#_gu16TimeCntMilliSec
      00175D E4               [12] 5241 	clr	a
      00175E F0               [24] 5242 	movx	@dptr,a
      00175F A3               [24] 5243 	inc	dptr
      001760 F0               [24] 5244 	movx	@dptr,a
                                   5245 ;	src/main.c:1302: start_aloha(&stLineFiPkt);
      001761 90r01r0F         [24] 5246 	mov	dptr,#_main_stLineFiPkt_65536_103
      001764 75 F0 00         [24] 5247 	mov	b,#0x00
      001767 12r0Cr30         [24] 5248 	lcall	_start_aloha
                                   5249 ;	src/main.c:1303: printf_fast_f("starting ALOHA...\r\n");
      00176A 74r26            [12] 5250 	mov	a,#___str_66
      00176C C0 E0            [24] 5251 	push	acc
      00176E 74s04            [12] 5252 	mov	a,#(___str_66 >> 8)
      001770 C0 E0            [24] 5253 	push	acc
      001772 12r00r00         [24] 5254 	lcall	_printf_fast_f
      001775 15 81            [12] 5255 	dec	sp
      001777 15 81            [12] 5256 	dec	sp
                                   5257 ;	src/main.c:1305: break;
      001779 02r0Fr98         [24] 5258 	ljmp	00251$
                                   5259 ;	src/main.c:1306: case STATE_PS_SENDING : // ACK 보내기
      00177C                       5260 00217$:
                                   5261 ;	src/main.c:1308: u8StatePeriodicSend = STATE_PS_WAITING;				
      00177C 90r00r9E         [24] 5262 	mov	dptr,#_main_u8StatePeriodicSend_65536_103
      00177F 74 03            [12] 5263 	mov	a,#0x03
      001781 F0               [24] 5264 	movx	@dptr,a
                                   5265 ;	src/main.c:1309: if (u8PSCmd == CMD_PS_END) {
      001782 90r00r9F         [24] 5266 	mov	dptr,#_main_u8PSCmd_65536_103
      001785 E0               [24] 5267 	movx	a,@dptr
      001786 FF               [12] 5268 	mov	r7,a
      001787 BF 05 02         [24] 5269 	cjne	r7,#0x05,00686$
      00178A 80 03            [24] 5270 	sjmp	00687$
      00178C                       5271 00686$:
      00178C 02r0Fr98         [24] 5272 	ljmp	00251$
      00178F                       5273 00687$:
                                   5274 ;	src/main.c:1310: u8StatePeriodicSend = STATE_PS_INIT;
      00178F 90r00r9E         [24] 5275 	mov	dptr,#_main_u8StatePeriodicSend_65536_103
      001792 E4               [12] 5276 	clr	a
      001793 F0               [24] 5277 	movx	@dptr,a
                                   5278 ;	src/main.c:1311: printf_fast_f("stopping ALOHA...");
      001794 74r3A            [12] 5279 	mov	a,#___str_67
      001796 C0 E0            [24] 5280 	push	acc
      001798 74s04            [12] 5281 	mov	a,#(___str_67 >> 8)
      00179A C0 E0            [24] 5282 	push	acc
      00179C 12r00r00         [24] 5283 	lcall	_printf_fast_f
      00179F 15 81            [12] 5284 	dec	sp
      0017A1 15 81            [12] 5285 	dec	sp
                                   5286 ;	src/main.c:1313: break;
      0017A3 02r0Fr98         [24] 5287 	ljmp	00251$
                                   5288 ;	src/main.c:1314: case STATE_PS_WAITING : // 데이터 수신 대기 				
      0017A6                       5289 00220$:
                                   5290 ;	src/main.c:1315: if (getchar_uart1(&u8RxUART1)) { // 라인파이 상향 수신
      0017A6 90r00r98         [24] 5291 	mov	dptr,#_main_u8RxUART1_65536_103
      0017A9 75 F0 00         [24] 5292 	mov	b,#0x00
      0017AC 12r00r00         [24] 5293 	lcall	_getchar_uart1
      0017AF E5 82            [12] 5294 	mov	a,dpl
      0017B1 70 03            [24] 5295 	jnz	00688$
      0017B3 02r19r51         [24] 5296 	ljmp	00246$
      0017B6                       5297 00688$:
                                   5298 ;	src/main.c:1316: switch(gu8LineFiUpRxState4) {
      0017B6 90r00r5C         [24] 5299 	mov	dptr,#_gu8LineFiUpRxState4
      0017B9 E0               [24] 5300 	movx	a,@dptr
      0017BA FF               [12] 5301 	mov	r7,a
      0017BB BF 06 02         [24] 5302 	cjne	r7,#0x06,00689$
      0017BE 80 13            [24] 5303 	sjmp	00221$
      0017C0                       5304 00689$:
      0017C0 BF 07 02         [24] 5305 	cjne	r7,#0x07,00690$
      0017C3 80 2D            [24] 5306 	sjmp	00224$
      0017C5                       5307 00690$:
      0017C5 BF 08 02         [24] 5308 	cjne	r7,#0x08,00691$
      0017C8 80 49            [24] 5309 	sjmp	00228$
      0017CA                       5310 00691$:
      0017CA BF 09 03         [24] 5311 	cjne	r7,#0x09,00692$
      0017CD 02r18r86         [24] 5312 	ljmp	00237$
      0017D0                       5313 00692$:
      0017D0 02r19r51         [24] 5314 	ljmp	00246$
                                   5315 ;	src/main.c:1317: case LFURxState_INIT4 :
      0017D3                       5316 00221$:
                                   5317 ;	src/main.c:1318: if (u8RxUART1 == 0x00) {
      0017D3 90r00r98         [24] 5318 	mov	dptr,#_main_u8RxUART1_65536_103
      0017D6 E0               [24] 5319 	movx	a,@dptr
      0017D7 60 03            [24] 5320 	jz	00693$
      0017D9 02r19r51         [24] 5321 	ljmp	00246$
      0017DC                       5322 00693$:
                                   5323 ;	src/main.c:1320: gu16TimeCntMilliSec = 0;
      0017DC 90r00r59         [24] 5324 	mov	dptr,#_gu16TimeCntMilliSec
      0017DF E4               [12] 5325 	clr	a
      0017E0 F0               [24] 5326 	movx	@dptr,a
      0017E1 A3               [24] 5327 	inc	dptr
      0017E2 F0               [24] 5328 	movx	@dptr,a
                                   5329 ;	src/main.c:1321: gu8LineFiUpRxState4 = LFURxState_PPAMBLE4;
      0017E3 90r00r5C         [24] 5330 	mov	dptr,#_gu8LineFiUpRxState4
      0017E6 74 07            [12] 5331 	mov	a,#0x07
      0017E8 F0               [24] 5332 	movx	@dptr,a
                                   5333 ;	src/main.c:1322: gu8PPambleCnt = 1;
      0017E9 90r00r55         [24] 5334 	mov	dptr,#_gu8PPambleCnt
      0017EC 74 01            [12] 5335 	mov	a,#0x01
      0017EE F0               [24] 5336 	movx	@dptr,a
                                   5337 ;	src/main.c:1324: break;
      0017EF 02r19r51         [24] 5338 	ljmp	00246$
                                   5339 ;	src/main.c:1325: case LFURxState_PPAMBLE4 : // 프리프리앰블 상태..
      0017F2                       5340 00224$:
                                   5341 ;	src/main.c:1326: if (u8RxUART1 == 0xF0) {
      0017F2 90r00r98         [24] 5342 	mov	dptr,#_main_u8RxUART1_65536_103
      0017F5 E0               [24] 5343 	movx	a,@dptr
      0017F6 FF               [12] 5344 	mov	r7,a
      0017F7 BF F0 0F         [24] 5345 	cjne	r7,#0xf0,00226$
                                   5346 ;	src/main.c:1328: gu8LineFiUpRxState4 = LFURxState_PREAMBLE4;
      0017FA 90r00r5C         [24] 5347 	mov	dptr,#_gu8LineFiUpRxState4
      0017FD 74 08            [12] 5348 	mov	a,#0x08
      0017FF F0               [24] 5349 	movx	@dptr,a
                                   5350 ;	src/main.c:1329: gu8PreambleCnt = 1;
      001800 90r00r56         [24] 5351 	mov	dptr,#_gu8PreambleCnt
      001803 74 01            [12] 5352 	mov	a,#0x01
      001805 F0               [24] 5353 	movx	@dptr,a
      001806 02r19r51         [24] 5354 	ljmp	00246$
      001809                       5355 00226$:
                                   5356 ;	src/main.c:1332: gu8PPambleCnt++;
      001809 90r00r55         [24] 5357 	mov	dptr,#_gu8PPambleCnt
      00180C E0               [24] 5358 	movx	a,@dptr
      00180D 24 01            [12] 5359 	add	a,#0x01
      00180F F0               [24] 5360 	movx	@dptr,a
                                   5361 ;	src/main.c:1334: break;
      001810 02r19r51         [24] 5362 	ljmp	00246$
                                   5363 ;	src/main.c:1335: case LFURxState_PREAMBLE4 : //프리앰블 받은 상태												
      001813                       5364 00228$:
                                   5365 ;	src/main.c:1336: if (u8RxUART1 == 0xF0) {
      001813 90r00r98         [24] 5366 	mov	dptr,#_main_u8RxUART1_65536_103
      001816 E0               [24] 5367 	movx	a,@dptr
      001817 FF               [12] 5368 	mov	r7,a
      001818 BF F0 10         [24] 5369 	cjne	r7,#0xf0,00233$
                                   5370 ;	src/main.c:1339: gu8PreambleCnt ++;
      00181B 90r00r56         [24] 5371 	mov	dptr,#_gu8PreambleCnt
      00181E E0               [24] 5372 	movx	a,@dptr
      00181F 24 01            [12] 5373 	add	a,#0x01
      001821 F0               [24] 5374 	movx	@dptr,a
                                   5375 ;	src/main.c:1340: gu16TimeCntMilliSec = 0;
      001822 90r00r59         [24] 5376 	mov	dptr,#_gu16TimeCntMilliSec
      001825 E4               [12] 5377 	clr	a
      001826 F0               [24] 5378 	movx	@dptr,a
      001827 A3               [24] 5379 	inc	dptr
      001828 F0               [24] 5380 	movx	@dptr,a
      001829 80 28            [24] 5381 	sjmp	00234$
      00182B                       5382 00233$:
                                   5383 ;	src/main.c:1342: else if (gu8PreambleCnt == 3) { // 프리앰블이 정확히 5개일때,
      00182B 90r00r56         [24] 5384 	mov	dptr,#_gu8PreambleCnt
      00182E E0               [24] 5385 	movx	a,@dptr
      00182F FE               [12] 5386 	mov	r6,a
      001830 BE 03 1A         [24] 5387 	cjne	r6,#0x03,00230$
                                   5388 ;	src/main.c:1343: gu8LineFiUpRxState4 = LFURxState_RX4;
      001833 90r00r5C         [24] 5389 	mov	dptr,#_gu8LineFiUpRxState4
      001836 74 09            [12] 5390 	mov	a,#0x09
      001838 F0               [24] 5391 	movx	@dptr,a
                                   5392 ;	src/main.c:1345: gpu8RxBuf[gu8RxBufCnt++] = u8RxUART1;
      001839 90r00r53         [24] 5393 	mov	dptr,#_gu8RxBufCnt
      00183C 74 01            [12] 5394 	mov	a,#0x01
      00183E F0               [24] 5395 	movx	@dptr,a
      00183F 90r00r43         [24] 5396 	mov	dptr,#_gpu8RxBuf
      001842 EF               [12] 5397 	mov	a,r7
      001843 F0               [24] 5398 	movx	@dptr,a
                                   5399 ;	src/main.c:1346: gu16TimeCntMilliSec = 0;
      001844 90r00r59         [24] 5400 	mov	dptr,#_gu16TimeCntMilliSec
      001847 E4               [12] 5401 	clr	a
      001848 F0               [24] 5402 	movx	@dptr,a
      001849 A3               [24] 5403 	inc	dptr
      00184A F0               [24] 5404 	movx	@dptr,a
      00184B 80 06            [24] 5405 	sjmp	00234$
      00184D                       5406 00230$:
                                   5407 ;	src/main.c:1349: gu8LineFiUpRxState4 = LFURxState_RX4;
      00184D 90r00r5C         [24] 5408 	mov	dptr,#_gu8LineFiUpRxState4
      001850 74 09            [12] 5409 	mov	a,#0x09
      001852 F0               [24] 5410 	movx	@dptr,a
      001853                       5411 00234$:
                                   5412 ;	src/main.c:1352: if (gu16TimeCntMilliSec > 1000) { // 잘못된 프리앰블
      001853 90r00r59         [24] 5413 	mov	dptr,#_gu16TimeCntMilliSec
      001856 E0               [24] 5414 	movx	a,@dptr
      001857 FE               [12] 5415 	mov	r6,a
      001858 A3               [24] 5416 	inc	dptr
      001859 E0               [24] 5417 	movx	a,@dptr
      00185A FF               [12] 5418 	mov	r7,a
      00185B C3               [12] 5419 	clr	c
      00185C 74 E8            [12] 5420 	mov	a,#0xe8
      00185E 9E               [12] 5421 	subb	a,r6
      00185F 74 03            [12] 5422 	mov	a,#0x03
      001861 9F               [12] 5423 	subb	a,r7
      001862 40 03            [24] 5424 	jc	00700$
      001864 02r19r51         [24] 5425 	ljmp	00246$
      001867                       5426 00700$:
                                   5427 ;	src/main.c:1353: printf_fast_f("1000 ");
      001867 74r4C            [12] 5428 	mov	a,#___str_68
      001869 C0 E0            [24] 5429 	push	acc
      00186B 74s04            [12] 5430 	mov	a,#(___str_68 >> 8)
      00186D C0 E0            [24] 5431 	push	acc
      00186F 12r00r00         [24] 5432 	lcall	_printf_fast_f
      001872 15 81            [12] 5433 	dec	sp
      001874 15 81            [12] 5434 	dec	sp
                                   5435 ;	src/main.c:1354: gu8LineFiUpRxState4 = LFURxState_INIT4;
      001876 90r00r5C         [24] 5436 	mov	dptr,#_gu8LineFiUpRxState4
      001879 74 06            [12] 5437 	mov	a,#0x06
      00187B F0               [24] 5438 	movx	@dptr,a
                                   5439 ;	src/main.c:1355: gu16TimeCntMilliSec = 0;
      00187C 90r00r59         [24] 5440 	mov	dptr,#_gu16TimeCntMilliSec
      00187F E4               [12] 5441 	clr	a
      001880 F0               [24] 5442 	movx	@dptr,a
      001881 A3               [24] 5443 	inc	dptr
      001882 F0               [24] 5444 	movx	@dptr,a
                                   5445 ;	src/main.c:1357: break;
      001883 02r19r51         [24] 5446 	ljmp	00246$
                                   5447 ;	src/main.c:1358: case LFURxState_RX4 :
      001886                       5448 00237$:
                                   5449 ;	src/main.c:1359: gpu8RxBuf[gu8RxBufCnt++] = u8RxUART1;
      001886 90r00r53         [24] 5450 	mov	dptr,#_gu8RxBufCnt
      001889 E0               [24] 5451 	movx	a,@dptr
      00188A FF               [12] 5452 	mov	r7,a
      00188B 04               [12] 5453 	inc	a
      00188C F0               [24] 5454 	movx	@dptr,a
      00188D EF               [12] 5455 	mov	a,r7
      00188E 24r43            [12] 5456 	add	a,#_gpu8RxBuf
      001890 FF               [12] 5457 	mov	r7,a
      001891 E4               [12] 5458 	clr	a
      001892 34s00            [12] 5459 	addc	a,#(_gpu8RxBuf >> 8)
      001894 FE               [12] 5460 	mov	r6,a
      001895 90r00r98         [24] 5461 	mov	dptr,#_main_u8RxUART1_65536_103
      001898 E0               [24] 5462 	movx	a,@dptr
      001899 FD               [12] 5463 	mov	r5,a
      00189A 8F 82            [24] 5464 	mov	dpl,r7
      00189C 8E 83            [24] 5465 	mov	dph,r6
      00189E F0               [24] 5466 	movx	@dptr,a
                                   5467 ;	src/main.c:1361: if (gu8RxBufCnt == 11) {
      00189F 90r00r53         [24] 5468 	mov	dptr,#_gu8RxBufCnt
      0018A2 E0               [24] 5469 	movx	a,@dptr
      0018A3 FF               [12] 5470 	mov	r7,a
      0018A4 BF 0B 02         [24] 5471 	cjne	r7,#0x0b,00701$
      0018A7 80 03            [24] 5472 	sjmp	00702$
      0018A9                       5473 00701$:
      0018A9 02r19r2F         [24] 5474 	ljmp	00241$
      0018AC                       5475 00702$:
                                   5476 ;	src/main.c:1364: if (gpu8RxBuf[2] < 10) {
      0018AC 90r00r45         [24] 5477 	mov	dptr,#(_gpu8RxBuf + 0x0002)
      0018AF E0               [24] 5478 	movx	a,@dptr
      0018B0 FE               [12] 5479 	mov	r6,a
      0018B1 BE 0A 00         [24] 5480 	cjne	r6,#0x0a,00703$
      0018B4                       5481 00703$:
      0018B4 50 59            [24] 5482 	jnc	00239$
                                   5483 ;	src/main.c:1366: cp_buf2linefipacket(gu8RxBufCnt, gpu8RxBuf, &stLineFiPkt);									
      0018B6 75*00r43         [24] 5484 	mov	_cp_buf2linefipacket_PARM_2,#_gpu8RxBuf
      0018B9 75*01s00         [24] 5485 	mov	(_cp_buf2linefipacket_PARM_2 + 1),#(_gpu8RxBuf >> 8)
      0018BC 75*02 00         [24] 5486 	mov	(_cp_buf2linefipacket_PARM_2 + 2),#0x00
      0018BF 75*00r0F         [24] 5487 	mov	_cp_buf2linefipacket_PARM_3,#_main_stLineFiPkt_65536_103
      0018C2 75*01s01         [24] 5488 	mov	(_cp_buf2linefipacket_PARM_3 + 1),#(_main_stLineFiPkt_65536_103 >> 8)
      0018C5 75*02 00         [24] 5489 	mov	(_cp_buf2linefipacket_PARM_3 + 2),#0x00
      0018C8 8F 82            [24] 5490 	mov	dpl,r7
      0018CA 12r00r00         [24] 5491 	lcall	_cp_buf2linefipacket
                                   5492 ;	src/main.c:1370: printf_fast_f("Slave_ADDR: %d, UL_Packet_num: %d\r\n",gpu8RxBuf[2], gpu8RxBuf[0]);
      0018CD 90r00r43         [24] 5493 	mov	dptr,#_gpu8RxBuf
      0018D0 E0               [24] 5494 	movx	a,@dptr
      0018D1 FF               [12] 5495 	mov	r7,a
      0018D2 7E 00            [12] 5496 	mov	r6,#0x00
      0018D4 90r00r45         [24] 5497 	mov	dptr,#(_gpu8RxBuf + 0x0002)
      0018D7 E0               [24] 5498 	movx	a,@dptr
      0018D8 FD               [12] 5499 	mov	r5,a
      0018D9 7C 00            [12] 5500 	mov	r4,#0x00
      0018DB C0 07            [24] 5501 	push	ar7
      0018DD C0 06            [24] 5502 	push	ar6
      0018DF C0 05            [24] 5503 	push	ar5
      0018E1 C0 04            [24] 5504 	push	ar4
      0018E3 74r52            [12] 5505 	mov	a,#___str_69
      0018E5 C0 E0            [24] 5506 	push	acc
      0018E7 74s04            [12] 5507 	mov	a,#(___str_69 >> 8)
      0018E9 C0 E0            [24] 5508 	push	acc
      0018EB 12r00r00         [24] 5509 	lcall	_printf_fast_f
      0018EE E5 81            [12] 5510 	mov	a,sp
      0018F0 24 FA            [12] 5511 	add	a,#0xfa
      0018F2 F5 81            [12] 5512 	mov	sp,a
                                   5513 ;	src/main.c:1371: print_linefipacket(&stLineFiPkt);
      0018F4 90r01r0F         [24] 5514 	mov	dptr,#_main_stLineFiPkt_65536_103
      0018F7 75 F0 00         [24] 5515 	mov	b,#0x00
      0018FA 12r00r00         [24] 5516 	lcall	_print_linefipacket
                                   5517 ;	src/main.c:1372: send_ACK(&stLineFiPkt, &stLineFiPkt_test);
      0018FD 75*0Fr07         [24] 5518 	mov	_send_ACK_PARM_2,#_main_stLineFiPkt_test_65536_103
      001900 75*10s01         [24] 5519 	mov	(_send_ACK_PARM_2 + 1),#(_main_stLineFiPkt_test_65536_103 >> 8)
      001903 75*11 00         [24] 5520 	mov	(_send_ACK_PARM_2 + 2),#0x00
      001906 90r01r0F         [24] 5521 	mov	dptr,#_main_stLineFiPkt_65536_103
      001909 75 F0 00         [24] 5522 	mov	b,#0x00
      00190C 12r0Cr68         [24] 5523 	lcall	_send_ACK
      00190F                       5524 00239$:
                                   5525 ;	src/main.c:1375: printf_fast_f("\r\n\r\n");
      00190F 74r76            [12] 5526 	mov	a,#___str_70
      001911 C0 E0            [24] 5527 	push	acc
      001913 74s04            [12] 5528 	mov	a,#(___str_70 >> 8)
      001915 C0 E0            [24] 5529 	push	acc
      001917 12r00r00         [24] 5530 	lcall	_printf_fast_f
      00191A 15 81            [12] 5531 	dec	sp
      00191C 15 81            [12] 5532 	dec	sp
                                   5533 ;	src/main.c:1376: gu8RxBufCnt = 0;
      00191E 90r00r53         [24] 5534 	mov	dptr,#_gu8RxBufCnt
      001921 E4               [12] 5535 	clr	a
      001922 F0               [24] 5536 	movx	@dptr,a
                                   5537 ;	src/main.c:1377: gu8LineFiUpRxState4 = LFURxState_INIT4;
      001923 90r00r5C         [24] 5538 	mov	dptr,#_gu8LineFiUpRxState4
      001926 74 06            [12] 5539 	mov	a,#0x06
      001928 F0               [24] 5540 	movx	@dptr,a
                                   5541 ;	src/main.c:1378: u8StatePeriodicSend = STATE_PS_SENDING;
      001929 90r00r9E         [24] 5542 	mov	dptr,#_main_u8StatePeriodicSend_65536_103
      00192C 74 01            [12] 5543 	mov	a,#0x01
      00192E F0               [24] 5544 	movx	@dptr,a
      00192F                       5545 00241$:
                                   5546 ;	src/main.c:1380: if (gu16TimeCntMilliSec > 3000) { 
      00192F 90r00r59         [24] 5547 	mov	dptr,#_gu16TimeCntMilliSec
      001932 E0               [24] 5548 	movx	a,@dptr
      001933 FE               [12] 5549 	mov	r6,a
      001934 A3               [24] 5550 	inc	dptr
      001935 E0               [24] 5551 	movx	a,@dptr
      001936 FF               [12] 5552 	mov	r7,a
      001937 C3               [12] 5553 	clr	c
      001938 74 B8            [12] 5554 	mov	a,#0xb8
      00193A 9E               [12] 5555 	subb	a,r6
      00193B 74 0B            [12] 5556 	mov	a,#0x0b
      00193D 9F               [12] 5557 	subb	a,r7
      00193E 50 11            [24] 5558 	jnc	00246$
                                   5559 ;	src/main.c:1381: gu8LineFiUpRxState4 = LFURxState_INIT4;
      001940 90r00r5C         [24] 5560 	mov	dptr,#_gu8LineFiUpRxState4
      001943 74 06            [12] 5561 	mov	a,#0x06
      001945 F0               [24] 5562 	movx	@dptr,a
                                   5563 ;	src/main.c:1382: gu16TimeCntMilliSec = 0;
      001946 90r00r59         [24] 5564 	mov	dptr,#_gu16TimeCntMilliSec
      001949 E4               [12] 5565 	clr	a
      00194A F0               [24] 5566 	movx	@dptr,a
      00194B A3               [24] 5567 	inc	dptr
      00194C F0               [24] 5568 	movx	@dptr,a
                                   5569 ;	src/main.c:1383: gu8RxBufCnt = 0;
      00194D 90r00r53         [24] 5570 	mov	dptr,#_gu8RxBufCnt
      001950 F0               [24] 5571 	movx	@dptr,a
                                   5572 ;	src/main.c:1388: }
      001951                       5573 00246$:
                                   5574 ;	src/main.c:1391: if (u8PSCmd == CMD_PS_END) {
      001951 90r00r9F         [24] 5575 	mov	dptr,#_main_u8PSCmd_65536_103
      001954 E0               [24] 5576 	movx	a,@dptr
      001955 FF               [12] 5577 	mov	r7,a
      001956 BF 05 02         [24] 5578 	cjne	r7,#0x05,00706$
      001959 80 03            [24] 5579 	sjmp	00707$
      00195B                       5580 00706$:
      00195B 02r0Fr98         [24] 5581 	ljmp	00251$
      00195E                       5582 00707$:
                                   5583 ;	src/main.c:1392: gu8RxBufCnt = 0;
      00195E 90r00r53         [24] 5584 	mov	dptr,#_gu8RxBufCnt
      001961 E4               [12] 5585 	clr	a
      001962 F0               [24] 5586 	movx	@dptr,a
                                   5587 ;	src/main.c:1393: u8StatePeriodicSend = STATE_PS_INIT;
      001963 90r00r9E         [24] 5588 	mov	dptr,#_main_u8StatePeriodicSend_65536_103
      001966 F0               [24] 5589 	movx	@dptr,a
                                   5590 ;	src/main.c:1394: gu8LineFiUpRxState4 = LFURxState_INIT4;  // 프리앰블 상태 초기화
      001967 90r00r5C         [24] 5591 	mov	dptr,#_gu8LineFiUpRxState4
      00196A 74 06            [12] 5592 	mov	a,#0x06
      00196C F0               [24] 5593 	movx	@dptr,a
                                   5594 ;	src/main.c:1395: printf_fast_f("stopping...\r\n");
      00196D 74r7B            [12] 5595 	mov	a,#___str_71
      00196F C0 E0            [24] 5596 	push	acc
      001971 74s04            [12] 5597 	mov	a,#(___str_71 >> 8)
      001973 C0 E0            [24] 5598 	push	acc
      001975 12r00r00         [24] 5599 	lcall	_printf_fast_f
      001978 15 81            [12] 5600 	dec	sp
      00197A 15 81            [12] 5601 	dec	sp
                                   5602 ;	src/main.c:1399: }
                                   5603 ;	src/main.c:1507: }
      00197C 02r0Fr98         [24] 5604 	ljmp	00251$
                                   5605 	.area CSEG    (CODE)
                                   5606 	.area CONST   (CODE)
                                   5607 	.area CONST   (CODE)
      000000                       5608 ___str_0:
      000000 0A                    5609 	.db 0x0a
      000001 0D                    5610 	.db 0x0d
      000002 00                    5611 	.db 0x00
                                   5612 	.area CSEG    (CODE)
                                   5613 	.area CONST   (CODE)
      000003                       5614 ___str_1:
      000003 73 65 6C 66 20        5615 	.ascii "self "
      000008 00                    5616 	.db 0x00
                                   5617 	.area CSEG    (CODE)
                                   5618 	.area CONST   (CODE)
      000009                       5619 ___str_2:
      000009 63 72 6F 73 73        5620 	.ascii "cross"
      00000E 00                    5621 	.db 0x00
                                   5622 	.area CSEG    (CODE)
                                   5623 	.area CONST   (CODE)
      00000F                       5624 ___str_3:
      00000F 62 6F 74 68 20        5625 	.ascii "both "
      000014 00                    5626 	.db 0x00
                                   5627 	.area CSEG    (CODE)
                                   5628 	.area CONST   (CODE)
      000015                       5629 ___str_4:
      000015 20 6F 75 74 70 75 74  5630 	.ascii " output:This is UART%d"
             3A 54 68 69 73 20 69
             73 20 55 41 52 54 25
             64
      00002B 0A                    5631 	.db 0x0a
      00002C 0D                    5632 	.db 0x0d
      00002D 00                    5633 	.db 0x00
                                   5634 	.area CSEG    (CODE)
                                   5635 	.area CONST   (CODE)
      00002E                       5636 ___str_5:
      00002E 0D                    5637 	.db 0x0d
      00002F 0A                    5638 	.db 0x0a
      000030 00                    5639 	.db 0x00
                                   5640 	.area CSEG    (CODE)
                                   5641 	.area CONST   (CODE)
      000031                       5642 ___str_6:
      000031 25 63                 5643 	.ascii "%c"
      000033 00                    5644 	.db 0x00
                                   5645 	.area CSEG    (CODE)
                                   5646 	.area CONST   (CODE)
      000034                       5647 ___str_7:
      000034 0D                    5648 	.db 0x0d
      000035 0A                    5649 	.db 0x0a
      000036 69 6E 70 75 74 3A 54  5650 	.ascii "input:This is UART%d"
             68 69 73 20 69 73 20
             55 41 52 54 25 64
      00004A 00                    5651 	.db 0x00
                                   5652 	.area CSEG    (CODE)
                                   5653 	.area CONST   (CODE)
      00004B                       5654 ___str_8:
      00004B 49 64 6C 65 20 70 72  5655 	.ascii "Idle preamble on/off"
             65 61 6D 62 6C 65 20
             6F 6E 2F 6F 66 66
      00005F 0D                    5656 	.db 0x0d
      000060 0A                    5657 	.db 0x0a
      000061 00                    5658 	.db 0x00
                                   5659 	.area CSEG    (CODE)
                                   5660 	.area CONST   (CODE)
      000062                       5661 ___str_9:
      000062 4C 69 6E 65 46 69 20  5662 	.ascii "LineFi Power Off"
             50 6F 77 65 72 20 4F
             66 66
      000072 0D                    5663 	.db 0x0d
      000073 0A                    5664 	.db 0x0a
      000074 00                    5665 	.db 0x00
                                   5666 	.area CSEG    (CODE)
                                   5667 	.area CONST   (CODE)
      000075                       5668 ___str_10:
      000075 4C 69 6E 65 46 69 20  5669 	.ascii "LineFi Power On"
             50 6F 77 65 72 20 4F
             6E
      000084 0D                    5670 	.db 0x0d
      000085 0A                    5671 	.db 0x0a
      000086 00                    5672 	.db 0x00
                                   5673 	.area CSEG    (CODE)
                                   5674 	.area CONST   (CODE)
      000087                       5675 ___str_11:
      000087 4C 69 6E 65 46 69 20  5676 	.ascii "LineFi Uart Tx Low"
             55 61 72 74 20 54 78
             20 4C 6F 77
      000099 0D                    5677 	.db 0x0d
      00009A 0A                    5678 	.db 0x0a
      00009B 00                    5679 	.db 0x00
                                   5680 	.area CSEG    (CODE)
                                   5681 	.area CONST   (CODE)
      00009C                       5682 ___str_12:
      00009C 4C 69 6E 65 46 69 20  5683 	.ascii "LineFi Uart Tx High"
             55 61 72 74 20 54 78
             20 48 69 67 68
      0000AF 0D                    5684 	.db 0x0d
      0000B0 0A                    5685 	.db 0x0a
      0000B1 00                    5686 	.db 0x00
                                   5687 	.area CSEG    (CODE)
                                   5688 	.area CONST   (CODE)
      0000B2                       5689 ___str_13:
      0000B2 4C 69 6E 65 46 69 20  5690 	.ascii "LineFi CSC rx FSM Off"
             43 53 43 20 72 78 20
             46 53 4D 20 4F 66 66
      0000C7 0D                    5691 	.db 0x0d
      0000C8 0A                    5692 	.db 0x0a
      0000C9 00                    5693 	.db 0x00
                                   5694 	.area CSEG    (CODE)
                                   5695 	.area CONST   (CODE)
      0000CA                       5696 ___str_14:
      0000CA 4C 69 6E 65 46 69 20  5697 	.ascii "LineFi CSC rx FSM ON"
             43 53 43 20 72 78 20
             46 53 4D 20 4F 4E
      0000DE 0D                    5698 	.db 0x0d
      0000DF 0A                    5699 	.db 0x0a
      0000E0 00                    5700 	.db 0x00
                                   5701 	.area CSEG    (CODE)
                                   5702 	.area CONST   (CODE)
      0000E1                       5703 ___str_15:
      0000E1 56 65 72 73 69 6F 6E  5704 	.ascii "Version 1.4 on 20231026"
             20 31 2E 34 20 6F 6E
             20 32 30 32 33 31 30
             32 36
      0000F8 0D                    5705 	.db 0x0d
      0000F9 0A                    5706 	.db 0x0a
      0000FA 00                    5707 	.db 0x00
                                   5708 	.area CSEG    (CODE)
                                   5709 	.area CONST   (CODE)
      0000FB                       5710 ___str_16:
      0000FB 31 3A 20 64 6F 77 6E  5711 	.ascii "1: downlink packet 1"
             6C 69 6E 6B 20 70 61
             63 6B 65 74 20 31
      00010F 0D                    5712 	.db 0x0d
      000110 0A                    5713 	.db 0x0a
      000111 00                    5714 	.db 0x00
                                   5715 	.area CSEG    (CODE)
                                   5716 	.area CONST   (CODE)
      000112                       5717 ___str_17:
      000112 32 3A 20 64 6F 77 6E  5718 	.ascii "2: downlink packet 2"
             6C 69 6E 6B 20 70 61
             63 6B 65 74 20 32
      000126 0D                    5719 	.db 0x0d
      000127 0A                    5720 	.db 0x0a
      000128 00                    5721 	.db 0x00
                                   5722 	.area CSEG    (CODE)
                                   5723 	.area CONST   (CODE)
      000129                       5724 ___str_18:
      000129 33 3A 20 75 70 6C 69  5725 	.ascii "3: uplink idle preamble on/off"
             6E 6B 20 69 64 6C 65
             20 70 72 65 61 6D 62
             6C 65 20 6F 6E 2F 6F
             66 66
      000147 0D                    5726 	.db 0x0d
      000148 0A                    5727 	.db 0x0a
      000149 00                    5728 	.db 0x00
                                   5729 	.area CSEG    (CODE)
                                   5730 	.area CONST   (CODE)
      00014A                       5731 ___str_19:
      00014A 70 2F 50 3A 20 4C 69  5732 	.ascii "p/P: LineFi Power off/on"
             6E 65 46 69 20 50 6F
             77 65 72 20 6F 66 66
             2F 6F 6E
      000162 0D                    5733 	.db 0x0d
      000163 0A                    5734 	.db 0x0a
      000164 00                    5735 	.db 0x00
                                   5736 	.area CSEG    (CODE)
                                   5737 	.area CONST   (CODE)
      000165                       5738 ___str_20:
      000165 74 2F 54 3A 20 4C 69  5739 	.ascii "t/T: LineFi Uart Tx Low/High"
             6E 65 46 69 20 55 61
             72 74 20 54 78 20 4C
             6F 77 2F 48 69 67 68
      000181 0D                    5740 	.db 0x0d
      000182 0A                    5741 	.db 0x0a
      000183 00                    5742 	.db 0x00
                                   5743 	.area CSEG    (CODE)
                                   5744 	.area CONST   (CODE)
      000184                       5745 ___str_21:
      000184 73 2F 53 3A 20 4C 69  5746 	.ascii "s/S: LineFie CSC Rx FSM off/on"
             6E 65 46 69 65 20 43
             53 43 20 52 78 20 46
             53 4D 20 6F 66 66 2F
             6F 6E
      0001A2 0D                    5747 	.db 0x0d
      0001A3 0A                    5748 	.db 0x0a
      0001A4 00                    5749 	.db 0x00
                                   5750 	.area CSEG    (CODE)
                                   5751 	.area CONST   (CODE)
      0001A5                       5752 ___str_22:
      0001A5 74 65 73 74 20 70 72  5753 	.ascii "test procedure: p -> P -> T -> S -> 1 or 2"
             6F 63 65 64 75 72 65
             3A 20 70 20 2D 3E 20
             50 20 2D 3E 20 54 20
             2D 3E 20 53 20 2D 3E
             20 31 20 6F 72 20 32
      0001CF 0D                    5754 	.db 0x0d
      0001D0 0A                    5755 	.db 0x0a
      0001D1 00                    5756 	.db 0x00
                                   5757 	.area CSEG    (CODE)
                                   5758 	.area CONST   (CODE)
      0001D2                       5759 ___str_23:
      0001D2 74 3A 20 74 69 6D 65  5760 	.ascii "t: timer"
             72
      0001DA 0D                    5761 	.db 0x0d
      0001DB 0A                    5762 	.db 0x0a
      0001DC 00                    5763 	.db 0x00
                                   5764 	.area CSEG    (CODE)
                                   5765 	.area CONST   (CODE)
      0001DD                       5766 ___str_24:
      0001DD 30 3A 20 4C 69 6E 65  5767 	.ascii "0: LineFi EN0,1,2 off"
             46 69 20 45 4E 30 2C
             31 2C 32 20 6F 66 66
      0001F2 0D                    5768 	.db 0x0d
      0001F3 0A                    5769 	.db 0x0a
      0001F4 00                    5770 	.db 0x00
                                   5771 	.area CSEG    (CODE)
                                   5772 	.area CONST   (CODE)
      0001F5                       5773 ___str_25:
      0001F5 31 3A 20 4C 69 6E 65  5774 	.ascii "1: LineFi EN0 = 1"
             46 69 20 45 4E 30 20
             3D 20 31
      000206 0D                    5775 	.db 0x0d
      000207 0A                    5776 	.db 0x0a
      000208 00                    5777 	.db 0x00
                                   5778 	.area CSEG    (CODE)
                                   5779 	.area CONST   (CODE)
      000209                       5780 ___str_26:
      000209 32 3A                 5781 	.ascii "2:"
      00020B 0D                    5782 	.db 0x0d
      00020C 0A                    5783 	.db 0x0a
      00020D 00                    5784 	.db 0x00
                                   5785 	.area CSEG    (CODE)
                                   5786 	.area CONST   (CODE)
      00020E                       5787 ___str_27:
      00020E 33 3A                 5788 	.ascii "3:"
      000210 0D                    5789 	.db 0x0d
      000211 0A                    5790 	.db 0x0a
      000212 00                    5791 	.db 0x00
                                   5792 	.area CSEG    (CODE)
                                   5793 	.area CONST   (CODE)
      000213                       5794 ___str_28:
      000213 34 3A                 5795 	.ascii "4:"
      000215 0D                    5796 	.db 0x0d
      000216 0A                    5797 	.db 0x0a
      000217 00                    5798 	.db 0x00
                                   5799 	.area CSEG    (CODE)
                                   5800 	.area CONST   (CODE)
      000218                       5801 ___str_29:
      000218 35 3A                 5802 	.ascii "5:"
      00021A 0D                    5803 	.db 0x0d
      00021B 0A                    5804 	.db 0x0a
      00021C 00                    5805 	.db 0x00
                                   5806 	.area CSEG    (CODE)
                                   5807 	.area CONST   (CODE)
      00021D                       5808 ___str_30:
      00021D 36 3A                 5809 	.ascii "6:"
      00021F 0D                    5810 	.db 0x0d
      000220 0A                    5811 	.db 0x0a
      000221 00                    5812 	.db 0x00
                                   5813 	.area CSEG    (CODE)
                                   5814 	.area CONST   (CODE)
      000222                       5815 ___str_31:
      000222 37 3A                 5816 	.ascii "7:"
      000224 0D                    5817 	.db 0x0d
      000225 0A                    5818 	.db 0x0a
      000226 00                    5819 	.db 0x00
                                   5820 	.area CSEG    (CODE)
                                   5821 	.area CONST   (CODE)
      000227                       5822 ___str_32:
      000227 68 3A 20 41 64 64 72  5823 	.ascii "h: Addr--"
             2D 2D
      000230 0D                    5824 	.db 0x0d
      000231 0A                    5825 	.db 0x0a
      000232 00                    5826 	.db 0x00
                                   5827 	.area CSEG    (CODE)
                                   5828 	.area CONST   (CODE)
      000233                       5829 ___str_33:
      000233 6A 3A 20 43 6D 64 2D  5830 	.ascii "j: Cmd--"
             2D
      00023B 0D                    5831 	.db 0x0d
      00023C 0A                    5832 	.db 0x0a
      00023D 00                    5833 	.db 0x00
                                   5834 	.area CSEG    (CODE)
                                   5835 	.area CONST   (CODE)
      00023E                       5836 ___str_34:
      00023E 6B 3A 20 43 6D 64 2B  5837 	.ascii "k: Cmd++"
             2B
      000246 0D                    5838 	.db 0x0d
      000247 0A                    5839 	.db 0x0a
      000248 00                    5840 	.db 0x00
                                   5841 	.area CSEG    (CODE)
                                   5842 	.area CONST   (CODE)
      000249                       5843 ___str_35:
      000249 6C 3A 20 41 64 64 72  5844 	.ascii "l: Addr++"
             2B 2B
      000252 0D                    5845 	.db 0x0d
      000253 0A                    5846 	.db 0x0a
      000254 00                    5847 	.db 0x00
                                   5848 	.area CSEG    (CODE)
                                   5849 	.area CONST   (CODE)
      000255                       5850 ___str_36:
      000255 73 3A 20 73 65 6E 64  5851 	.ascii "s: sending"
             69 6E 67
      00025F 0D                    5852 	.db 0x0d
      000260 0A                    5853 	.db 0x0a
      000261 00                    5854 	.db 0x00
                                   5855 	.area CSEG    (CODE)
                                   5856 	.area CONST   (CODE)
      000262                       5857 ___str_37:
      000262 25 75                 5858 	.ascii "%u"
      000264 0A                    5859 	.db 0x0a
      000265 0D                    5860 	.db 0x0d
      000266 00                    5861 	.db 0x00
                                   5862 	.area CSEG    (CODE)
                                   5863 	.area CONST   (CODE)
      000267                       5864 ___str_38:
      000267 4C 49 4E 45 46 49 5F  5865 	.ascii "LINEFI_EN0=0"
             45 4E 30 3D 30
      000273 0A                    5866 	.db 0x0a
      000274 0D                    5867 	.db 0x0d
      000275 00                    5868 	.db 0x00
                                   5869 	.area CSEG    (CODE)
                                   5870 	.area CONST   (CODE)
      000276                       5871 ___str_39:
      000276 4C 49 4E 45 46 49 5F  5872 	.ascii "LINEFI_EN0=1"
             45 4E 30 3D 31
      000282 0A                    5873 	.db 0x0a
      000283 0D                    5874 	.db 0x0d
      000284 00                    5875 	.db 0x00
                                   5876 	.area CSEG    (CODE)
                                   5877 	.area CONST   (CODE)
      000285                       5878 ___str_40:
      000285 4C 49 4E 45 46 49 5F  5879 	.ascii "LINEFI_TX=0"
             54 58 3D 30
      000290 0A                    5880 	.db 0x0a
      000291 0D                    5881 	.db 0x0d
      000292 00                    5882 	.db 0x00
                                   5883 	.area CSEG    (CODE)
                                   5884 	.area CONST   (CODE)
      000293                       5885 ___str_41:
      000293 4C 49 4E 45 46 49 5F  5886 	.ascii "LINEFI_TX=1"
             54 58 3D 31
      00029E 0A                    5887 	.db 0x0a
      00029F 0D                    5888 	.db 0x0d
      0002A0 00                    5889 	.db 0x00
                                   5890 	.area CSEG    (CODE)
                                   5891 	.area CONST   (CODE)
      0002A1                       5892 ___str_42:
      0002A1 4C 49 4E 45 46 49 5F  5893 	.ascii "LINEFI_TX=%d"
             54 58 3D 25 64
      0002AD 0A                    5894 	.db 0x0a
      0002AE 0D                    5895 	.db 0x0d
      0002AF 00                    5896 	.db 0x00
                                   5897 	.area CSEG    (CODE)
                                   5898 	.area CONST   (CODE)
      0002B0                       5899 ___str_43:
      0002B0 4C 49 4E 45 46 49 5F  5900 	.ascii "LINEFI_EN0="
             45 4E 30 3D
      0002BB 00                    5901 	.db 0x00
                                   5902 	.area CSEG    (CODE)
                                   5903 	.area CONST   (CODE)
      0002BC                       5904 ___str_44:
      0002BC 25 64                 5905 	.ascii "%d"
      0002BE 0A                    5906 	.db 0x0a
      0002BF 0D                    5907 	.db 0x0d
      0002C0 00                    5908 	.db 0x00
                                   5909 	.area CSEG    (CODE)
                                   5910 	.area CONST   (CODE)
      0002C1                       5911 ___str_45:
      0002C1 4C 49 4E 45 46 49 5F  5912 	.ascii "LINEFI_EN1="
             45 4E 31 3D
      0002CC 00                    5913 	.db 0x00
                                   5914 	.area CSEG    (CODE)
                                   5915 	.area CONST   (CODE)
      0002CD                       5916 ___str_46:
      0002CD 4C 49 4E 45 46 49 5F  5917 	.ascii "LINEFI_EN2="
             45 4E 32 3D
      0002D8 00                    5918 	.db 0x00
                                   5919 	.area CSEG    (CODE)
                                   5920 	.area CONST   (CODE)
      0002D9                       5921 ___str_47:
      0002D9 75 61 72 74 20 73 70  5922 	.ascii "uart speed: %lu:"
             65 65 64 3A 20 25 6C
             75 3A
      0002E9 0A                    5923 	.db 0x0a
      0002EA 0D                    5924 	.db 0x0d
      0002EB 00                    5925 	.db 0x00
                                   5926 	.area CSEG    (CODE)
                                   5927 	.area CONST   (CODE)
      0002EC                       5928 ___str_48:
      0002EC 61 64 64 72 65 73 73  5929 	.ascii "address: %d"
             3A 20 25 64
      0002F7 0A                    5930 	.db 0x0a
      0002F8 0D                    5931 	.db 0x0d
      0002F9 00                    5932 	.db 0x00
                                   5933 	.area CSEG    (CODE)
                                   5934 	.area CONST   (CODE)
      0002FA                       5935 ___str_49:
      0002FA 63 6F 6D 6D 61 6E 64  5936 	.ascii "command: %d"
             3A 20 25 64
      000305 0A                    5937 	.db 0x0a
      000306 0D                    5938 	.db 0x0d
      000307 00                    5939 	.db 0x00
                                   5940 	.area CSEG    (CODE)
                                   5941 	.area CONST   (CODE)
      000308                       5942 ___str_50:
      000308 4C 69 6E 65 46 69 20  5943 	.ascii "LineFi Sending: 0x%x:"
             53 65 6E 64 69 6E 67
             3A 20 30 78 25 78 3A
      00031D 0A                    5944 	.db 0x0a
      00031E 0D                    5945 	.db 0x0d
      00031F 00                    5946 	.db 0x00
                                   5947 	.area CSEG    (CODE)
                                   5948 	.area CONST   (CODE)
      000320                       5949 ___str_51:
      000320 61 64 64 72 65 73 73  5950 	.ascii "address: 0x%d:"
             3A 20 30 78 25 64 3A
      00032E 0A                    5951 	.db 0x0a
      00032F 0D                    5952 	.db 0x0d
      000330 00                    5953 	.db 0x00
                                   5954 	.area CSEG    (CODE)
                                   5955 	.area CONST   (CODE)
      000331                       5956 ___str_52:
      000331 4C 69 6E 65 46 69 20  5957 	.ascii "LineFi Sending: %d(0x%x)"
             53 65 6E 64 69 6E 67
             3A 20 25 64 28 30 78
             25 78 29
      000349 0A                    5958 	.db 0x0a
      00034A 0D                    5959 	.db 0x0d
      00034B 00                    5960 	.db 0x00
                                   5961 	.area CSEG    (CODE)
                                   5962 	.area CONST   (CODE)
      00034C                       5963 ___str_53:
      00034C 73 65 6E 64 20 64 61  5964 	.ascii "send data %d(0x%x)"
             74 61 20 25 64 28 30
             78 25 78 29
      00035E 0A                    5965 	.db 0x0a
      00035F 0D                    5966 	.db 0x0d
      000360 00                    5967 	.db 0x00
                                   5968 	.area CSEG    (CODE)
                                   5969 	.area CONST   (CODE)
      000361                       5970 ___str_54:
      000361 52 6F 74 61 74 65 21  5971 	.ascii "Rotate!!:%d "
             21 3A 25 64 20
      00036D 0A                    5972 	.db 0x0a
      00036E 0D                    5973 	.db 0x0d
      00036F 00                    5974 	.db 0x00
                                   5975 	.area CSEG    (CODE)
                                   5976 	.area CONST   (CODE)
      000370                       5977 ___str_55:
      000370 53 74 6F 70 20 20 20  5978 	.ascii "Stop    :%d "
             20 3A 25 64 20
      00037C 0A                    5979 	.db 0x0a
      00037D 0D                    5980 	.db 0x0d
      00037E 00                    5981 	.db 0x00
                                   5982 	.area CSEG    (CODE)
                                   5983 	.area CONST   (CODE)
      00037F                       5984 ___str_56:
      00037F 25 6C 75 28 25 78 2C  5985 	.ascii "%lu(%x, %x, %x)"
             20 25 78 2C 20 25 78
             29
      00038E 0D                    5986 	.db 0x0d
      00038F 0A                    5987 	.db 0x0a
      000390 00                    5988 	.db 0x00
                                   5989 	.area CSEG    (CODE)
                                   5990 	.area CONST   (CODE)
      000391                       5991 ___str_57:
      000391 54 68 69 73 20 69 73  5992 	.ascii "This is UART0"
             20 55 41 52 54 30
      00039E 0A                    5993 	.db 0x0a
      00039F 0D                    5994 	.db 0x0d
      0003A0 00                    5995 	.db 0x00
                                   5996 	.area CSEG    (CODE)
                                   5997 	.area CONST   (CODE)
      0003A1                       5998 ___str_58:
      0003A1 4C 69 6E 65 46 69 20  5999 	.ascii "LineFi Master"
             4D 61 73 74 65 72
      0003AE 0A                    6000 	.db 0x0a
      0003AF 0D                    6001 	.db 0x0d
      0003B0 00                    6002 	.db 0x00
                                   6003 	.area CSEG    (CODE)
                                   6004 	.area CONST   (CODE)
      0003B1                       6005 ___str_59:
      0003B1 54 68 69 73 20 69 73  6006 	.ascii "This is UART1"
             20 55 41 52 54 31
      0003BE 0A                    6007 	.db 0x0a
      0003BF 0D                    6008 	.db 0x0d
      0003C0 00                    6009 	.db 0x00
                                   6010 	.area CSEG    (CODE)
                                   6011 	.area CONST   (CODE)
      0003C1                       6012 ___str_60:
      0003C1 25 73                 6013 	.ascii "%s"
      0003C3 0D                    6014 	.db 0x0d
      0003C4 0A                    6015 	.db 0x0a
      0003C5 00                    6016 	.db 0x00
                                   6017 	.area CSEG    (CODE)
                                   6018 	.area CONST   (CODE)
      0003C6                       6019 ___str_61:
      0003C6 44 61 74 61 49 64 78  6020 	.ascii "DataIdx:%d"
             3A 25 64
      0003D0 0D                    6021 	.db 0x0d
      0003D1 0A                    6022 	.db 0x0a
      0003D2 00                    6023 	.db 0x00
                                   6024 	.area CSEG    (CODE)
                                   6025 	.area CONST   (CODE)
      0003D3                       6026 ___str_62:
      0003D3 30 78 25 78 20        6027 	.ascii "0x%x "
      0003D8 00                    6028 	.db 0x00
                                   6029 	.area CSEG    (CODE)
                                   6030 	.area CONST   (CODE)
      0003D9                       6031 ___str_63:
      0003D9 53 54 41 52 54 20 70  6032 	.ascii "START periodic packet generating.."
             65 72 69 6F 64 69 63
             20 70 61 63 6B 65 74
             20 67 65 6E 65 72 61
             74 69 6E 67 2E 2E
      0003FB 0D                    6033 	.db 0x0d
      0003FC 0A                    6034 	.db 0x0a
      0003FD 00                    6035 	.db 0x00
                                   6036 	.area CSEG    (CODE)
                                   6037 	.area CONST   (CODE)
      0003FE                       6038 ___str_64:
      0003FE 53 54 4F 50 20 20 70  6039 	.ascii "STOP  periodic packet generating.."
             65 72 69 6F 64 69 63
             20 70 61 63 6B 65 74
             20 67 65 6E 65 72 61
             74 69 6E 67 2E 2E
      000420 0D                    6040 	.db 0x0d
      000421 0A                    6041 	.db 0x0a
      000422 00                    6042 	.db 0x00
                                   6043 	.area CSEG    (CODE)
                                   6044 	.area CONST   (CODE)
      000423                       6045 ___str_65:
      000423 4F 4B                 6046 	.ascii "OK"
      000425 00                    6047 	.db 0x00
                                   6048 	.area CSEG    (CODE)
                                   6049 	.area CONST   (CODE)
      000426                       6050 ___str_66:
      000426 73 74 61 72 74 69 6E  6051 	.ascii "starting ALOHA..."
             67 20 41 4C 4F 48 41
             2E 2E 2E
      000437 0D                    6052 	.db 0x0d
      000438 0A                    6053 	.db 0x0a
      000439 00                    6054 	.db 0x00
                                   6055 	.area CSEG    (CODE)
                                   6056 	.area CONST   (CODE)
      00043A                       6057 ___str_67:
      00043A 73 74 6F 70 70 69 6E  6058 	.ascii "stopping ALOHA..."
             67 20 41 4C 4F 48 41
             2E 2E 2E
      00044B 00                    6059 	.db 0x00
                                   6060 	.area CSEG    (CODE)
                                   6061 	.area CONST   (CODE)
      00044C                       6062 ___str_68:
      00044C 31 30 30 30 20        6063 	.ascii "1000 "
      000451 00                    6064 	.db 0x00
                                   6065 	.area CSEG    (CODE)
                                   6066 	.area CONST   (CODE)
      000452                       6067 ___str_69:
      000452 53 6C 61 76 65 5F 41  6068 	.ascii "Slave_ADDR: %d, UL_Packet_num: %d"
             44 44 52 3A 20 25 64
             2C 20 55 4C 5F 50 61
             63 6B 65 74 5F 6E 75
             6D 3A 20 25 64
      000473 0D                    6069 	.db 0x0d
      000474 0A                    6070 	.db 0x0a
      000475 00                    6071 	.db 0x00
                                   6072 	.area CSEG    (CODE)
                                   6073 	.area CONST   (CODE)
      000476                       6074 ___str_70:
      000476 0D                    6075 	.db 0x0d
      000477 0A                    6076 	.db 0x0a
      000478 0D                    6077 	.db 0x0d
      000479 0A                    6078 	.db 0x0a
      00047A 00                    6079 	.db 0x00
                                   6080 	.area CSEG    (CODE)
                                   6081 	.area CONST   (CODE)
      00047B                       6082 ___str_71:
      00047B 73 74 6F 70 70 69 6E  6083 	.ascii "stopping..."
             67 2E 2E 2E
      000486 0D                    6084 	.db 0x0d
      000487 0A                    6085 	.db 0x0a
      000488 00                    6086 	.db 0x00
                                   6087 	.area CSEG    (CODE)
                                   6088 	.area CONST   (CODE)
      000489                       6089 ___str_72:
      000489 55 41 52 54 30 5F 49  6090 	.ascii "UART0_INPUT_MODE0:one key control"
             4E 50 55 54 5F 4D 4F
             44 45 30 3A 6F 6E 65
             20 6B 65 79 20 63 6F
             6E 74 72 6F 6C
      0004AA 00                    6091 	.db 0x00
                                   6092 	.area CSEG    (CODE)
                                   6093 	.area CONST   (CODE)
      0004AB                       6094 ___str_73:
      0004AB 55 41 52 54 30 5F 49  6095 	.ascii "UART0_INPUT_MODE1:string input"
             4E 50 55 54 5F 4D 4F
             44 45 31 3A 73 74 72
             69 6E 67 20 69 6E 70
             75 74
      0004C9 00                    6096 	.db 0x00
                                   6097 	.area CSEG    (CODE)
                                   6098 	.area CONST   (CODE)
      0004CA                       6099 ___str_74:
      0004CA 55 41 52 54 30 5F 49  6100 	.ascii "UART0_INPUT_MODE2:mimic 5keys on board"
             4E 50 55 54 5F 4D 4F
             44 45 32 3A 6D 69 6D
             69 63 20 35 6B 65 79
             73 20 6F 6E 20 62 6F
             61 72 64
      0004F0 00                    6101 	.db 0x00
                                   6102 	.area CSEG    (CODE)
                                   6103 	.area CONST   (CODE)
      0004F1                       6104 ___str_75:
      0004F1 55 41 52 54 30 5F 49  6105 	.ascii "UART0_INPUT_MODE3:data setting"
             4E 50 55 54 5F 4D 4F
             44 45 33 3A 64 61 74
             61 20 73 65 74 74 69
             6E 67
      00050F 00                    6106 	.db 0x00
                                   6107 	.area CSEG    (CODE)
                                   6108 	.area CONST   (CODE)
      000510                       6109 ___str_76:
      000510 55 41 52 54 30 5F 49  6110 	.ascii "UART0_INPUT_MODE4:periodic function"
             4E 50 55 54 5F 4D 4F
             44 45 34 3A 70 65 72
             69 6F 64 69 63 20 66
             75 6E 63 74 69 6F 6E
      000533 00                    6111 	.db 0x00
                                   6112 	.area CSEG    (CODE)
                                   6113 	.area CONST   (CODE)
      000534                       6114 ___str_77:
      000534 55 41 52 54 30 5F 49  6115 	.ascii "UART0_INPUT_MODE5:uplink test"
             4E 50 55 54 5F 4D 4F
             44 45 35 3A 75 70 6C
             69 6E 6B 20 74 65 73
             74
      000551 00                    6116 	.db 0x00
                                   6117 	.area CSEG    (CODE)
                                   6118 	.area CONST   (CODE)
      000552                       6119 ___str_78:
      000552 55 41 52 54 30 5F 49  6120 	.ascii "UART0_INPUT_MODE6:loopback test"
             4E 50 55 54 5F 4D 4F
             44 45 36 3A 6C 6F 6F
             70 62 61 63 6B 20 74
             65 73 74
      000571 00                    6121 	.db 0x00
                                   6122 	.area CSEG    (CODE)
                                   6123 	.area CONST   (CODE)
      000572                       6124 ___str_79:
      000572 55 41 52 54 30 5F 49  6125 	.ascii "UART0_INPUT_MODE7:pass through"
             4E 50 55 54 5F 4D 4F
             44 45 37 3A 70 61 73
             73 20 74 68 72 6F 75
             67 68
      000590 00                    6126 	.db 0x00
                                   6127 	.area CSEG    (CODE)
                                   6128 	.area CONST   (CODE)
      000591                       6129 ___str_80:
      000591 55 41 52 54 30 5F 49  6130 	.ascii "UART0_INPUT_MODE8: uplink rx"
             4E 50 55 54 5F 4D 4F
             44 45 38 3A 20 75 70
             6C 69 6E 6B 20 72 78
      0005AD 00                    6131 	.db 0x00
                                   6132 	.area CSEG    (CODE)
                                   6133 	.area CABS    (ABS,CODE)
