                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module uart
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _getstr_uart1_PARM_2
                                     12 	.globl _getstr_uart0_PARM_2
                                     13 	.globl _Uart1Tx_ISR
                                     14 	.globl _Uart0Tx_ISR
                                     15 	.globl _InitialUART1_Timer3
                                     16 	.globl _InitialUART0_Timer1
                                     17 	.globl _MOSI
                                     18 	.globl _P00
                                     19 	.globl _MISO
                                     20 	.globl _P01
                                     21 	.globl _RXD_1
                                     22 	.globl _P02
                                     23 	.globl _P03
                                     24 	.globl _STADC
                                     25 	.globl _P04
                                     26 	.globl _P05
                                     27 	.globl _TXD
                                     28 	.globl _P06
                                     29 	.globl _RXD
                                     30 	.globl _P07
                                     31 	.globl _IT0
                                     32 	.globl _IE0
                                     33 	.globl _IT1
                                     34 	.globl _IE1
                                     35 	.globl _TR0
                                     36 	.globl _TF0
                                     37 	.globl _TR1
                                     38 	.globl _TF1
                                     39 	.globl _P10
                                     40 	.globl _P11
                                     41 	.globl _P12
                                     42 	.globl _SCL
                                     43 	.globl _P13
                                     44 	.globl _SDA
                                     45 	.globl _P14
                                     46 	.globl _P15
                                     47 	.globl _TXD_1
                                     48 	.globl _P16
                                     49 	.globl _P17
                                     50 	.globl _RI
                                     51 	.globl _TI
                                     52 	.globl _RB8
                                     53 	.globl _TB8
                                     54 	.globl _REN
                                     55 	.globl _SM2
                                     56 	.globl _SM1
                                     57 	.globl _FE
                                     58 	.globl _SM0
                                     59 	.globl _P20
                                     60 	.globl _EX0
                                     61 	.globl _ET0
                                     62 	.globl _EX1
                                     63 	.globl _ET1
                                     64 	.globl _ES
                                     65 	.globl _EBOD
                                     66 	.globl _EADC
                                     67 	.globl _EA
                                     68 	.globl _P30
                                     69 	.globl _PX0
                                     70 	.globl _PT0
                                     71 	.globl _PX1
                                     72 	.globl _PT1
                                     73 	.globl _PS
                                     74 	.globl _PBOD
                                     75 	.globl _PADC
                                     76 	.globl _I2CPX
                                     77 	.globl _AA
                                     78 	.globl _SI
                                     79 	.globl _STO
                                     80 	.globl _STA
                                     81 	.globl _I2CEN
                                     82 	.globl _CM_RL2
                                     83 	.globl _TR2
                                     84 	.globl _TF2
                                     85 	.globl _P
                                     86 	.globl _OV
                                     87 	.globl _RS0
                                     88 	.globl _RS1
                                     89 	.globl _F0
                                     90 	.globl _AC
                                     91 	.globl _CY
                                     92 	.globl _CLRPWM
                                     93 	.globl _PWMF
                                     94 	.globl _LOAD
                                     95 	.globl _PWMRUN
                                     96 	.globl _ADCHS0
                                     97 	.globl _ADCHS1
                                     98 	.globl _ADCHS2
                                     99 	.globl _ADCHS3
                                    100 	.globl _ETGSEL0
                                    101 	.globl _ETGSEL1
                                    102 	.globl _ADCS
                                    103 	.globl _ADCF
                                    104 	.globl _RI_1
                                    105 	.globl _TI_1
                                    106 	.globl _RB8_1
                                    107 	.globl _TB8_1
                                    108 	.globl _REN_1
                                    109 	.globl _SM2_1
                                    110 	.globl _SM1_1
                                    111 	.globl _FE_1
                                    112 	.globl _SM0_1
                                    113 	.globl _EIPH1
                                    114 	.globl _EIP1
                                    115 	.globl _PMD
                                    116 	.globl _PMEN
                                    117 	.globl _PDTCNT
                                    118 	.globl _PDTEN
                                    119 	.globl _SCON_1
                                    120 	.globl _EIPH
                                    121 	.globl _AINDIDS
                                    122 	.globl _SPDR
                                    123 	.globl _SPSR
                                    124 	.globl _SPCR2
                                    125 	.globl _SPCR
                                    126 	.globl _CAPCON4
                                    127 	.globl _CAPCON3
                                    128 	.globl _B
                                    129 	.globl _EIP
                                    130 	.globl _C2H
                                    131 	.globl _C2L
                                    132 	.globl _PIF
                                    133 	.globl _PIPEN
                                    134 	.globl _PINEN
                                    135 	.globl _PICON
                                    136 	.globl _ADCCON0
                                    137 	.globl _C1H
                                    138 	.globl _C1L
                                    139 	.globl _C0H
                                    140 	.globl _C0L
                                    141 	.globl _ADCDLY
                                    142 	.globl _ADCCON2
                                    143 	.globl _ADCCON1
                                    144 	.globl _ACC
                                    145 	.globl _PWMCON1
                                    146 	.globl _PIOCON0
                                    147 	.globl _PWM3L
                                    148 	.globl _PWM2L
                                    149 	.globl _PWM1L
                                    150 	.globl _PWM0L
                                    151 	.globl _PWMPL
                                    152 	.globl _PWMCON0
                                    153 	.globl _FBD
                                    154 	.globl _PNP
                                    155 	.globl _PWM3H
                                    156 	.globl _PWM2H
                                    157 	.globl _PWM1H
                                    158 	.globl _PWM0H
                                    159 	.globl _PWMPH
                                    160 	.globl _PSW
                                    161 	.globl _ADCMPH
                                    162 	.globl _ADCMPL
                                    163 	.globl _PWM5L
                                    164 	.globl _TH2
                                    165 	.globl _PWM4L
                                    166 	.globl _TL2
                                    167 	.globl _RCMP2H
                                    168 	.globl _RCMP2L
                                    169 	.globl _T2MOD
                                    170 	.globl _T2CON
                                    171 	.globl _TA
                                    172 	.globl _PIOCON1
                                    173 	.globl _RH3
                                    174 	.globl _PWM5H
                                    175 	.globl _RL3
                                    176 	.globl _PWM4H
                                    177 	.globl _T3CON
                                    178 	.globl _ADCRH
                                    179 	.globl _ADCRL
                                    180 	.globl _I2ADDR
                                    181 	.globl _I2CON
                                    182 	.globl _I2TOC
                                    183 	.globl _I2CLK
                                    184 	.globl _I2STAT
                                    185 	.globl _I2DAT
                                    186 	.globl _SADDR_1
                                    187 	.globl _SADEN_1
                                    188 	.globl _SADEN
                                    189 	.globl _IP
                                    190 	.globl _PWMINTC
                                    191 	.globl _IPH
                                    192 	.globl _P2S
                                    193 	.globl _P1SR
                                    194 	.globl _P1M2
                                    195 	.globl _P1S
                                    196 	.globl _P1M1
                                    197 	.globl _P0SR
                                    198 	.globl _P0M2
                                    199 	.globl _P0S
                                    200 	.globl _P0M1
                                    201 	.globl _P3
                                    202 	.globl _IAPCN
                                    203 	.globl _IAPFD
                                    204 	.globl _P3SR
                                    205 	.globl _P3M2
                                    206 	.globl _P3S
                                    207 	.globl _P3M1
                                    208 	.globl _BODCON1
                                    209 	.globl _WDCON
                                    210 	.globl _SADDR
                                    211 	.globl _IE
                                    212 	.globl _IAPAH
                                    213 	.globl _IAPAL
                                    214 	.globl _IAPUEN
                                    215 	.globl _IAPTRG
                                    216 	.globl _BODCON0
                                    217 	.globl _AUXR1
                                    218 	.globl _P2
                                    219 	.globl _CHPCON
                                    220 	.globl _EIE1
                                    221 	.globl _EIE
                                    222 	.globl _SBUF_1
                                    223 	.globl _SBUF
                                    224 	.globl _SCON
                                    225 	.globl _CKEN
                                    226 	.globl _CKSWT
                                    227 	.globl _CKDIV
                                    228 	.globl _CAPCON2
                                    229 	.globl _CAPCON1
                                    230 	.globl _CAPCON0
                                    231 	.globl _SFRS
                                    232 	.globl _P1
                                    233 	.globl _WKCON
                                    234 	.globl _CKCON
                                    235 	.globl _TH1
                                    236 	.globl _TH0
                                    237 	.globl _TL1
                                    238 	.globl _TL0
                                    239 	.globl _TMOD
                                    240 	.globl _TCON
                                    241 	.globl _PCON
                                    242 	.globl _RWK
                                    243 	.globl _RCTRIM1
                                    244 	.globl _RCTRIM0
                                    245 	.globl _DPH
                                    246 	.globl _DPL
                                    247 	.globl _SP
                                    248 	.globl _P0
                                    249 	.globl _gu8Uart1TCnt
                                    250 	.globl _gu8Uart1RCnt
                                    251 	.globl _gu8Uart0TCnt
                                    252 	.globl _gu8Uart0RCnt
                                    253 	.globl _gu8Tx1WIdx
                                    254 	.globl _gu8Tx1RIdx
                                    255 	.globl _gu8Tx1Size
                                    256 	.globl _gu8Rx1WIdx
                                    257 	.globl _gu8Rx1RIdx
                                    258 	.globl _gu8Rx1Size
                                    259 	.globl _gu8Tx0WIdx
                                    260 	.globl _gu8Tx0RIdx
                                    261 	.globl _gu8Tx0Size
                                    262 	.globl _gu8Rx0WIdx
                                    263 	.globl _gu8Rx0RIdx
                                    264 	.globl _gu8Rx0Size
                                    265 	.globl _pu8UartTx1Buf
                                    266 	.globl _pu8UartRx1Buf
                                    267 	.globl _pu8UartTx0Buf
                                    268 	.globl _pu8UartRx0Buf
                                    269 	.globl _gpcMC22B
                                    270 	.globl _gpc2B2MC
                                    271 	.globl _gu8BECnt
                                    272 	.globl _gu8BNECnt
                                    273 	.globl _gu8BFCnt
                                    274 	.globl _gu8BNFCnt
                                    275 	.globl _gu8UART
                                    276 	.globl _InitialUART0_Timer1
                                    277 	.globl _InitialUART0_Timer3
                                    278 	.globl _InitialUART1_Timer3
                                    279 	.globl _set_linefi_uplink_speed
                                    280 	.globl _putchar
                                    281 	.globl _uart_setup
                                    282 	.globl _SerialPort0_ISR
                                    283 	.globl _chkchar_uart0
                                    284 	.globl _getchar_uart0
                                    285 	.globl _getstr_uart0
                                    286 	.globl _SerialPort1_ISR
                                    287 	.globl _chkchar_uart1
                                    288 	.globl _getchar_uart1
                                    289 	.globl _getstr_uart1
                                    290 	.globl _putchar_uart0
                                    291 	.globl _putchar_uart1
                                    292 	.globl _preamble
                                    293 	.globl _putchar_manchester
                                    294 	.globl _chk_manchester
                                    295 	.globl _conv_manchester2nibble
                                    296 ;--------------------------------------------------------
                                    297 ; special function registers
                                    298 ;--------------------------------------------------------
                                    299 	.area RSEG    (ABS,DATA)
      000000                        300 	.org 0x0000
                           000080   301 _P0	=	0x0080
                           000081   302 _SP	=	0x0081
                           000082   303 _DPL	=	0x0082
                           000083   304 _DPH	=	0x0083
                           000084   305 _RCTRIM0	=	0x0084
                           000085   306 _RCTRIM1	=	0x0085
                           000086   307 _RWK	=	0x0086
                           000087   308 _PCON	=	0x0087
                           000088   309 _TCON	=	0x0088
                           000089   310 _TMOD	=	0x0089
                           00008A   311 _TL0	=	0x008a
                           00008B   312 _TL1	=	0x008b
                           00008C   313 _TH0	=	0x008c
                           00008D   314 _TH1	=	0x008d
                           00008E   315 _CKCON	=	0x008e
                           00008F   316 _WKCON	=	0x008f
                           000090   317 _P1	=	0x0090
                           000091   318 _SFRS	=	0x0091
                           000092   319 _CAPCON0	=	0x0092
                           000093   320 _CAPCON1	=	0x0093
                           000094   321 _CAPCON2	=	0x0094
                           000095   322 _CKDIV	=	0x0095
                           000096   323 _CKSWT	=	0x0096
                           000097   324 _CKEN	=	0x0097
                           000098   325 _SCON	=	0x0098
                           000099   326 _SBUF	=	0x0099
                           00009A   327 _SBUF_1	=	0x009a
                           00009B   328 _EIE	=	0x009b
                           00009C   329 _EIE1	=	0x009c
                           00009F   330 _CHPCON	=	0x009f
                           0000A0   331 _P2	=	0x00a0
                           0000A2   332 _AUXR1	=	0x00a2
                           0000A3   333 _BODCON0	=	0x00a3
                           0000A4   334 _IAPTRG	=	0x00a4
                           0000A5   335 _IAPUEN	=	0x00a5
                           0000A6   336 _IAPAL	=	0x00a6
                           0000A7   337 _IAPAH	=	0x00a7
                           0000A8   338 _IE	=	0x00a8
                           0000A9   339 _SADDR	=	0x00a9
                           0000AA   340 _WDCON	=	0x00aa
                           0000AB   341 _BODCON1	=	0x00ab
                           0000AC   342 _P3M1	=	0x00ac
                           0000AC   343 _P3S	=	0x00ac
                           0000AD   344 _P3M2	=	0x00ad
                           0000AD   345 _P3SR	=	0x00ad
                           0000AE   346 _IAPFD	=	0x00ae
                           0000AF   347 _IAPCN	=	0x00af
                           0000B0   348 _P3	=	0x00b0
                           0000B1   349 _P0M1	=	0x00b1
                           0000B1   350 _P0S	=	0x00b1
                           0000B2   351 _P0M2	=	0x00b2
                           0000B2   352 _P0SR	=	0x00b2
                           0000B3   353 _P1M1	=	0x00b3
                           0000B3   354 _P1S	=	0x00b3
                           0000B4   355 _P1M2	=	0x00b4
                           0000B4   356 _P1SR	=	0x00b4
                           0000B5   357 _P2S	=	0x00b5
                           0000B7   358 _IPH	=	0x00b7
                           0000B7   359 _PWMINTC	=	0x00b7
                           0000B8   360 _IP	=	0x00b8
                           0000B9   361 _SADEN	=	0x00b9
                           0000BA   362 _SADEN_1	=	0x00ba
                           0000BB   363 _SADDR_1	=	0x00bb
                           0000BC   364 _I2DAT	=	0x00bc
                           0000BD   365 _I2STAT	=	0x00bd
                           0000BE   366 _I2CLK	=	0x00be
                           0000BF   367 _I2TOC	=	0x00bf
                           0000C0   368 _I2CON	=	0x00c0
                           0000C1   369 _I2ADDR	=	0x00c1
                           0000C2   370 _ADCRL	=	0x00c2
                           0000C3   371 _ADCRH	=	0x00c3
                           0000C4   372 _T3CON	=	0x00c4
                           0000C4   373 _PWM4H	=	0x00c4
                           0000C5   374 _RL3	=	0x00c5
                           0000C5   375 _PWM5H	=	0x00c5
                           0000C6   376 _RH3	=	0x00c6
                           0000C6   377 _PIOCON1	=	0x00c6
                           0000C7   378 _TA	=	0x00c7
                           0000C8   379 _T2CON	=	0x00c8
                           0000C9   380 _T2MOD	=	0x00c9
                           0000CA   381 _RCMP2L	=	0x00ca
                           0000CB   382 _RCMP2H	=	0x00cb
                           0000CC   383 _TL2	=	0x00cc
                           0000CC   384 _PWM4L	=	0x00cc
                           0000CD   385 _TH2	=	0x00cd
                           0000CD   386 _PWM5L	=	0x00cd
                           0000CE   387 _ADCMPL	=	0x00ce
                           0000CF   388 _ADCMPH	=	0x00cf
                           0000D0   389 _PSW	=	0x00d0
                           0000D1   390 _PWMPH	=	0x00d1
                           0000D2   391 _PWM0H	=	0x00d2
                           0000D3   392 _PWM1H	=	0x00d3
                           0000D4   393 _PWM2H	=	0x00d4
                           0000D5   394 _PWM3H	=	0x00d5
                           0000D6   395 _PNP	=	0x00d6
                           0000D7   396 _FBD	=	0x00d7
                           0000D8   397 _PWMCON0	=	0x00d8
                           0000D9   398 _PWMPL	=	0x00d9
                           0000DA   399 _PWM0L	=	0x00da
                           0000DB   400 _PWM1L	=	0x00db
                           0000DC   401 _PWM2L	=	0x00dc
                           0000DD   402 _PWM3L	=	0x00dd
                           0000DE   403 _PIOCON0	=	0x00de
                           0000DF   404 _PWMCON1	=	0x00df
                           0000E0   405 _ACC	=	0x00e0
                           0000E1   406 _ADCCON1	=	0x00e1
                           0000E2   407 _ADCCON2	=	0x00e2
                           0000E3   408 _ADCDLY	=	0x00e3
                           0000E4   409 _C0L	=	0x00e4
                           0000E5   410 _C0H	=	0x00e5
                           0000E6   411 _C1L	=	0x00e6
                           0000E7   412 _C1H	=	0x00e7
                           0000E8   413 _ADCCON0	=	0x00e8
                           0000E9   414 _PICON	=	0x00e9
                           0000EA   415 _PINEN	=	0x00ea
                           0000EB   416 _PIPEN	=	0x00eb
                           0000EC   417 _PIF	=	0x00ec
                           0000ED   418 _C2L	=	0x00ed
                           0000EE   419 _C2H	=	0x00ee
                           0000EF   420 _EIP	=	0x00ef
                           0000F0   421 _B	=	0x00f0
                           0000F1   422 _CAPCON3	=	0x00f1
                           0000F2   423 _CAPCON4	=	0x00f2
                           0000F3   424 _SPCR	=	0x00f3
                           0000F3   425 _SPCR2	=	0x00f3
                           0000F4   426 _SPSR	=	0x00f4
                           0000F5   427 _SPDR	=	0x00f5
                           0000F6   428 _AINDIDS	=	0x00f6
                           0000F7   429 _EIPH	=	0x00f7
                           0000F8   430 _SCON_1	=	0x00f8
                           0000F9   431 _PDTEN	=	0x00f9
                           0000FA   432 _PDTCNT	=	0x00fa
                           0000FB   433 _PMEN	=	0x00fb
                           0000FC   434 _PMD	=	0x00fc
                           0000FE   435 _EIP1	=	0x00fe
                           0000FF   436 _EIPH1	=	0x00ff
                                    437 ;--------------------------------------------------------
                                    438 ; special function bits
                                    439 ;--------------------------------------------------------
                                    440 	.area RSEG    (ABS,DATA)
      000000                        441 	.org 0x0000
                           0000FF   442 _SM0_1	=	0x00ff
                           0000FF   443 _FE_1	=	0x00ff
                           0000FE   444 _SM1_1	=	0x00fe
                           0000FD   445 _SM2_1	=	0x00fd
                           0000FC   446 _REN_1	=	0x00fc
                           0000FB   447 _TB8_1	=	0x00fb
                           0000FA   448 _RB8_1	=	0x00fa
                           0000F9   449 _TI_1	=	0x00f9
                           0000F8   450 _RI_1	=	0x00f8
                           0000EF   451 _ADCF	=	0x00ef
                           0000EE   452 _ADCS	=	0x00ee
                           0000ED   453 _ETGSEL1	=	0x00ed
                           0000EC   454 _ETGSEL0	=	0x00ec
                           0000EB   455 _ADCHS3	=	0x00eb
                           0000EA   456 _ADCHS2	=	0x00ea
                           0000E9   457 _ADCHS1	=	0x00e9
                           0000E8   458 _ADCHS0	=	0x00e8
                           0000DF   459 _PWMRUN	=	0x00df
                           0000DE   460 _LOAD	=	0x00de
                           0000DD   461 _PWMF	=	0x00dd
                           0000DC   462 _CLRPWM	=	0x00dc
                           0000D7   463 _CY	=	0x00d7
                           0000D6   464 _AC	=	0x00d6
                           0000D5   465 _F0	=	0x00d5
                           0000D4   466 _RS1	=	0x00d4
                           0000D3   467 _RS0	=	0x00d3
                           0000D2   468 _OV	=	0x00d2
                           0000D0   469 _P	=	0x00d0
                           0000CF   470 _TF2	=	0x00cf
                           0000CA   471 _TR2	=	0x00ca
                           0000C8   472 _CM_RL2	=	0x00c8
                           0000C6   473 _I2CEN	=	0x00c6
                           0000C5   474 _STA	=	0x00c5
                           0000C4   475 _STO	=	0x00c4
                           0000C3   476 _SI	=	0x00c3
                           0000C2   477 _AA	=	0x00c2
                           0000C0   478 _I2CPX	=	0x00c0
                           0000BE   479 _PADC	=	0x00be
                           0000BD   480 _PBOD	=	0x00bd
                           0000BC   481 _PS	=	0x00bc
                           0000BB   482 _PT1	=	0x00bb
                           0000BA   483 _PX1	=	0x00ba
                           0000B9   484 _PT0	=	0x00b9
                           0000B8   485 _PX0	=	0x00b8
                           0000B0   486 _P30	=	0x00b0
                           0000AF   487 _EA	=	0x00af
                           0000AE   488 _EADC	=	0x00ae
                           0000AD   489 _EBOD	=	0x00ad
                           0000AC   490 _ES	=	0x00ac
                           0000AB   491 _ET1	=	0x00ab
                           0000AA   492 _EX1	=	0x00aa
                           0000A9   493 _ET0	=	0x00a9
                           0000A8   494 _EX0	=	0x00a8
                           0000A0   495 _P20	=	0x00a0
                           00009F   496 _SM0	=	0x009f
                           00009F   497 _FE	=	0x009f
                           00009E   498 _SM1	=	0x009e
                           00009D   499 _SM2	=	0x009d
                           00009C   500 _REN	=	0x009c
                           00009B   501 _TB8	=	0x009b
                           00009A   502 _RB8	=	0x009a
                           000099   503 _TI	=	0x0099
                           000098   504 _RI	=	0x0098
                           000097   505 _P17	=	0x0097
                           000096   506 _P16	=	0x0096
                           000096   507 _TXD_1	=	0x0096
                           000095   508 _P15	=	0x0095
                           000094   509 _P14	=	0x0094
                           000094   510 _SDA	=	0x0094
                           000093   511 _P13	=	0x0093
                           000093   512 _SCL	=	0x0093
                           000092   513 _P12	=	0x0092
                           000091   514 _P11	=	0x0091
                           000090   515 _P10	=	0x0090
                           00008F   516 _TF1	=	0x008f
                           00008E   517 _TR1	=	0x008e
                           00008D   518 _TF0	=	0x008d
                           00008C   519 _TR0	=	0x008c
                           00008B   520 _IE1	=	0x008b
                           00008A   521 _IT1	=	0x008a
                           000089   522 _IE0	=	0x0089
                           000088   523 _IT0	=	0x0088
                           000087   524 _P07	=	0x0087
                           000087   525 _RXD	=	0x0087
                           000086   526 _P06	=	0x0086
                           000086   527 _TXD	=	0x0086
                           000085   528 _P05	=	0x0085
                           000084   529 _P04	=	0x0084
                           000084   530 _STADC	=	0x0084
                           000083   531 _P03	=	0x0083
                           000082   532 _P02	=	0x0082
                           000082   533 _RXD_1	=	0x0082
                           000081   534 _P01	=	0x0081
                           000081   535 _MISO	=	0x0081
                           000080   536 _P00	=	0x0080
                           000080   537 _MOSI	=	0x0080
                                    538 ;--------------------------------------------------------
                                    539 ; overlayable register banks
                                    540 ;--------------------------------------------------------
                                    541 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        542 	.ds 8
                                    543 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        544 	.ds 8
                                    545 ;--------------------------------------------------------
                                    546 ; overlayable bit register bank
                                    547 ;--------------------------------------------------------
                                    548 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        549 bits:
      000000                        550 	.ds 1
                           008000   551 	b0 = bits[0]
                           008100   552 	b1 = bits[1]
                           008200   553 	b2 = bits[2]
                           008300   554 	b3 = bits[3]
                           008400   555 	b4 = bits[4]
                           008500   556 	b5 = bits[5]
                           008600   557 	b6 = bits[6]
                           008700   558 	b7 = bits[7]
                                    559 ;--------------------------------------------------------
                                    560 ; internal ram data
                                    561 ;--------------------------------------------------------
                                    562 	.area DSEG    (DATA)
      000000                        563 _gu8UART::
      000000                        564 	.ds 1
                                    565 ;--------------------------------------------------------
                                    566 ; overlayable items in internal ram 
                                    567 ;--------------------------------------------------------
                                    568 	.area	OSEG    (OVR,DATA)
                                    569 	.area	OSEG    (OVR,DATA)
                                    570 	.area	OSEG    (OVR,DATA)
      000000                        571 _getstr_uart0_PARM_2:
      000000                        572 	.ds 3
                                    573 	.area	OSEG    (OVR,DATA)
                                    574 	.area	OSEG    (OVR,DATA)
                                    575 	.area	OSEG    (OVR,DATA)
      000000                        576 _getstr_uart1_PARM_2:
      000000                        577 	.ds 3
                                    578 	.area	OSEG    (OVR,DATA)
                                    579 	.area	OSEG    (OVR,DATA)
                                    580 	.area	OSEG    (OVR,DATA)
                                    581 	.area	OSEG    (OVR,DATA)
                                    582 ;--------------------------------------------------------
                                    583 ; indirectly addressable internal ram data
                                    584 ;--------------------------------------------------------
                                    585 	.area ISEG    (DATA)
                                    586 ;--------------------------------------------------------
                                    587 ; absolute internal ram data
                                    588 ;--------------------------------------------------------
                                    589 	.area IABS    (ABS,DATA)
                                    590 	.area IABS    (ABS,DATA)
                                    591 ;--------------------------------------------------------
                                    592 ; bit data
                                    593 ;--------------------------------------------------------
                                    594 	.area BSEG    (BIT)
                                    595 ;--------------------------------------------------------
                                    596 ; paged external ram data
                                    597 ;--------------------------------------------------------
                                    598 	.area PSEG    (PAG,XDATA)
                                    599 ;--------------------------------------------------------
                                    600 ; external ram data
                                    601 ;--------------------------------------------------------
                                    602 	.area XSEG    (XDATA)
      000000                        603 _gu8BNFCnt::
      000000                        604 	.ds 1
      000001                        605 _gu8BFCnt::
      000001                        606 	.ds 1
      000002                        607 _gu8BNECnt::
      000002                        608 	.ds 1
      000003                        609 _gu8BECnt::
      000003                        610 	.ds 1
      000004                        611 _gpc2B2MC::
      000004                        612 	.ds 4
      000008                        613 _gpcMC22B::
      000008                        614 	.ds 16
      000018                        615 _pu8UartRx0Buf::
      000018                        616 	.ds 16
      000028                        617 _pu8UartTx0Buf::
      000028                        618 	.ds 16
      000038                        619 _pu8UartRx1Buf::
      000038                        620 	.ds 16
      000048                        621 _pu8UartTx1Buf::
      000048                        622 	.ds 16
      000058                        623 _gu8Rx0Size::
      000058                        624 	.ds 1
      000059                        625 _gu8Rx0RIdx::
      000059                        626 	.ds 1
      00005A                        627 _gu8Rx0WIdx::
      00005A                        628 	.ds 1
      00005B                        629 _gu8Tx0Size::
      00005B                        630 	.ds 1
      00005C                        631 _gu8Tx0RIdx::
      00005C                        632 	.ds 1
      00005D                        633 _gu8Tx0WIdx::
      00005D                        634 	.ds 1
      00005E                        635 _gu8Rx1Size::
      00005E                        636 	.ds 1
      00005F                        637 _gu8Rx1RIdx::
      00005F                        638 	.ds 1
      000060                        639 _gu8Rx1WIdx::
      000060                        640 	.ds 1
      000061                        641 _gu8Tx1Size::
      000061                        642 	.ds 1
      000062                        643 _gu8Tx1RIdx::
      000062                        644 	.ds 1
      000063                        645 _gu8Tx1WIdx::
      000063                        646 	.ds 1
      000064                        647 _gu8Uart0RCnt::
      000064                        648 	.ds 1
      000065                        649 _gu8Uart0TCnt::
      000065                        650 	.ds 1
      000066                        651 _gu8Uart1RCnt::
      000066                        652 	.ds 1
      000067                        653 _gu8Uart1TCnt::
      000067                        654 	.ds 1
                                    655 ;--------------------------------------------------------
                                    656 ; absolute external ram data
                                    657 ;--------------------------------------------------------
                                    658 	.area XABS    (ABS,XDATA)
                                    659 ;--------------------------------------------------------
                                    660 ; external initialized ram data
                                    661 ;--------------------------------------------------------
                                    662 	.area HOME    (CODE)
                                    663 	.area GSINIT0 (CODE)
                                    664 	.area GSINIT1 (CODE)
                                    665 	.area GSINIT2 (CODE)
                                    666 	.area GSINIT3 (CODE)
                                    667 	.area GSINIT4 (CODE)
                                    668 	.area GSINIT5 (CODE)
                                    669 	.area GSINIT  (CODE)
                                    670 	.area GSFINAL (CODE)
                                    671 	.area CSEG    (CODE)
                                    672 ;--------------------------------------------------------
                                    673 ; global & static initialisations
                                    674 ;--------------------------------------------------------
                                    675 	.area HOME    (CODE)
                                    676 	.area GSINIT  (CODE)
                                    677 	.area GSFINAL (CODE)
                                    678 	.area GSINIT  (CODE)
                                    679 ;	../lib_master/uart.c:12: UINT8 __xdata gu8BNFCnt = 0;
      000000 90r00r00         [24]  680 	mov	dptr,#_gu8BNFCnt
      000003 E4               [12]  681 	clr	a
      000004 F0               [24]  682 	movx	@dptr,a
                                    683 ;	../lib_master/uart.c:13: UINT8 __xdata gu8BFCnt = 0;
      000005 90r00r01         [24]  684 	mov	dptr,#_gu8BFCnt
      000008 F0               [24]  685 	movx	@dptr,a
                                    686 ;	../lib_master/uart.c:14: UINT8 __xdata gu8BNECnt = 0;
      000009 90r00r02         [24]  687 	mov	dptr,#_gu8BNECnt
      00000C F0               [24]  688 	movx	@dptr,a
                                    689 ;	../lib_master/uart.c:15: UINT8 __xdata gu8BECnt = 0;
      00000D 90r00r03         [24]  690 	mov	dptr,#_gu8BECnt
      000010 F0               [24]  691 	movx	@dptr,a
                                    692 ;	../lib_master/uart.c:17: const char __xdata  gpc2B2MC[] = {// 2Bits to Manchester Code
      000011 90r00r04         [24]  693 	mov	dptr,#_gpc2B2MC
      000014 74 0A            [12]  694 	mov	a,#0x0a
      000016 F0               [24]  695 	movx	@dptr,a
      000017 90r00r05         [24]  696 	mov	dptr,#(_gpc2B2MC + 0x0001)
      00001A 14               [12]  697 	dec	a
      00001B F0               [24]  698 	movx	@dptr,a
      00001C 90r00r06         [24]  699 	mov	dptr,#(_gpc2B2MC + 0x0002)
      00001F 74 06            [12]  700 	mov	a,#0x06
      000021 F0               [24]  701 	movx	@dptr,a
      000022 90r00r07         [24]  702 	mov	dptr,#(_gpc2B2MC + 0x0003)
      000025 14               [12]  703 	dec	a
      000026 F0               [24]  704 	movx	@dptr,a
                                    705 ;	../lib_master/uart.c:24: const char __xdata  gpcMC22B[16] = {// manchester code to 2Bits
      000027 90r00r08         [24]  706 	mov	dptr,#_gpcMC22B
      00002A 74 0F            [12]  707 	mov	a,#0x0f
      00002C F0               [24]  708 	movx	@dptr,a
      00002D 90r00r09         [24]  709 	mov	dptr,#(_gpcMC22B + 0x0001)
      000030 F0               [24]  710 	movx	@dptr,a
      000031 90r00r0A         [24]  711 	mov	dptr,#(_gpcMC22B + 0x0002)
      000034 F0               [24]  712 	movx	@dptr,a
      000035 90r00r0B         [24]  713 	mov	dptr,#(_gpcMC22B + 0x0003)
      000038 F0               [24]  714 	movx	@dptr,a
      000039 90r00r0C         [24]  715 	mov	dptr,#(_gpcMC22B + 0x0004)
      00003C F0               [24]  716 	movx	@dptr,a
      00003D 90r00r0D         [24]  717 	mov	dptr,#(_gpcMC22B + 0x0005)
      000040 74 03            [12]  718 	mov	a,#0x03
      000042 F0               [24]  719 	movx	@dptr,a
      000043 90r00r0E         [24]  720 	mov	dptr,#(_gpcMC22B + 0x0006)
      000046 14               [12]  721 	dec	a
      000047 F0               [24]  722 	movx	@dptr,a
      000048 90r00r0F         [24]  723 	mov	dptr,#(_gpcMC22B + 0x0007)
      00004B 74 0F            [12]  724 	mov	a,#0x0f
      00004D F0               [24]  725 	movx	@dptr,a
      00004E 90r00r10         [24]  726 	mov	dptr,#(_gpcMC22B + 0x0008)
      000051 F0               [24]  727 	movx	@dptr,a
      000052 90r00r11         [24]  728 	mov	dptr,#(_gpcMC22B + 0x0009)
      000055 74 01            [12]  729 	mov	a,#0x01
      000057 F0               [24]  730 	movx	@dptr,a
      000058 90r00r12         [24]  731 	mov	dptr,#(_gpcMC22B + 0x000a)
      00005B E4               [12]  732 	clr	a
      00005C F0               [24]  733 	movx	@dptr,a
      00005D 90r00r13         [24]  734 	mov	dptr,#(_gpcMC22B + 0x000b)
      000060 74 0F            [12]  735 	mov	a,#0x0f
      000062 F0               [24]  736 	movx	@dptr,a
      000063 90r00r14         [24]  737 	mov	dptr,#(_gpcMC22B + 0x000c)
      000066 F0               [24]  738 	movx	@dptr,a
      000067 90r00r15         [24]  739 	mov	dptr,#(_gpcMC22B + 0x000d)
      00006A F0               [24]  740 	movx	@dptr,a
      00006B 90r00r16         [24]  741 	mov	dptr,#(_gpcMC22B + 0x000e)
      00006E F0               [24]  742 	movx	@dptr,a
      00006F 90r00r17         [24]  743 	mov	dptr,#(_gpcMC22B + 0x000f)
      000072 F0               [24]  744 	movx	@dptr,a
                                    745 ;	../lib_master/uart.c:363: uint8_t __xdata pu8UartRx0Buf[UART0_RX_BUFF_SIZE] = {0};
      000073 90r00r18         [24]  746 	mov	dptr,#_pu8UartRx0Buf
      000076 E4               [12]  747 	clr	a
      000077 F0               [24]  748 	movx	@dptr,a
                                    749 ;	../lib_master/uart.c:364: uint8_t __xdata pu8UartTx0Buf[UART0_TX_BUFF_SIZE] = {0};
      000078 90r00r28         [24]  750 	mov	dptr,#_pu8UartTx0Buf
      00007B F0               [24]  751 	movx	@dptr,a
                                    752 ;	../lib_master/uart.c:365: uint8_t __xdata pu8UartRx1Buf[UART1_RX_BUFF_SIZE] = {0};
      00007C 90r00r38         [24]  753 	mov	dptr,#_pu8UartRx1Buf
      00007F F0               [24]  754 	movx	@dptr,a
                                    755 ;	../lib_master/uart.c:367: uint8_t __xdata pu8UartTx1Buf[UART1_TX_BUFF_SIZE] = {0};//  10마이크로초보다 큰 듯.. --> 비슷함..ㅠㅠ
      000080 90r00r48         [24]  756 	mov	dptr,#_pu8UartTx1Buf
      000083 F0               [24]  757 	movx	@dptr,a
                                    758 ;	../lib_master/uart.c:369: uint8_t __xdata gu8Rx0Size = 0;  // Rx0버퍼에 쌓여있는, 받은 데이타 크기
      000084 90r00r58         [24]  759 	mov	dptr,#_gu8Rx0Size
      000087 F0               [24]  760 	movx	@dptr,a
                                    761 ;	../lib_master/uart.c:370: uint8_t __xdata gu8Rx0RIdx = 0; // Rx0버퍼에서 읽기 인덱스, 이부문부터 쌓여진 데이타를 읽어서 처리
      000088 90r00r59         [24]  762 	mov	dptr,#_gu8Rx0RIdx
      00008B F0               [24]  763 	movx	@dptr,a
                                    764 ;	../lib_master/uart.c:371: uint8_t __xdata gu8Rx0WIdx = 0; // Rx0버퍼에서 쓰기 인덱스, SBUF로 수신된 데이타를 이부문에 써서 쌓아둠
      00008C 90r00r5A         [24]  765 	mov	dptr,#_gu8Rx0WIdx
      00008F F0               [24]  766 	movx	@dptr,a
                                    767 ;	../lib_master/uart.c:373: uint8_t __xdata gu8Tx0Size = 0;  // Tx0버퍼에 쌓여있는, 보낼 데이타 크기
      000090 90r00r5B         [24]  768 	mov	dptr,#_gu8Tx0Size
      000093 F0               [24]  769 	movx	@dptr,a
                                    770 ;	../lib_master/uart.c:374: uint8_t __xdata gu8Tx0RIdx = 0; // Tx0버퍼에서 읽기 인덱스, 이부문을 읽어서 SBUF에서 써서 보내기
      000094 90r00r5C         [24]  771 	mov	dptr,#_gu8Tx0RIdx
      000097 F0               [24]  772 	movx	@dptr,a
                                    773 ;	../lib_master/uart.c:375: uint8_t __xdata gu8Tx0WIdx = 0; // Tx0버퍼에서 쓰기 인덱스, 이부문에 써서 인터럽트 함수에서 알아서 보내도록..
      000098 90r00r5D         [24]  774 	mov	dptr,#_gu8Tx0WIdx
      00009B F0               [24]  775 	movx	@dptr,a
                                    776 ;	../lib_master/uart.c:377: uint8_t __xdata gu8Rx1Size = 0;  // Rx1버퍼에 쌓여있는, 받은 데이타 크기
      00009C 90r00r5E         [24]  777 	mov	dptr,#_gu8Rx1Size
      00009F F0               [24]  778 	movx	@dptr,a
                                    779 ;	../lib_master/uart.c:378: uint8_t __xdata gu8Rx1RIdx = 0; // Rx1버퍼에서 읽기 인덱스, 이부문부터 쌓여진 데이타를 읽어서 처리
      0000A0 90r00r5F         [24]  780 	mov	dptr,#_gu8Rx1RIdx
      0000A3 F0               [24]  781 	movx	@dptr,a
                                    782 ;	../lib_master/uart.c:379: uint8_t __xdata gu8Rx1WIdx = 0; // Rx1버퍼에서 쓰기 인덱스, SBUF로 수신된 데이타를 이부문에 써서 쌓아둠
      0000A4 90r00r60         [24]  783 	mov	dptr,#_gu8Rx1WIdx
      0000A7 F0               [24]  784 	movx	@dptr,a
                                    785 ;	../lib_master/uart.c:381: uint8_t __xdata gu8Tx1Size = 0; // Tx1버퍼에 쌓여있는, 보낼 데이타 크기
      0000A8 90r00r61         [24]  786 	mov	dptr,#_gu8Tx1Size
      0000AB F0               [24]  787 	movx	@dptr,a
                                    788 ;	../lib_master/uart.c:382: uint8_t __xdata gu8Tx1RIdx = 0;
      0000AC 90r00r62         [24]  789 	mov	dptr,#_gu8Tx1RIdx
      0000AF F0               [24]  790 	movx	@dptr,a
                                    791 ;	../lib_master/uart.c:383: uint8_t __xdata gu8Tx1WIdx = 0;
      0000B0 90r00r63         [24]  792 	mov	dptr,#_gu8Tx1WIdx
      0000B3 F0               [24]  793 	movx	@dptr,a
                                    794 ;	../lib_master/uart.c:388: uint8_t __xdata gu8Uart0RCnt = 0;
      0000B4 90r00r64         [24]  795 	mov	dptr,#_gu8Uart0RCnt
      0000B7 F0               [24]  796 	movx	@dptr,a
                                    797 ;	../lib_master/uart.c:389: uint8_t __xdata gu8Uart0TCnt = 0;
      0000B8 90r00r65         [24]  798 	mov	dptr,#_gu8Uart0TCnt
      0000BB F0               [24]  799 	movx	@dptr,a
                                    800 ;	../lib_master/uart.c:390: uint8_t __xdata gu8Uart1RCnt = 0;
      0000BC 90r00r66         [24]  801 	mov	dptr,#_gu8Uart1RCnt
      0000BF F0               [24]  802 	movx	@dptr,a
                                    803 ;	../lib_master/uart.c:391: uint8_t __xdata gu8Uart1TCnt = 0;
      0000C0 90r00r67         [24]  804 	mov	dptr,#_gu8Uart1TCnt
      0000C3 F0               [24]  805 	movx	@dptr,a
                                    806 ;--------------------------------------------------------
                                    807 ; Home
                                    808 ;--------------------------------------------------------
                                    809 	.area HOME    (CODE)
                                    810 	.area HOME    (CODE)
                                    811 ;--------------------------------------------------------
                                    812 ; code
                                    813 ;--------------------------------------------------------
                                    814 	.area CSEG    (CODE)
                                    815 ;------------------------------------------------------------
                                    816 ;Allocation info for local variables in function 'InitialUART0_Timer1'
                                    817 ;------------------------------------------------------------
                                    818 ;u32Baudrate               Allocated to registers r4 r5 r6 r7 
                                    819 ;------------------------------------------------------------
                                    820 ;	../lib_master/uart.c:46: void InitialUART0_Timer1(UINT32 u32Baudrate)    //T1M = 1, SMOD = 1
                                    821 ;	-----------------------------------------
                                    822 ;	 function InitialUART0_Timer1
                                    823 ;	-----------------------------------------
      000000                        824 _InitialUART0_Timer1:
                           000007   825 	ar7 = 0x07
                           000006   826 	ar6 = 0x06
                           000005   827 	ar5 = 0x05
                           000004   828 	ar4 = 0x04
                           000003   829 	ar3 = 0x03
                           000002   830 	ar2 = 0x02
                           000001   831 	ar1 = 0x01
                           000000   832 	ar0 = 0x00
      000000 AC 82            [24]  833 	mov	r4,dpl
      000002 AD 83            [24]  834 	mov	r5,dph
      000004 AE F0            [24]  835 	mov	r6,b
      000006 FF               [12]  836 	mov	r7,a
                                    837 ;	../lib_master/uart.c:48: P06_Quasi_Mode;		//Setting UART pin as Quasi mode for transmit
      000007 53 B1 BF         [24]  838 	anl	_P0M1,#0xbf
      00000A 53 B2 BF         [24]  839 	anl	_P0M2,#0xbf
                                    840 ;	../lib_master/uart.c:49: P07_Quasi_Mode;		//Setting UART pin as Quasi mode for transmit
      00000D 53 B1 7F         [24]  841 	anl	_P0M1,#0x7f
      000010 53 B2 7F         [24]  842 	anl	_P0M2,#0x7f
                                    843 ;	../lib_master/uart.c:51: SCON = 0x50;     	//UART0 Mode1,REN=1,TI=1
      000013 75 98 50         [24]  844 	mov	_SCON,#0x50
                                    845 ;	../lib_master/uart.c:52: TMOD |= 0x20;    	//Timer1 Mode1
      000016 43 89 20         [24]  846 	orl	_TMOD,#0x20
                                    847 ;	../lib_master/uart.c:54: set_SMOD;        	//UART0 Double Rate Enable
      000019 43 87 80         [24]  848 	orl	_PCON,#0x80
                                    849 ;	../lib_master/uart.c:55: set_T1M;
      00001C 43 8E 10         [24]  850 	orl	_CKCON,#0x10
                                    851 ;	../lib_master/uart.c:56: clr_BRCK;        	//Serial port 0 baud rate clock source = Timer1
      00001F 53 C4 DF         [24]  852 	anl	_T3CON,#0xdf
                                    853 ;	../lib_master/uart.c:62: TH1 = 256 - (1037500/u32Baudrate);         		     /*16.6 MHz */
      000022 8C*00            [24]  854 	mov	__divulong_PARM_2,r4
      000024 8D*01            [24]  855 	mov	(__divulong_PARM_2 + 1),r5
      000026 8E*02            [24]  856 	mov	(__divulong_PARM_2 + 2),r6
      000028 8F*03            [24]  857 	mov	(__divulong_PARM_2 + 3),r7
      00002A 90 D4 BC         [24]  858 	mov	dptr,#0xd4bc
      00002D 75 F0 0F         [24]  859 	mov	b,#0x0f
      000030 E4               [12]  860 	clr	a
      000031 12r00r00         [24]  861 	lcall	__divulong
      000034 AC 82            [24]  862 	mov	r4,dpl
      000036 C3               [12]  863 	clr	c
      000037 E4               [12]  864 	clr	a
      000038 9C               [12]  865 	subb	a,r4
      000039 F5 8D            [12]  866 	mov	_TH1,a
                                    867 ;	../lib_master/uart.c:64: set_TR1;
                                    868 ;	assignBit
      00003B D2 8E            [12]  869 	setb	_TR1
                                    870 ;	../lib_master/uart.c:65: set_TI;						//For printf function must setting TI = 1
                                    871 ;	assignBit
      00003D D2 99            [12]  872 	setb	_TI
                                    873 ;	../lib_master/uart.c:66: }
      00003F 22               [24]  874 	ret
                                    875 ;------------------------------------------------------------
                                    876 ;Allocation info for local variables in function 'InitialUART0_Timer3'
                                    877 ;------------------------------------------------------------
                                    878 ;u32Baudrate               Allocated to registers r4 r5 r6 r7 
                                    879 ;------------------------------------------------------------
                                    880 ;	../lib_master/uart.c:69: void InitialUART0_Timer3(UINT32 u32Baudrate) //use timer3 as Baudrate generator
                                    881 ;	-----------------------------------------
                                    882 ;	 function InitialUART0_Timer3
                                    883 ;	-----------------------------------------
      000040                        884 _InitialUART0_Timer3:
      000040 AC 82            [24]  885 	mov	r4,dpl
      000042 AD 83            [24]  886 	mov	r5,dph
      000044 AE F0            [24]  887 	mov	r6,b
      000046 FF               [12]  888 	mov	r7,a
                                    889 ;	../lib_master/uart.c:71: P06_Quasi_Mode;		//Setting UART pin as Quasi mode for transmit
      000047 53 B1 BF         [24]  890 	anl	_P0M1,#0xbf
      00004A 53 B2 BF         [24]  891 	anl	_P0M2,#0xbf
                                    892 ;	../lib_master/uart.c:72: P07_Quasi_Mode;		//Setting UART pin as Quasi mode for transmit	
      00004D 53 B1 7F         [24]  893 	anl	_P0M1,#0x7f
      000050 53 B2 7F         [24]  894 	anl	_P0M2,#0x7f
                                    895 ;	../lib_master/uart.c:74: SCON = 0x50;     //UART0 Mode1,REN=1,TI=1
      000053 75 98 50         [24]  896 	mov	_SCON,#0x50
                                    897 ;	../lib_master/uart.c:75: set_SMOD;        //UART0 Double Rate Enable
      000056 43 87 80         [24]  898 	orl	_PCON,#0x80
                                    899 ;	../lib_master/uart.c:76: T3CON &= 0xF8;   //T3PS2=0,T3PS1=0,T3PS0=0(Prescale=1)
      000059 53 C4 F8         [24]  900 	anl	_T3CON,#0xf8
                                    901 ;	../lib_master/uart.c:77: set_BRCK;        //UART0 baud rate clock source = Timer3
      00005C 43 C4 20         [24]  902 	orl	_T3CON,#0x20
                                    903 ;	../lib_master/uart.c:84: RH3    = HIBYTE(65536 - (1037500/u32Baudrate)); 			/*16.6 MHz */
      00005F 8C*00            [24]  904 	mov	__divulong_PARM_2,r4
      000061 8D*01            [24]  905 	mov	(__divulong_PARM_2 + 1),r5
      000063 8E*02            [24]  906 	mov	(__divulong_PARM_2 + 2),r6
      000065 8F*03            [24]  907 	mov	(__divulong_PARM_2 + 3),r7
      000067 90 D4 BC         [24]  908 	mov	dptr,#0xd4bc
      00006A 75 F0 0F         [24]  909 	mov	b,#0x0f
      00006D E4               [12]  910 	clr	a
      00006E 12r00r00         [24]  911 	lcall	__divulong
      000071 AC 82            [24]  912 	mov	r4,dpl
      000073 AD 83            [24]  913 	mov	r5,dph
      000075 AE F0            [24]  914 	mov	r6,b
      000077 FF               [12]  915 	mov	r7,a
      000078 E4               [12]  916 	clr	a
      000079 C3               [12]  917 	clr	c
      00007A 9C               [12]  918 	subb	a,r4
      00007B E4               [12]  919 	clr	a
      00007C 9D               [12]  920 	subb	a,r5
      00007D F9               [12]  921 	mov	r1,a
      00007E 74 01            [12]  922 	mov	a,#0x01
      000080 9E               [12]  923 	subb	a,r6
      000081 E4               [12]  924 	clr	a
      000082 9F               [12]  925 	subb	a,r7
      000083 89 C6            [24]  926 	mov	_RH3,r1
                                    927 ;	../lib_master/uart.c:85: RL3    = LOBYTE(65536 - (1037500/u32Baudrate)); 			/*16.6 MHz */
      000085 C3               [12]  928 	clr	c
      000086 E4               [12]  929 	clr	a
      000087 9C               [12]  930 	subb	a,r4
      000088 FC               [12]  931 	mov	r4,a
      000089 8C C5            [24]  932 	mov	_RL3,r4
                                    933 ;	../lib_master/uart.c:87: set_TR3;         //Trigger Timer3
      00008B 43 C4 08         [24]  934 	orl	_T3CON,#0x08
                                    935 ;	../lib_master/uart.c:88: set_TI;					 //For printf function must setting TI = 1
                                    936 ;	assignBit
      00008E D2 99            [12]  937 	setb	_TI
                                    938 ;	../lib_master/uart.c:89: }
      000090 22               [24]  939 	ret
                                    940 ;------------------------------------------------------------
                                    941 ;Allocation info for local variables in function 'InitialUART1_Timer3'
                                    942 ;------------------------------------------------------------
                                    943 ;u32Baudrate               Allocated to registers r4 r5 r6 r7 
                                    944 ;------------------------------------------------------------
                                    945 ;	../lib_master/uart.c:91: void InitialUART1_Timer3(UINT32 u32Baudrate) //use timer3 as Baudrate generator
                                    946 ;	-----------------------------------------
                                    947 ;	 function InitialUART1_Timer3
                                    948 ;	-----------------------------------------
      000091                        949 _InitialUART1_Timer3:
      000091 AC 82            [24]  950 	mov	r4,dpl
      000093 AD 83            [24]  951 	mov	r5,dph
      000095 AE F0            [24]  952 	mov	r6,b
      000097 FF               [12]  953 	mov	r7,a
                                    954 ;	../lib_master/uart.c:93: P02_Quasi_Mode;		//Setting UART pin as Quasi mode for transmit
      000098 53 B1 FB         [24]  955 	anl	_P0M1,#0xfb
      00009B 53 B2 FB         [24]  956 	anl	_P0M2,#0xfb
                                    957 ;	../lib_master/uart.c:94: P16_Quasi_Mode;		//Setting UART pin as Quasi mode for transmit
      00009E 53 B3 BF         [24]  958 	anl	_P1M1,#0xbf
      0000A1 53 B4 BF         [24]  959 	anl	_P1M2,#0xbf
                                    960 ;	../lib_master/uart.c:97: SCON_1 = 0x58;   	//UART1 Mode1,REN_1=1,TI_1=1 TB8=1
      0000A4 75 F8 58         [24]  961 	mov	_SCON_1,#0x58
                                    962 ;	../lib_master/uart.c:98: T3CON = 0x08;   	//T3PS2=0,T3PS1=0,T3PS0=0(Prescale=1), UART1 in MODE 1
      0000A7 75 C4 08         [24]  963 	mov	_T3CON,#0x08
                                    964 ;	../lib_master/uart.c:99: clr_BRCK;
      0000AA 53 C4 DF         [24]  965 	anl	_T3CON,#0xdf
                                    966 ;	../lib_master/uart.c:106: RH3    = HIBYTE(65536 - (1037500/u32Baudrate));  			/*16.6 MHz */
      0000AD 8C*00            [24]  967 	mov	__divulong_PARM_2,r4
      0000AF 8D*01            [24]  968 	mov	(__divulong_PARM_2 + 1),r5
      0000B1 8E*02            [24]  969 	mov	(__divulong_PARM_2 + 2),r6
      0000B3 8F*03            [24]  970 	mov	(__divulong_PARM_2 + 3),r7
      0000B5 90 D4 BC         [24]  971 	mov	dptr,#0xd4bc
      0000B8 75 F0 0F         [24]  972 	mov	b,#0x0f
      0000BB E4               [12]  973 	clr	a
      0000BC 12r00r00         [24]  974 	lcall	__divulong
      0000BF AC 82            [24]  975 	mov	r4,dpl
      0000C1 AD 83            [24]  976 	mov	r5,dph
      0000C3 AE F0            [24]  977 	mov	r6,b
      0000C5 FF               [12]  978 	mov	r7,a
      0000C6 E4               [12]  979 	clr	a
      0000C7 C3               [12]  980 	clr	c
      0000C8 9C               [12]  981 	subb	a,r4
      0000C9 E4               [12]  982 	clr	a
      0000CA 9D               [12]  983 	subb	a,r5
      0000CB F9               [12]  984 	mov	r1,a
      0000CC 74 01            [12]  985 	mov	a,#0x01
      0000CE 9E               [12]  986 	subb	a,r6
      0000CF E4               [12]  987 	clr	a
      0000D0 9F               [12]  988 	subb	a,r7
      0000D1 89 C6            [24]  989 	mov	_RH3,r1
                                    990 ;	../lib_master/uart.c:107: RL3    = LOBYTE(65536 - (1037500/u32Baudrate));				/*16.6 MHz */
      0000D3 C3               [12]  991 	clr	c
      0000D4 E4               [12]  992 	clr	a
      0000D5 9C               [12]  993 	subb	a,r4
      0000D6 FC               [12]  994 	mov	r4,a
      0000D7 8C C5            [24]  995 	mov	_RL3,r4
                                    996 ;	../lib_master/uart.c:109: set_TR3;         //Trigger Timer3
      0000D9 43 C4 08         [24]  997 	orl	_T3CON,#0x08
                                    998 ;	../lib_master/uart.c:110: }
      0000DC 22               [24]  999 	ret
                                   1000 ;------------------------------------------------------------
                                   1001 ;Allocation info for local variables in function 'set_linefi_uplink_speed'
                                   1002 ;------------------------------------------------------------
                                   1003 ;u32Baudrate               Allocated to registers r4 r5 r6 r7 
                                   1004 ;------------------------------------------------------------
                                   1005 ;	../lib_master/uart.c:112: void set_linefi_uplink_speed(UINT32 u32Baudrate)
                                   1006 ;	-----------------------------------------
                                   1007 ;	 function set_linefi_uplink_speed
                                   1008 ;	-----------------------------------------
      0000DD                       1009 _set_linefi_uplink_speed:
                                   1010 ;	../lib_master/uart.c:114: return InitialUART1_Timer3(u32Baudrate);
                                   1011 ;	../lib_master/uart.c:115: }
      0000DD 02r00r91         [24] 1012 	ljmp	_InitialUART1_Timer3
                                   1013 ;------------------------------------------------------------
                                   1014 ;Allocation info for local variables in function 'putchar'
                                   1015 ;------------------------------------------------------------
                                   1016 ;c                         Allocated to registers r6 r7 
                                   1017 ;------------------------------------------------------------
                                   1018 ;	../lib_master/uart.c:118: int putchar (int c) 
                                   1019 ;	-----------------------------------------
                                   1020 ;	 function putchar
                                   1021 ;	-----------------------------------------
      0000E0                       1022 _putchar:
      0000E0 AE 82            [24] 1023 	mov	r6,dpl
                                   1024 ;	../lib_master/uart.c:120: if (gu8UART == 0)  {
      0000E2 E5*00            [12] 1025 	mov	a,_gu8UART
      0000E4 70 07            [24] 1026 	jnz	00102$
                                   1027 ;	../lib_master/uart.c:121: putchar_uart0(c);
      0000E6 8E 82            [24] 1028 	mov	dpl,r6
      0000E8 12r04r0B         [24] 1029 	lcall	_putchar_uart0
      0000EB 80 05            [24] 1030 	sjmp	00103$
      0000ED                       1031 00102$:
                                   1032 ;	../lib_master/uart.c:124: putchar_uart1(c);
      0000ED 8E 82            [24] 1033 	mov	dpl,r6
      0000EF 12r04r44         [24] 1034 	lcall	_putchar_uart1
      0000F2                       1035 00103$:
                                   1036 ;	../lib_master/uart.c:126: return 0;
      0000F2 90 00 00         [24] 1037 	mov	dptr,#0x0000
                                   1038 ;	../lib_master/uart.c:127: }
      0000F5 22               [24] 1039 	ret
                                   1040 ;------------------------------------------------------------
                                   1041 ;Allocation info for local variables in function 'uart_setup'
                                   1042 ;------------------------------------------------------------
                                   1043 ;	../lib_master/uart.c:406: void uart_setup() 
                                   1044 ;	-----------------------------------------
                                   1045 ;	 function uart_setup
                                   1046 ;	-----------------------------------------
      0000F6                       1047 _uart_setup:
                                   1048 ;	../lib_master/uart.c:411: InitialUART0_Timer1(115200);
      0000F6 90 C2 00         [24] 1049 	mov	dptr,#0xc200
      0000F9 75 F0 01         [24] 1050 	mov	b,#0x01
      0000FC E4               [12] 1051 	clr	a
      0000FD 12r00r00         [24] 1052 	lcall	_InitialUART0_Timer1
                                   1053 ;	../lib_master/uart.c:412: InitialUART1_Timer3(115200);
      000100 90 C2 00         [24] 1054 	mov	dptr,#0xc200
      000103 75 F0 01         [24] 1055 	mov	b,#0x01
      000106 E4               [12] 1056 	clr	a
      000107 12r00r91         [24] 1057 	lcall	_InitialUART1_Timer3
                                   1058 ;	../lib_master/uart.c:414: set_ES;
                                   1059 ;	assignBit
      00010A D2 AC            [12] 1060 	setb	_ES
                                   1061 ;	../lib_master/uart.c:415: set_ES_1;
      00010C 43 9C 01         [24] 1062 	orl	_EIE1,#0x01
                                   1063 ;	../lib_master/uart.c:417: set_EA;
                                   1064 ;	assignBit
      00010F D2 AF            [12] 1065 	setb	_EA
                                   1066 ;	../lib_master/uart.c:418: }
      000111 22               [24] 1067 	ret
                                   1068 ;------------------------------------------------------------
                                   1069 ;Allocation info for local variables in function 'Uart0Tx_ISR'
                                   1070 ;------------------------------------------------------------
                                   1071 ;i                         Allocated to registers r5 r6 
                                   1072 ;------------------------------------------------------------
                                   1073 ;	../lib_master/uart.c:420: void Uart0Tx_ISR()
                                   1074 ;	-----------------------------------------
                                   1075 ;	 function Uart0Tx_ISR
                                   1076 ;	-----------------------------------------
      000112                       1077 _Uart0Tx_ISR:
                                   1078 ;	../lib_master/uart.c:423: clr_TI;	 // clear, putchar_uart0()에서 직접 불린 상태면 gu8Tx0Size==1인데, 이 경우는 무의미 할 수도 있음, 
                                   1079 ;	assignBit
      000112 C2 99            [12] 1080 	clr	_TI
                                   1081 ;	../lib_master/uart.c:424: if (gu8Tx0Size == 0) {
      000114 90r00r5B         [24] 1082 	mov	dptr,#_gu8Tx0Size
      000117 E0               [24] 1083 	movx	a,@dptr
      000118 FF               [12] 1084 	mov	r7,a
      000119 E0               [24] 1085 	movx	a,@dptr
      00011A 70 01            [24] 1086 	jnz	00102$
                                   1087 ;	../lib_master/uart.c:425: return;
      00011C 22               [24] 1088 	ret
      00011D                       1089 00102$:
                                   1090 ;	../lib_master/uart.c:431: for (i = 0; i< UART0_TX_GAP;i++) {
      00011D 7D 64            [12] 1091 	mov	r5,#0x64
      00011F 7E 00            [12] 1092 	mov	r6,#0x00
      000121                       1093 00108$:
                                   1094 ;	../lib_master/uart.c:432: nop; nop; nop; nop;
      000121 00               [12] 1095 	NOP
      000122 00               [12] 1096 	NOP
      000123 00               [12] 1097 	NOP
      000124 00               [12] 1098 	NOP
      000125 ED               [12] 1099 	mov	a,r5
      000126 24 FF            [12] 1100 	add	a,#0xff
      000128 FB               [12] 1101 	mov	r3,a
      000129 EE               [12] 1102 	mov	a,r6
      00012A 34 FF            [12] 1103 	addc	a,#0xff
      00012C FC               [12] 1104 	mov	r4,a
      00012D 8B 05            [24] 1105 	mov	ar5,r3
      00012F 8C 06            [24] 1106 	mov	ar6,r4
                                   1107 ;	../lib_master/uart.c:431: for (i = 0; i< UART0_TX_GAP;i++) {
      000131 EB               [12] 1108 	mov	a,r3
      000132 4C               [12] 1109 	orl	a,r4
      000133 70 EC            [24] 1110 	jnz	00108$
                                   1111 ;	../lib_master/uart.c:435: SBUF = pu8UartTx0Buf[gu8Tx0RIdx++];
      000135 90r00r5C         [24] 1112 	mov	dptr,#_gu8Tx0RIdx
      000138 E0               [24] 1113 	movx	a,@dptr
      000139 FE               [12] 1114 	mov	r6,a
      00013A 04               [12] 1115 	inc	a
      00013B F0               [24] 1116 	movx	@dptr,a
      00013C EE               [12] 1117 	mov	a,r6
      00013D 24r28            [12] 1118 	add	a,#_pu8UartTx0Buf
      00013F F5 82            [12] 1119 	mov	dpl,a
      000141 E4               [12] 1120 	clr	a
      000142 34s00            [12] 1121 	addc	a,#(_pu8UartTx0Buf >> 8)
      000144 F5 83            [12] 1122 	mov	dph,a
      000146 E0               [24] 1123 	movx	a,@dptr
      000147 F5 99            [12] 1124 	mov	_SBUF,a
                                   1125 ;	../lib_master/uart.c:436: gu8Tx0Size--;
      000149 EF               [12] 1126 	mov	a,r7
      00014A 14               [12] 1127 	dec	a
      00014B 90r00r5B         [24] 1128 	mov	dptr,#_gu8Tx0Size
      00014E F0               [24] 1129 	movx	@dptr,a
                                   1130 ;	../lib_master/uart.c:437: if (gu8Tx0RIdx == UART0_TX_BUFF_SIZE) {
      00014F 90r00r5C         [24] 1131 	mov	dptr,#_gu8Tx0RIdx
      000152 E0               [24] 1132 	movx	a,@dptr
      000153 FF               [12] 1133 	mov	r7,a
      000154 BF 10 05         [24] 1134 	cjne	r7,#0x10,00109$
                                   1135 ;	../lib_master/uart.c:438: gu8Tx0RIdx = 0;
      000157 90r00r5C         [24] 1136 	mov	dptr,#_gu8Tx0RIdx
      00015A E4               [12] 1137 	clr	a
      00015B F0               [24] 1138 	movx	@dptr,a
      00015C                       1139 00109$:
                                   1140 ;	../lib_master/uart.c:440: }
      00015C 22               [24] 1141 	ret
                                   1142 ;------------------------------------------------------------
                                   1143 ;Allocation info for local variables in function 'SerialPort0_ISR'
                                   1144 ;------------------------------------------------------------
                                   1145 ;	../lib_master/uart.c:455: void SerialPort0_ISR(void) interrupt(4) 
                                   1146 ;	-----------------------------------------
                                   1147 ;	 function SerialPort0_ISR
                                   1148 ;	-----------------------------------------
      00015D                       1149 _SerialPort0_ISR:
                           00000F  1150 	ar7 = 0x0f
                           00000E  1151 	ar6 = 0x0e
                           00000D  1152 	ar5 = 0x0d
                           00000C  1153 	ar4 = 0x0c
                           00000B  1154 	ar3 = 0x0b
                           00000A  1155 	ar2 = 0x0a
                           000009  1156 	ar1 = 0x09
                           000008  1157 	ar0 = 0x08
      00015D C0*00            [24] 1158 	push	bits
      00015F C0 E0            [24] 1159 	push	acc
      000161 C0 F0            [24] 1160 	push	b
      000163 C0 82            [24] 1161 	push	dpl
      000165 C0 83            [24] 1162 	push	dph
      000167 C0 07            [24] 1163 	push	(0+7)
      000169 C0 06            [24] 1164 	push	(0+6)
      00016B C0 05            [24] 1165 	push	(0+5)
      00016D C0 04            [24] 1166 	push	(0+4)
      00016F C0 03            [24] 1167 	push	(0+3)
      000171 C0 02            [24] 1168 	push	(0+2)
      000173 C0 01            [24] 1169 	push	(0+1)
      000175 C0 00            [24] 1170 	push	(0+0)
      000177 C0 D0            [24] 1171 	push	psw
      000179 75 D0 08         [24] 1172 	mov	psw,#0x08
                                   1173 ;	../lib_master/uart.c:457: if (RI == 1) {  /* if reception occur */
      00017C 30 98 3B         [24] 1174 	jnb	_RI,00106$
                                   1175 ;	../lib_master/uart.c:458: gu8Uart0RCnt++;
      00017F 90r00r64         [24] 1176 	mov	dptr,#_gu8Uart0RCnt
      000182 E0               [24] 1177 	movx	a,@dptr
      000183 24 01            [12] 1178 	add	a,#0x01
      000185 F0               [24] 1179 	movx	@dptr,a
                                   1180 ;	../lib_master/uart.c:459: if (gu8Rx0Size < UART0_RX_BUFF_SIZE) {
      000186 90r00r58         [24] 1181 	mov	dptr,#_gu8Rx0Size
      000189 E0               [24] 1182 	movx	a,@dptr
      00018A FF               [12] 1183 	mov	r7,a
      00018B BF 10 00         [24] 1184 	cjne	r7,#0x10,00128$
      00018E                       1185 00128$:
      00018E 50 28            [24] 1186 	jnc	00104$
                                   1187 ;	../lib_master/uart.c:460: pu8UartRx0Buf[gu8Rx0WIdx++] = SBUF;
      000190 90r00r5A         [24] 1188 	mov	dptr,#_gu8Rx0WIdx
      000193 E0               [24] 1189 	movx	a,@dptr
      000194 FF               [12] 1190 	mov	r7,a
      000195 04               [12] 1191 	inc	a
      000196 F0               [24] 1192 	movx	@dptr,a
      000197 EF               [12] 1193 	mov	a,r7
      000198 24r18            [12] 1194 	add	a,#_pu8UartRx0Buf
      00019A F5 82            [12] 1195 	mov	dpl,a
      00019C E4               [12] 1196 	clr	a
      00019D 34s00            [12] 1197 	addc	a,#(_pu8UartRx0Buf >> 8)
      00019F F5 83            [12] 1198 	mov	dph,a
      0001A1 E5 99            [12] 1199 	mov	a,_SBUF
      0001A3 F0               [24] 1200 	movx	@dptr,a
                                   1201 ;	../lib_master/uart.c:461: gu8Rx0Size++;
      0001A4 90r00r58         [24] 1202 	mov	dptr,#_gu8Rx0Size
      0001A7 E0               [24] 1203 	movx	a,@dptr
      0001A8 24 01            [12] 1204 	add	a,#0x01
      0001AA F0               [24] 1205 	movx	@dptr,a
                                   1206 ;	../lib_master/uart.c:462: if (gu8Rx0WIdx == UART0_RX_BUFF_SIZE) {
      0001AB 90r00r5A         [24] 1207 	mov	dptr,#_gu8Rx0WIdx
      0001AE E0               [24] 1208 	movx	a,@dptr
      0001AF FF               [12] 1209 	mov	r7,a
      0001B0 BF 10 05         [24] 1210 	cjne	r7,#0x10,00104$
                                   1211 ;	../lib_master/uart.c:463: gu8Rx0WIdx = 0;
      0001B3 90r00r5A         [24] 1212 	mov	dptr,#_gu8Rx0WIdx
      0001B6 E4               [12] 1213 	clr	a
      0001B7 F0               [24] 1214 	movx	@dptr,a
      0001B8                       1215 00104$:
                                   1216 ;	../lib_master/uart.c:469: clr_RI;        /* clear reception flag for next reception */
                                   1217 ;	assignBit
      0001B8 C2 98            [12] 1218 	clr	_RI
      0001BA                       1219 00106$:
                                   1220 ;	../lib_master/uart.c:472: if (TI == 1) {
      0001BA 30 99 10         [24] 1221 	jnb	_TI,00109$
                                   1222 ;	../lib_master/uart.c:473: gu8Uart0TCnt++;
      0001BD 90r00r65         [24] 1223 	mov	dptr,#_gu8Uart0TCnt
      0001C0 E0               [24] 1224 	movx	a,@dptr
      0001C1 24 01            [12] 1225 	add	a,#0x01
      0001C3 F0               [24] 1226 	movx	@dptr,a
                                   1227 ;	../lib_master/uart.c:474: Uart0Tx_ISR();
      0001C4 75 D0 00         [24] 1228 	mov	psw,#0x00
      0001C7 12r01r12         [24] 1229 	lcall	_Uart0Tx_ISR
      0001CA 75 D0 08         [24] 1230 	mov	psw,#0x08
      0001CD                       1231 00109$:
                                   1232 ;	../lib_master/uart.c:476: }
      0001CD D0 D0            [24] 1233 	pop	psw
      0001CF D0 00            [24] 1234 	pop	(0+0)
      0001D1 D0 01            [24] 1235 	pop	(0+1)
      0001D3 D0 02            [24] 1236 	pop	(0+2)
      0001D5 D0 03            [24] 1237 	pop	(0+3)
      0001D7 D0 04            [24] 1238 	pop	(0+4)
      0001D9 D0 05            [24] 1239 	pop	(0+5)
      0001DB D0 06            [24] 1240 	pop	(0+6)
      0001DD D0 07            [24] 1241 	pop	(0+7)
      0001DF D0 83            [24] 1242 	pop	dph
      0001E1 D0 82            [24] 1243 	pop	dpl
      0001E3 D0 F0            [24] 1244 	pop	b
      0001E5 D0 E0            [24] 1245 	pop	acc
      0001E7 D0*00            [24] 1246 	pop	bits
      0001E9 32               [24] 1247 	reti
                                   1248 ;------------------------------------------------------------
                                   1249 ;Allocation info for local variables in function 'chkchar_uart0'
                                   1250 ;------------------------------------------------------------
                                   1251 ;	../lib_master/uart.c:479: uint8_t chkchar_uart0()
                                   1252 ;	-----------------------------------------
                                   1253 ;	 function chkchar_uart0
                                   1254 ;	-----------------------------------------
      0001EA                       1255 _chkchar_uart0:
                           000007  1256 	ar7 = 0x07
                           000006  1257 	ar6 = 0x06
                           000005  1258 	ar5 = 0x05
                           000004  1259 	ar4 = 0x04
                           000003  1260 	ar3 = 0x03
                           000002  1261 	ar2 = 0x02
                           000001  1262 	ar1 = 0x01
                           000000  1263 	ar0 = 0x00
                                   1264 ;	../lib_master/uart.c:484: return gu8Rx0Size;
      0001EA 90r00r58         [24] 1265 	mov	dptr,#_gu8Rx0Size
      0001ED E0               [24] 1266 	movx	a,@dptr
                                   1267 ;	../lib_master/uart.c:485: }
      0001EE F5 82            [12] 1268 	mov	dpl,a
      0001F0 22               [24] 1269 	ret
                                   1270 ;------------------------------------------------------------
                                   1271 ;Allocation info for local variables in function 'getchar_uart0'
                                   1272 ;------------------------------------------------------------
                                   1273 ;apu8Data                  Allocated to registers r5 r6 r7 
                                   1274 ;------------------------------------------------------------
                                   1275 ;	../lib_master/uart.c:487: uint8_t getchar_uart0(uint8_t * apu8Data)
                                   1276 ;	-----------------------------------------
                                   1277 ;	 function getchar_uart0
                                   1278 ;	-----------------------------------------
      0001F1                       1279 _getchar_uart0:
      0001F1 AD 82            [24] 1280 	mov	r5,dpl
      0001F3 AE 83            [24] 1281 	mov	r6,dph
      0001F5 AF F0            [24] 1282 	mov	r7,b
                                   1283 ;	../lib_master/uart.c:492: if (gu8Rx0Size == 0) {
      0001F7 90r00r58         [24] 1284 	mov	dptr,#_gu8Rx0Size
      0001FA E0               [24] 1285 	movx	a,@dptr
                                   1286 ;	../lib_master/uart.c:493: return 0;
      0001FB 70 03            [24] 1287 	jnz	00102$
      0001FD F5 82            [12] 1288 	mov	dpl,a
      0001FF 22               [24] 1289 	ret
      000200                       1290 00102$:
                                   1291 ;	../lib_master/uart.c:495: clr_ES;
                                   1292 ;	assignBit
      000200 C2 AC            [12] 1293 	clr	_ES
                                   1294 ;	../lib_master/uart.c:496: *apu8Data = pu8UartRx0Buf[gu8Rx0RIdx++];
      000202 90r00r59         [24] 1295 	mov	dptr,#_gu8Rx0RIdx
      000205 E0               [24] 1296 	movx	a,@dptr
      000206 FC               [12] 1297 	mov	r4,a
      000207 04               [12] 1298 	inc	a
      000208 F0               [24] 1299 	movx	@dptr,a
      000209 EC               [12] 1300 	mov	a,r4
      00020A 24r18            [12] 1301 	add	a,#_pu8UartRx0Buf
      00020C F5 82            [12] 1302 	mov	dpl,a
      00020E E4               [12] 1303 	clr	a
      00020F 34s00            [12] 1304 	addc	a,#(_pu8UartRx0Buf >> 8)
      000211 F5 83            [12] 1305 	mov	dph,a
      000213 E0               [24] 1306 	movx	a,@dptr
      000214 8D 82            [24] 1307 	mov	dpl,r5
      000216 8E 83            [24] 1308 	mov	dph,r6
      000218 8F F0            [24] 1309 	mov	b,r7
      00021A 12r00r00         [24] 1310 	lcall	__gptrput
                                   1311 ;	../lib_master/uart.c:497: gu8Rx0Size--;
      00021D 90r00r58         [24] 1312 	mov	dptr,#_gu8Rx0Size
      000220 E0               [24] 1313 	movx	a,@dptr
      000221 14               [12] 1314 	dec	a
      000222 F0               [24] 1315 	movx	@dptr,a
                                   1316 ;	../lib_master/uart.c:498: if (gu8Rx0RIdx == UART0_RX_BUFF_SIZE) {
      000223 90r00r59         [24] 1317 	mov	dptr,#_gu8Rx0RIdx
      000226 E0               [24] 1318 	movx	a,@dptr
      000227 FF               [12] 1319 	mov	r7,a
      000228 BF 10 05         [24] 1320 	cjne	r7,#0x10,00104$
                                   1321 ;	../lib_master/uart.c:499: gu8Rx0RIdx = 0;
      00022B 90r00r59         [24] 1322 	mov	dptr,#_gu8Rx0RIdx
      00022E E4               [12] 1323 	clr	a
      00022F F0               [24] 1324 	movx	@dptr,a
      000230                       1325 00104$:
                                   1326 ;	../lib_master/uart.c:501: set_ES;
                                   1327 ;	assignBit
      000230 D2 AC            [12] 1328 	setb	_ES
                                   1329 ;	../lib_master/uart.c:502: return 1;
      000232 75 82 01         [24] 1330 	mov	dpl,#0x01
                                   1331 ;	../lib_master/uart.c:503: }
      000235 22               [24] 1332 	ret
                                   1333 ;------------------------------------------------------------
                                   1334 ;Allocation info for local variables in function 'getstr_uart0'
                                   1335 ;------------------------------------------------------------
                                   1336 ;apu8Data                  Allocated with name '_getstr_uart0_PARM_2'
                                   1337 ;au8Size                   Allocated to registers r7 
                                   1338 ;i                         Allocated to registers r3 
                                   1339 ;------------------------------------------------------------
                                   1340 ;	../lib_master/uart.c:505: uint8_t getstr_uart0(uint8_t au8Size, uint8_t * apu8Data)
                                   1341 ;	-----------------------------------------
                                   1342 ;	 function getstr_uart0
                                   1343 ;	-----------------------------------------
      000236                       1344 _getstr_uart0:
      000236 AF 82            [24] 1345 	mov	r7,dpl
                                   1346 ;	../lib_master/uart.c:511: if (gu8Rx0Size == 0) {
      000238 90r00r58         [24] 1347 	mov	dptr,#_gu8Rx0Size
      00023B E0               [24] 1348 	movx	a,@dptr
      00023C FE               [12] 1349 	mov	r6,a
                                   1350 ;	../lib_master/uart.c:512: return 0;
      00023D 70 03            [24] 1351 	jnz	00102$
      00023F F5 82            [12] 1352 	mov	dpl,a
      000241 22               [24] 1353 	ret
      000242                       1354 00102$:
                                   1355 ;	../lib_master/uart.c:515: if (gu8Rx0Size < au8Size) {
      000242 C3               [12] 1356 	clr	c
      000243 EE               [12] 1357 	mov	a,r6
      000244 9F               [12] 1358 	subb	a,r7
      000245 50 02            [24] 1359 	jnc	00117$
                                   1360 ;	../lib_master/uart.c:516: au8Size = gu8Rx0Size;
      000247 8E 07            [24] 1361 	mov	ar7,r6
                                   1362 ;	../lib_master/uart.c:518: for (i=0;i<au8Size;i++) {
      000249                       1363 00117$:
      000249 AC*00            [24] 1364 	mov	r4,_getstr_uart0_PARM_2
      00024B AD*01            [24] 1365 	mov	r5,(_getstr_uart0_PARM_2 + 1)
      00024D AE*02            [24] 1366 	mov	r6,(_getstr_uart0_PARM_2 + 2)
      00024F 7B 00            [12] 1367 	mov	r3,#0x00
      000251                       1368 00109$:
      000251 C3               [12] 1369 	clr	c
      000252 EB               [12] 1370 	mov	a,r3
      000253 9F               [12] 1371 	subb	a,r7
      000254 50 30            [24] 1372 	jnc	00107$
                                   1373 ;	../lib_master/uart.c:519: *apu8Data++ = pu8UartRx0Buf[gu8Rx0RIdx++];
      000256 90r00r59         [24] 1374 	mov	dptr,#_gu8Rx0RIdx
      000259 E0               [24] 1375 	movx	a,@dptr
      00025A FA               [12] 1376 	mov	r2,a
      00025B 04               [12] 1377 	inc	a
      00025C F0               [24] 1378 	movx	@dptr,a
      00025D EA               [12] 1379 	mov	a,r2
      00025E 24r18            [12] 1380 	add	a,#_pu8UartRx0Buf
      000260 F5 82            [12] 1381 	mov	dpl,a
      000262 E4               [12] 1382 	clr	a
      000263 34s00            [12] 1383 	addc	a,#(_pu8UartRx0Buf >> 8)
      000265 F5 83            [12] 1384 	mov	dph,a
      000267 E0               [24] 1385 	movx	a,@dptr
      000268 8C 82            [24] 1386 	mov	dpl,r4
      00026A 8D 83            [24] 1387 	mov	dph,r5
      00026C 8E F0            [24] 1388 	mov	b,r6
      00026E 12r00r00         [24] 1389 	lcall	__gptrput
      000271 A3               [24] 1390 	inc	dptr
      000272 AC 82            [24] 1391 	mov	r4,dpl
      000274 AD 83            [24] 1392 	mov	r5,dph
                                   1393 ;	../lib_master/uart.c:520: if (gu8Rx0RIdx == UART0_RX_BUFF_SIZE) {
      000276 90r00r59         [24] 1394 	mov	dptr,#_gu8Rx0RIdx
      000279 E0               [24] 1395 	movx	a,@dptr
      00027A FA               [12] 1396 	mov	r2,a
      00027B BA 10 05         [24] 1397 	cjne	r2,#0x10,00110$
                                   1398 ;	../lib_master/uart.c:521: gu8Rx0RIdx = 0;
      00027E 90r00r59         [24] 1399 	mov	dptr,#_gu8Rx0RIdx
      000281 E4               [12] 1400 	clr	a
      000282 F0               [24] 1401 	movx	@dptr,a
      000283                       1402 00110$:
                                   1403 ;	../lib_master/uart.c:518: for (i=0;i<au8Size;i++) {
      000283 0B               [12] 1404 	inc	r3
      000284 80 CB            [24] 1405 	sjmp	00109$
      000286                       1406 00107$:
                                   1407 ;	../lib_master/uart.c:524: gu8Rx0Size -= au8Size;
      000286 90r00r58         [24] 1408 	mov	dptr,#_gu8Rx0Size
      000289 E0               [24] 1409 	movx	a,@dptr
      00028A C3               [12] 1410 	clr	c
      00028B 9F               [12] 1411 	subb	a,r7
      00028C F0               [24] 1412 	movx	@dptr,a
                                   1413 ;	../lib_master/uart.c:525: return au8Size;
      00028D 8F 82            [24] 1414 	mov	dpl,r7
                                   1415 ;	../lib_master/uart.c:526: }
      00028F 22               [24] 1416 	ret
                                   1417 ;------------------------------------------------------------
                                   1418 ;Allocation info for local variables in function 'Uart1Tx_ISR'
                                   1419 ;------------------------------------------------------------
                                   1420 ;i                         Allocated to registers r5 r6 
                                   1421 ;------------------------------------------------------------
                                   1422 ;	../lib_master/uart.c:527: void Uart1Tx_ISR()
                                   1423 ;	-----------------------------------------
                                   1424 ;	 function Uart1Tx_ISR
                                   1425 ;	-----------------------------------------
      000290                       1426 _Uart1Tx_ISR:
                                   1427 ;	../lib_master/uart.c:530: clr_TI_1;// clear, putchar_uart1()에서 직접 불린 상태면 gu8Tx1Size==1인데, 이 경우는 무의미 할 수도 있음, 
                                   1428 ;	assignBit
      000290 C2 F9            [12] 1429 	clr	_TI_1
                                   1430 ;	../lib_master/uart.c:531: if (gu8Tx1Size == 0) {
      000292 90r00r61         [24] 1431 	mov	dptr,#_gu8Tx1Size
      000295 E0               [24] 1432 	movx	a,@dptr
      000296 FF               [12] 1433 	mov	r7,a
      000297 E0               [24] 1434 	movx	a,@dptr
      000298 70 01            [24] 1435 	jnz	00102$
                                   1436 ;	../lib_master/uart.c:533: return;
      00029A 22               [24] 1437 	ret
      00029B                       1438 00102$:
                                   1439 ;	../lib_master/uart.c:540: for (i = 0; i< LINEFI_DOWNLINKE_TX_GAP;i++) {
      00029B 7D 64            [12] 1440 	mov	r5,#0x64
      00029D 7E 00            [12] 1441 	mov	r6,#0x00
      00029F                       1442 00106$:
                                   1443 ;	../lib_master/uart.c:541: nop; nop; nop; nop;
      00029F 00               [12] 1444 	NOP
      0002A0 00               [12] 1445 	NOP
      0002A1 00               [12] 1446 	NOP
      0002A2 00               [12] 1447 	NOP
      0002A3 ED               [12] 1448 	mov	a,r5
      0002A4 24 FF            [12] 1449 	add	a,#0xff
      0002A6 FB               [12] 1450 	mov	r3,a
      0002A7 EE               [12] 1451 	mov	a,r6
      0002A8 34 FF            [12] 1452 	addc	a,#0xff
      0002AA FC               [12] 1453 	mov	r4,a
      0002AB 8B 05            [24] 1454 	mov	ar5,r3
      0002AD 8C 06            [24] 1455 	mov	ar6,r4
                                   1456 ;	../lib_master/uart.c:540: for (i = 0; i< LINEFI_DOWNLINKE_TX_GAP;i++) {
      0002AF EB               [12] 1457 	mov	a,r3
      0002B0 4C               [12] 1458 	orl	a,r4
      0002B1 70 EC            [24] 1459 	jnz	00106$
                                   1460 ;	../lib_master/uart.c:553: SBUF_1 = pu8UartTx1Buf[gu8Tx1RIdx++];
      0002B3 90r00r62         [24] 1461 	mov	dptr,#_gu8Tx1RIdx
      0002B6 E0               [24] 1462 	movx	a,@dptr
      0002B7 FE               [12] 1463 	mov	r6,a
      0002B8 04               [12] 1464 	inc	a
      0002B9 F0               [24] 1465 	movx	@dptr,a
      0002BA EE               [12] 1466 	mov	a,r6
      0002BB 24r48            [12] 1467 	add	a,#_pu8UartTx1Buf
      0002BD F5 82            [12] 1468 	mov	dpl,a
      0002BF E4               [12] 1469 	clr	a
      0002C0 34s00            [12] 1470 	addc	a,#(_pu8UartTx1Buf >> 8)
      0002C2 F5 83            [12] 1471 	mov	dph,a
      0002C4 E0               [24] 1472 	movx	a,@dptr
      0002C5 F5 9A            [12] 1473 	mov	_SBUF_1,a
                                   1474 ;	../lib_master/uart.c:554: gu8Tx1Size--;
      0002C7 EF               [12] 1475 	mov	a,r7
      0002C8 14               [12] 1476 	dec	a
      0002C9 90r00r61         [24] 1477 	mov	dptr,#_gu8Tx1Size
      0002CC F0               [24] 1478 	movx	@dptr,a
                                   1479 ;	../lib_master/uart.c:560: gu8Tx1RIdx &= UART1_TX_BUFF_SIZE_MSK;
      0002CD 90r00r62         [24] 1480 	mov	dptr,#_gu8Tx1RIdx
      0002D0 E0               [24] 1481 	movx	a,@dptr
      0002D1 53 E0 0F         [24] 1482 	anl	acc,#0x0f
      0002D4 F0               [24] 1483 	movx	@dptr,a
                                   1484 ;	../lib_master/uart.c:562: }
      0002D5 22               [24] 1485 	ret
                                   1486 ;------------------------------------------------------------
                                   1487 ;Allocation info for local variables in function 'SerialPort1_ISR'
                                   1488 ;------------------------------------------------------------
                                   1489 ;	../lib_master/uart.c:564: void SerialPort1_ISR(void) interrupt(15) 
                                   1490 ;	-----------------------------------------
                                   1491 ;	 function SerialPort1_ISR
                                   1492 ;	-----------------------------------------
      0002D6                       1493 _SerialPort1_ISR:
                           00000F  1494 	ar7 = 0x0f
                           00000E  1495 	ar6 = 0x0e
                           00000D  1496 	ar5 = 0x0d
                           00000C  1497 	ar4 = 0x0c
                           00000B  1498 	ar3 = 0x0b
                           00000A  1499 	ar2 = 0x0a
                           000009  1500 	ar1 = 0x09
                           000008  1501 	ar0 = 0x08
      0002D6 C0*00            [24] 1502 	push	bits
      0002D8 C0 E0            [24] 1503 	push	acc
      0002DA C0 F0            [24] 1504 	push	b
      0002DC C0 82            [24] 1505 	push	dpl
      0002DE C0 83            [24] 1506 	push	dph
      0002E0 C0 07            [24] 1507 	push	(0+7)
      0002E2 C0 06            [24] 1508 	push	(0+6)
      0002E4 C0 05            [24] 1509 	push	(0+5)
      0002E6 C0 04            [24] 1510 	push	(0+4)
      0002E8 C0 03            [24] 1511 	push	(0+3)
      0002EA C0 02            [24] 1512 	push	(0+2)
      0002EC C0 01            [24] 1513 	push	(0+1)
      0002EE C0 00            [24] 1514 	push	(0+0)
      0002F0 C0 D0            [24] 1515 	push	psw
      0002F2 75 D0 08         [24] 1516 	mov	psw,#0x08
                                   1517 ;	../lib_master/uart.c:566: if (RI_1 == 1) {/* if reception occur */
      0002F5 30 F8 3B         [24] 1518 	jnb	_RI_1,00106$
                                   1519 ;	../lib_master/uart.c:567: gu8Uart1RCnt ++;
      0002F8 90r00r66         [24] 1520 	mov	dptr,#_gu8Uart1RCnt
      0002FB E0               [24] 1521 	movx	a,@dptr
      0002FC 24 01            [12] 1522 	add	a,#0x01
      0002FE F0               [24] 1523 	movx	@dptr,a
                                   1524 ;	../lib_master/uart.c:568: if (gu8Rx1Size < UART1_RX_BUFF_SIZE) {
      0002FF 90r00r5E         [24] 1525 	mov	dptr,#_gu8Rx1Size
      000302 E0               [24] 1526 	movx	a,@dptr
      000303 FF               [12] 1527 	mov	r7,a
      000304 BF 10 00         [24] 1528 	cjne	r7,#0x10,00128$
      000307                       1529 00128$:
      000307 50 28            [24] 1530 	jnc	00104$
                                   1531 ;	../lib_master/uart.c:569: pu8UartRx1Buf[gu8Rx1WIdx++] = SBUF_1;
      000309 90r00r60         [24] 1532 	mov	dptr,#_gu8Rx1WIdx
      00030C E0               [24] 1533 	movx	a,@dptr
      00030D FF               [12] 1534 	mov	r7,a
      00030E 04               [12] 1535 	inc	a
      00030F F0               [24] 1536 	movx	@dptr,a
      000310 EF               [12] 1537 	mov	a,r7
      000311 24r38            [12] 1538 	add	a,#_pu8UartRx1Buf
      000313 F5 82            [12] 1539 	mov	dpl,a
      000315 E4               [12] 1540 	clr	a
      000316 34s00            [12] 1541 	addc	a,#(_pu8UartRx1Buf >> 8)
      000318 F5 83            [12] 1542 	mov	dph,a
      00031A E5 9A            [12] 1543 	mov	a,_SBUF_1
      00031C F0               [24] 1544 	movx	@dptr,a
                                   1545 ;	../lib_master/uart.c:570: gu8Rx1Size++;
      00031D 90r00r5E         [24] 1546 	mov	dptr,#_gu8Rx1Size
      000320 E0               [24] 1547 	movx	a,@dptr
      000321 24 01            [12] 1548 	add	a,#0x01
      000323 F0               [24] 1549 	movx	@dptr,a
                                   1550 ;	../lib_master/uart.c:571: if (gu8Rx1WIdx == UART1_RX_BUFF_SIZE) {
      000324 90r00r60         [24] 1551 	mov	dptr,#_gu8Rx1WIdx
      000327 E0               [24] 1552 	movx	a,@dptr
      000328 FF               [12] 1553 	mov	r7,a
      000329 BF 10 05         [24] 1554 	cjne	r7,#0x10,00104$
                                   1555 ;	../lib_master/uart.c:572: gu8Rx1WIdx = 0;
      00032C 90r00r60         [24] 1556 	mov	dptr,#_gu8Rx1WIdx
      00032F E4               [12] 1557 	clr	a
      000330 F0               [24] 1558 	movx	@dptr,a
      000331                       1559 00104$:
                                   1560 ;	../lib_master/uart.c:578: clr_RI_1;      /* clear reception flag for next reception */
                                   1561 ;	assignBit
      000331 C2 F8            [12] 1562 	clr	_RI_1
      000333                       1563 00106$:
                                   1564 ;	../lib_master/uart.c:581: if (TI_1 == 1) {
      000333 30 F9 10         [24] 1565 	jnb	_TI_1,00109$
                                   1566 ;	../lib_master/uart.c:582: gu8Uart1TCnt ++;
      000336 90r00r67         [24] 1567 	mov	dptr,#_gu8Uart1TCnt
      000339 E0               [24] 1568 	movx	a,@dptr
      00033A 24 01            [12] 1569 	add	a,#0x01
      00033C F0               [24] 1570 	movx	@dptr,a
                                   1571 ;	../lib_master/uart.c:583: Uart1Tx_ISR();
      00033D 75 D0 00         [24] 1572 	mov	psw,#0x00
      000340 12r02r90         [24] 1573 	lcall	_Uart1Tx_ISR
      000343 75 D0 08         [24] 1574 	mov	psw,#0x08
      000346                       1575 00109$:
                                   1576 ;	../lib_master/uart.c:585: }
      000346 D0 D0            [24] 1577 	pop	psw
      000348 D0 00            [24] 1578 	pop	(0+0)
      00034A D0 01            [24] 1579 	pop	(0+1)
      00034C D0 02            [24] 1580 	pop	(0+2)
      00034E D0 03            [24] 1581 	pop	(0+3)
      000350 D0 04            [24] 1582 	pop	(0+4)
      000352 D0 05            [24] 1583 	pop	(0+5)
      000354 D0 06            [24] 1584 	pop	(0+6)
      000356 D0 07            [24] 1585 	pop	(0+7)
      000358 D0 83            [24] 1586 	pop	dph
      00035A D0 82            [24] 1587 	pop	dpl
      00035C D0 F0            [24] 1588 	pop	b
      00035E D0 E0            [24] 1589 	pop	acc
      000360 D0*00            [24] 1590 	pop	bits
      000362 32               [24] 1591 	reti
                                   1592 ;------------------------------------------------------------
                                   1593 ;Allocation info for local variables in function 'chkchar_uart1'
                                   1594 ;------------------------------------------------------------
                                   1595 ;	../lib_master/uart.c:587: uint8_t chkchar_uart1()
                                   1596 ;	-----------------------------------------
                                   1597 ;	 function chkchar_uart1
                                   1598 ;	-----------------------------------------
      000363                       1599 _chkchar_uart1:
                           000007  1600 	ar7 = 0x07
                           000006  1601 	ar6 = 0x06
                           000005  1602 	ar5 = 0x05
                           000004  1603 	ar4 = 0x04
                           000003  1604 	ar3 = 0x03
                           000002  1605 	ar2 = 0x02
                           000001  1606 	ar1 = 0x01
                           000000  1607 	ar0 = 0x00
                                   1608 ;	../lib_master/uart.c:592: return gu8Rx1Size;
      000363 90r00r5E         [24] 1609 	mov	dptr,#_gu8Rx1Size
      000366 E0               [24] 1610 	movx	a,@dptr
                                   1611 ;	../lib_master/uart.c:593: }
      000367 F5 82            [12] 1612 	mov	dpl,a
      000369 22               [24] 1613 	ret
                                   1614 ;------------------------------------------------------------
                                   1615 ;Allocation info for local variables in function 'getchar_uart1'
                                   1616 ;------------------------------------------------------------
                                   1617 ;apu8Data                  Allocated to registers r5 r6 r7 
                                   1618 ;------------------------------------------------------------
                                   1619 ;	../lib_master/uart.c:595: uint8_t getchar_uart1(uint8_t * apu8Data)
                                   1620 ;	-----------------------------------------
                                   1621 ;	 function getchar_uart1
                                   1622 ;	-----------------------------------------
      00036A                       1623 _getchar_uart1:
      00036A AD 82            [24] 1624 	mov	r5,dpl
      00036C AE 83            [24] 1625 	mov	r6,dph
      00036E AF F0            [24] 1626 	mov	r7,b
                                   1627 ;	../lib_master/uart.c:600: if (gu8Rx1Size == 0) {
      000370 90r00r5E         [24] 1628 	mov	dptr,#_gu8Rx1Size
      000373 E0               [24] 1629 	movx	a,@dptr
                                   1630 ;	../lib_master/uart.c:601: return 0;
      000374 70 03            [24] 1631 	jnz	00102$
      000376 F5 82            [12] 1632 	mov	dpl,a
      000378 22               [24] 1633 	ret
      000379                       1634 00102$:
                                   1635 ;	../lib_master/uart.c:603: clr_ES_1;
      000379 53 9C FE         [24] 1636 	anl	_EIE1,#0xfe
                                   1637 ;	../lib_master/uart.c:604: *apu8Data = pu8UartRx1Buf[gu8Rx1RIdx++];
      00037C 90r00r5F         [24] 1638 	mov	dptr,#_gu8Rx1RIdx
      00037F E0               [24] 1639 	movx	a,@dptr
      000380 FC               [12] 1640 	mov	r4,a
      000381 04               [12] 1641 	inc	a
      000382 F0               [24] 1642 	movx	@dptr,a
      000383 EC               [12] 1643 	mov	a,r4
      000384 24r38            [12] 1644 	add	a,#_pu8UartRx1Buf
      000386 F5 82            [12] 1645 	mov	dpl,a
      000388 E4               [12] 1646 	clr	a
      000389 34s00            [12] 1647 	addc	a,#(_pu8UartRx1Buf >> 8)
      00038B F5 83            [12] 1648 	mov	dph,a
      00038D E0               [24] 1649 	movx	a,@dptr
      00038E 8D 82            [24] 1650 	mov	dpl,r5
      000390 8E 83            [24] 1651 	mov	dph,r6
      000392 8F F0            [24] 1652 	mov	b,r7
      000394 12r00r00         [24] 1653 	lcall	__gptrput
                                   1654 ;	../lib_master/uart.c:605: gu8Rx1Size--;
      000397 90r00r5E         [24] 1655 	mov	dptr,#_gu8Rx1Size
      00039A E0               [24] 1656 	movx	a,@dptr
      00039B 14               [12] 1657 	dec	a
      00039C F0               [24] 1658 	movx	@dptr,a
                                   1659 ;	../lib_master/uart.c:606: if (gu8Rx1RIdx == UART1_RX_BUFF_SIZE) {
      00039D 90r00r5F         [24] 1660 	mov	dptr,#_gu8Rx1RIdx
      0003A0 E0               [24] 1661 	movx	a,@dptr
      0003A1 FF               [12] 1662 	mov	r7,a
      0003A2 BF 10 05         [24] 1663 	cjne	r7,#0x10,00104$
                                   1664 ;	../lib_master/uart.c:607: gu8Rx1RIdx = 0;
      0003A5 90r00r5F         [24] 1665 	mov	dptr,#_gu8Rx1RIdx
      0003A8 E4               [12] 1666 	clr	a
      0003A9 F0               [24] 1667 	movx	@dptr,a
      0003AA                       1668 00104$:
                                   1669 ;	../lib_master/uart.c:609: set_ES_1;
      0003AA 43 9C 01         [24] 1670 	orl	_EIE1,#0x01
                                   1671 ;	../lib_master/uart.c:610: return 1;
      0003AD 75 82 01         [24] 1672 	mov	dpl,#0x01
                                   1673 ;	../lib_master/uart.c:611: }
      0003B0 22               [24] 1674 	ret
                                   1675 ;------------------------------------------------------------
                                   1676 ;Allocation info for local variables in function 'getstr_uart1'
                                   1677 ;------------------------------------------------------------
                                   1678 ;apu8Data                  Allocated with name '_getstr_uart1_PARM_2'
                                   1679 ;au8Size                   Allocated to registers r7 
                                   1680 ;i                         Allocated to registers r3 
                                   1681 ;------------------------------------------------------------
                                   1682 ;	../lib_master/uart.c:613: uint8_t getstr_uart1(uint8_t au8Size, uint8_t * apu8Data)
                                   1683 ;	-----------------------------------------
                                   1684 ;	 function getstr_uart1
                                   1685 ;	-----------------------------------------
      0003B1                       1686 _getstr_uart1:
      0003B1 AF 82            [24] 1687 	mov	r7,dpl
                                   1688 ;	../lib_master/uart.c:619: if (gu8Rx1Size == 0) {
      0003B3 90r00r5E         [24] 1689 	mov	dptr,#_gu8Rx1Size
      0003B6 E0               [24] 1690 	movx	a,@dptr
      0003B7 FE               [12] 1691 	mov	r6,a
                                   1692 ;	../lib_master/uart.c:620: return 0;
      0003B8 70 03            [24] 1693 	jnz	00102$
      0003BA F5 82            [12] 1694 	mov	dpl,a
      0003BC 22               [24] 1695 	ret
      0003BD                       1696 00102$:
                                   1697 ;	../lib_master/uart.c:623: if (gu8Rx1Size < au8Size) {
      0003BD C3               [12] 1698 	clr	c
      0003BE EE               [12] 1699 	mov	a,r6
      0003BF 9F               [12] 1700 	subb	a,r7
      0003C0 50 02            [24] 1701 	jnc	00117$
                                   1702 ;	../lib_master/uart.c:624: au8Size = gu8Rx1Size;
      0003C2 8E 07            [24] 1703 	mov	ar7,r6
                                   1704 ;	../lib_master/uart.c:626: for (i=0;i<au8Size;i++) {
      0003C4                       1705 00117$:
      0003C4 AC*00            [24] 1706 	mov	r4,_getstr_uart1_PARM_2
      0003C6 AD*01            [24] 1707 	mov	r5,(_getstr_uart1_PARM_2 + 1)
      0003C8 AE*02            [24] 1708 	mov	r6,(_getstr_uart1_PARM_2 + 2)
      0003CA 7B 00            [12] 1709 	mov	r3,#0x00
      0003CC                       1710 00109$:
      0003CC C3               [12] 1711 	clr	c
      0003CD EB               [12] 1712 	mov	a,r3
      0003CE 9F               [12] 1713 	subb	a,r7
      0003CF 50 30            [24] 1714 	jnc	00107$
                                   1715 ;	../lib_master/uart.c:627: *apu8Data++ = pu8UartRx1Buf[gu8Rx1RIdx++];
      0003D1 90r00r5F         [24] 1716 	mov	dptr,#_gu8Rx1RIdx
      0003D4 E0               [24] 1717 	movx	a,@dptr
      0003D5 FA               [12] 1718 	mov	r2,a
      0003D6 04               [12] 1719 	inc	a
      0003D7 F0               [24] 1720 	movx	@dptr,a
      0003D8 EA               [12] 1721 	mov	a,r2
      0003D9 24r38            [12] 1722 	add	a,#_pu8UartRx1Buf
      0003DB F5 82            [12] 1723 	mov	dpl,a
      0003DD E4               [12] 1724 	clr	a
      0003DE 34s00            [12] 1725 	addc	a,#(_pu8UartRx1Buf >> 8)
      0003E0 F5 83            [12] 1726 	mov	dph,a
      0003E2 E0               [24] 1727 	movx	a,@dptr
      0003E3 8C 82            [24] 1728 	mov	dpl,r4
      0003E5 8D 83            [24] 1729 	mov	dph,r5
      0003E7 8E F0            [24] 1730 	mov	b,r6
      0003E9 12r00r00         [24] 1731 	lcall	__gptrput
      0003EC A3               [24] 1732 	inc	dptr
      0003ED AC 82            [24] 1733 	mov	r4,dpl
      0003EF AD 83            [24] 1734 	mov	r5,dph
                                   1735 ;	../lib_master/uart.c:628: if (gu8Rx1RIdx == UART1_RX_BUFF_SIZE) {
      0003F1 90r00r5F         [24] 1736 	mov	dptr,#_gu8Rx1RIdx
      0003F4 E0               [24] 1737 	movx	a,@dptr
      0003F5 FA               [12] 1738 	mov	r2,a
      0003F6 BA 10 05         [24] 1739 	cjne	r2,#0x10,00110$
                                   1740 ;	../lib_master/uart.c:629: gu8Rx1RIdx = 0;
      0003F9 90r00r5F         [24] 1741 	mov	dptr,#_gu8Rx1RIdx
      0003FC E4               [12] 1742 	clr	a
      0003FD F0               [24] 1743 	movx	@dptr,a
      0003FE                       1744 00110$:
                                   1745 ;	../lib_master/uart.c:626: for (i=0;i<au8Size;i++) {
      0003FE 0B               [12] 1746 	inc	r3
      0003FF 80 CB            [24] 1747 	sjmp	00109$
      000401                       1748 00107$:
                                   1749 ;	../lib_master/uart.c:632: gu8Rx1Size -= au8Size;
      000401 90r00r5E         [24] 1750 	mov	dptr,#_gu8Rx1Size
      000404 E0               [24] 1751 	movx	a,@dptr
      000405 C3               [12] 1752 	clr	c
      000406 9F               [12] 1753 	subb	a,r7
      000407 F0               [24] 1754 	movx	@dptr,a
                                   1755 ;	../lib_master/uart.c:633: return au8Size;
      000408 8F 82            [24] 1756 	mov	dpl,r7
                                   1757 ;	../lib_master/uart.c:634: }
      00040A 22               [24] 1758 	ret
                                   1759 ;------------------------------------------------------------
                                   1760 ;Allocation info for local variables in function 'putchar_uart0'
                                   1761 ;------------------------------------------------------------
                                   1762 ;au8Data                   Allocated to registers r7 
                                   1763 ;------------------------------------------------------------
                                   1764 ;	../lib_master/uart.c:636: void putchar_uart0(char au8Data)
                                   1765 ;	-----------------------------------------
                                   1766 ;	 function putchar_uart0
                                   1767 ;	-----------------------------------------
      00040B                       1768 _putchar_uart0:
      00040B AF 82            [24] 1769 	mov	r7,dpl
                                   1770 ;	../lib_master/uart.c:638: while (gu8Tx0Size >= UART0_TX_BUFF_SIZE) {
      00040D                       1771 00101$:
      00040D 90r00r5B         [24] 1772 	mov	dptr,#_gu8Tx0Size
      000410 E0               [24] 1773 	movx	a,@dptr
      000411 FE               [12] 1774 	mov	r6,a
      000412 BE 10 00         [24] 1775 	cjne	r6,#0x10,00120$
      000415                       1776 00120$:
      000415 40 03            [24] 1777 	jc	00103$
                                   1778 ;	../lib_master/uart.c:641: nop;
      000417 00               [12] 1779 	NOP
      000418 80 F3            [24] 1780 	sjmp	00101$
      00041A                       1781 00103$:
                                   1782 ;	../lib_master/uart.c:644: pu8UartTx0Buf[gu8Tx0WIdx++] = au8Data;
      00041A 90r00r5D         [24] 1783 	mov	dptr,#_gu8Tx0WIdx
      00041D E0               [24] 1784 	movx	a,@dptr
      00041E FE               [12] 1785 	mov	r6,a
      00041F 04               [12] 1786 	inc	a
      000420 F0               [24] 1787 	movx	@dptr,a
      000421 EE               [12] 1788 	mov	a,r6
      000422 24r28            [12] 1789 	add	a,#_pu8UartTx0Buf
      000424 F5 82            [12] 1790 	mov	dpl,a
      000426 E4               [12] 1791 	clr	a
      000427 34s00            [12] 1792 	addc	a,#(_pu8UartTx0Buf >> 8)
      000429 F5 83            [12] 1793 	mov	dph,a
      00042B EF               [12] 1794 	mov	a,r7
      00042C F0               [24] 1795 	movx	@dptr,a
                                   1796 ;	../lib_master/uart.c:645: gu8Tx0Size++;
      00042D 90r00r5B         [24] 1797 	mov	dptr,#_gu8Tx0Size
      000430 E0               [24] 1798 	movx	a,@dptr
      000431 24 01            [12] 1799 	add	a,#0x01
      000433 F0               [24] 1800 	movx	@dptr,a
                                   1801 ;	../lib_master/uart.c:646: if (gu8Tx0WIdx == UART0_TX_BUFF_SIZE) {
      000434 90r00r5D         [24] 1802 	mov	dptr,#_gu8Tx0WIdx
      000437 E0               [24] 1803 	movx	a,@dptr
      000438 FF               [12] 1804 	mov	r7,a
      000439 BF 10 05         [24] 1805 	cjne	r7,#0x10,00105$
                                   1806 ;	../lib_master/uart.c:648: gu8Tx0WIdx = 0;
      00043C 90r00r5D         [24] 1807 	mov	dptr,#_gu8Tx0WIdx
      00043F E4               [12] 1808 	clr	a
      000440 F0               [24] 1809 	movx	@dptr,a
      000441                       1810 00105$:
                                   1811 ;	../lib_master/uart.c:650: set_TI;
                                   1812 ;	assignBit
      000441 D2 99            [12] 1813 	setb	_TI
                                   1814 ;	../lib_master/uart.c:651: }
      000443 22               [24] 1815 	ret
                                   1816 ;------------------------------------------------------------
                                   1817 ;Allocation info for local variables in function 'putchar_uart1'
                                   1818 ;------------------------------------------------------------
                                   1819 ;au8Data                   Allocated to registers r7 
                                   1820 ;------------------------------------------------------------
                                   1821 ;	../lib_master/uart.c:653: void putchar_uart1(char au8Data)
                                   1822 ;	-----------------------------------------
                                   1823 ;	 function putchar_uart1
                                   1824 ;	-----------------------------------------
      000444                       1825 _putchar_uart1:
      000444 AF 82            [24] 1826 	mov	r7,dpl
                                   1827 ;	../lib_master/uart.c:655: while (gu8Tx1Size >= UART1_TX_BUFF_SIZE) {
      000446                       1828 00101$:
      000446 90r00r61         [24] 1829 	mov	dptr,#_gu8Tx1Size
      000449 E0               [24] 1830 	movx	a,@dptr
      00044A FE               [12] 1831 	mov	r6,a
      00044B BE 10 00         [24] 1832 	cjne	r6,#0x10,00121$
      00044E                       1833 00121$:
      00044E 40 0A            [24] 1834 	jc	00103$
                                   1835 ;	../lib_master/uart.c:656: gu8BFCnt++;
      000450 90r00r01         [24] 1836 	mov	dptr,#_gu8BFCnt
      000453 E0               [24] 1837 	movx	a,@dptr
      000454 24 01            [12] 1838 	add	a,#0x01
      000456 F0               [24] 1839 	movx	@dptr,a
                                   1840 ;	../lib_master/uart.c:659: nop;
      000457 00               [12] 1841 	NOP
      000458 80 EC            [24] 1842 	sjmp	00101$
      00045A                       1843 00103$:
                                   1844 ;	../lib_master/uart.c:661: gu8BNFCnt++;
      00045A 90r00r00         [24] 1845 	mov	dptr,#_gu8BNFCnt
      00045D E0               [24] 1846 	movx	a,@dptr
      00045E 24 01            [12] 1847 	add	a,#0x01
      000460 F0               [24] 1848 	movx	@dptr,a
                                   1849 ;	../lib_master/uart.c:663: clr_ES_1;
      000461 53 9C FE         [24] 1850 	anl	_EIE1,#0xfe
                                   1851 ;	../lib_master/uart.c:664: pu8UartTx1Buf[gu8Tx1WIdx++] = au8Data;
      000464 90r00r63         [24] 1852 	mov	dptr,#_gu8Tx1WIdx
      000467 E0               [24] 1853 	movx	a,@dptr
      000468 FE               [12] 1854 	mov	r6,a
      000469 04               [12] 1855 	inc	a
      00046A F0               [24] 1856 	movx	@dptr,a
      00046B EE               [12] 1857 	mov	a,r6
      00046C 24r48            [12] 1858 	add	a,#_pu8UartTx1Buf
      00046E F5 82            [12] 1859 	mov	dpl,a
      000470 E4               [12] 1860 	clr	a
      000471 34s00            [12] 1861 	addc	a,#(_pu8UartTx1Buf >> 8)
      000473 F5 83            [12] 1862 	mov	dph,a
      000475 EF               [12] 1863 	mov	a,r7
      000476 F0               [24] 1864 	movx	@dptr,a
                                   1865 ;	../lib_master/uart.c:665: gu8Tx1Size++;
      000477 90r00r61         [24] 1866 	mov	dptr,#_gu8Tx1Size
      00047A E0               [24] 1867 	movx	a,@dptr
      00047B 24 01            [12] 1868 	add	a,#0x01
      00047D F0               [24] 1869 	movx	@dptr,a
                                   1870 ;	../lib_master/uart.c:672: gu8Tx1WIdx &= UART1_TX_BUFF_SIZE_MSK;
      00047E 90r00r63         [24] 1871 	mov	dptr,#_gu8Tx1WIdx
      000481 E0               [24] 1872 	movx	a,@dptr
      000482 53 E0 0F         [24] 1873 	anl	acc,#0x0f
      000485 F0               [24] 1874 	movx	@dptr,a
                                   1875 ;	../lib_master/uart.c:679: if (gu8Tx1Size == 1) {
      000486 90r00r61         [24] 1876 	mov	dptr,#_gu8Tx1Size
      000489 E0               [24] 1877 	movx	a,@dptr
      00048A FF               [12] 1878 	mov	r7,a
      00048B BF 01 0B         [24] 1879 	cjne	r7,#0x01,00105$
                                   1880 ;	../lib_master/uart.c:680: gu8BECnt++;
      00048E 90r00r03         [24] 1881 	mov	dptr,#_gu8BECnt
      000491 E0               [24] 1882 	movx	a,@dptr
      000492 24 01            [12] 1883 	add	a,#0x01
      000494 F0               [24] 1884 	movx	@dptr,a
                                   1885 ;	../lib_master/uart.c:682: set_TI_1;
                                   1886 ;	assignBit
      000495 D2 F9            [12] 1887 	setb	_TI_1
      000497 80 07            [24] 1888 	sjmp	00106$
      000499                       1889 00105$:
                                   1890 ;	../lib_master/uart.c:685: gu8BNECnt++;
      000499 90r00r02         [24] 1891 	mov	dptr,#_gu8BNECnt
      00049C E0               [24] 1892 	movx	a,@dptr
      00049D 24 01            [12] 1893 	add	a,#0x01
      00049F F0               [24] 1894 	movx	@dptr,a
      0004A0                       1895 00106$:
                                   1896 ;	../lib_master/uart.c:706: set_ES_1;
      0004A0 43 9C 01         [24] 1897 	orl	_EIE1,#0x01
                                   1898 ;	../lib_master/uart.c:707: }
      0004A3 22               [24] 1899 	ret
                                   1900 ;------------------------------------------------------------
                                   1901 ;Allocation info for local variables in function 'preamble'
                                   1902 ;------------------------------------------------------------
                                   1903 ;	../lib_master/uart.c:710: void preamble() 
                                   1904 ;	-----------------------------------------
                                   1905 ;	 function preamble
                                   1906 ;	-----------------------------------------
      0004A4                       1907 _preamble:
                                   1908 ;	../lib_master/uart.c:712: gu8UART = 1;
      0004A4 75*00 01         [24] 1909 	mov	_gu8UART,#0x01
                                   1910 ;	../lib_master/uart.c:713: putchar(0xF0);
      0004A7 90 00 F0         [24] 1911 	mov	dptr,#0x00f0
                                   1912 ;	../lib_master/uart.c:714: return;
                                   1913 ;	../lib_master/uart.c:715: }
      0004AA 02r00rE0         [24] 1914 	ljmp	_putchar
                                   1915 ;------------------------------------------------------------
                                   1916 ;Allocation info for local variables in function 'putchar_manchester'
                                   1917 ;------------------------------------------------------------
                                   1918 ;c                         Allocated to registers r7 
                                   1919 ;------------------------------------------------------------
                                   1920 ;	../lib_master/uart.c:717: void putchar_manchester(char c) 
                                   1921 ;	-----------------------------------------
                                   1922 ;	 function putchar_manchester
                                   1923 ;	-----------------------------------------
      0004AD                       1924 _putchar_manchester:
      0004AD AF 82            [24] 1925 	mov	r7,dpl
                                   1926 ;	../lib_master/uart.c:719: gu8UART = 1;
      0004AF 75*00 01         [24] 1927 	mov	_gu8UART,#0x01
                                   1928 ;	../lib_master/uart.c:720: putchar( (gpc2B2MC[(c>>6)&0x3]<<4) | gpc2B2MC[(c>>4)&0x3]);
      0004B2 EF               [12] 1929 	mov	a,r7
      0004B3 23               [12] 1930 	rl	a
      0004B4 23               [12] 1931 	rl	a
      0004B5 54 03            [12] 1932 	anl	a,#0x03
      0004B7 FE               [12] 1933 	mov	r6,a
      0004B8 53 06 03         [24] 1934 	anl	ar6,#0x03
      0004BB 7D 00            [12] 1935 	mov	r5,#0x00
      0004BD EE               [12] 1936 	mov	a,r6
      0004BE 24r04            [12] 1937 	add	a,#_gpc2B2MC
      0004C0 F5 82            [12] 1938 	mov	dpl,a
      0004C2 ED               [12] 1939 	mov	a,r5
      0004C3 34s00            [12] 1940 	addc	a,#(_gpc2B2MC >> 8)
      0004C5 F5 83            [12] 1941 	mov	dph,a
      0004C7 E0               [24] 1942 	movx	a,@dptr
      0004C8 FE               [12] 1943 	mov	r6,a
      0004C9 E4               [12] 1944 	clr	a
      0004CA CE               [12] 1945 	xch	a,r6
      0004CB C4               [12] 1946 	swap	a
      0004CC CE               [12] 1947 	xch	a,r6
      0004CD 6E               [12] 1948 	xrl	a,r6
      0004CE CE               [12] 1949 	xch	a,r6
      0004CF 54 F0            [12] 1950 	anl	a,#0xf0
      0004D1 CE               [12] 1951 	xch	a,r6
      0004D2 6E               [12] 1952 	xrl	a,r6
      0004D3 FD               [12] 1953 	mov	r5,a
      0004D4 EF               [12] 1954 	mov	a,r7
      0004D5 C4               [12] 1955 	swap	a
      0004D6 54 0F            [12] 1956 	anl	a,#0x0f
      0004D8 FC               [12] 1957 	mov	r4,a
      0004D9 53 04 03         [24] 1958 	anl	ar4,#0x03
      0004DC 7B 00            [12] 1959 	mov	r3,#0x00
      0004DE EC               [12] 1960 	mov	a,r4
      0004DF 24r04            [12] 1961 	add	a,#_gpc2B2MC
      0004E1 F5 82            [12] 1962 	mov	dpl,a
      0004E3 EB               [12] 1963 	mov	a,r3
      0004E4 34s00            [12] 1964 	addc	a,#(_gpc2B2MC >> 8)
      0004E6 F5 83            [12] 1965 	mov	dph,a
      0004E8 E0               [24] 1966 	movx	a,@dptr
      0004E9 7B 00            [12] 1967 	mov	r3,#0x00
      0004EB 4E               [12] 1968 	orl	a,r6
      0004EC F5 82            [12] 1969 	mov	dpl,a
      0004EE EB               [12] 1970 	mov	a,r3
      0004EF 4D               [12] 1971 	orl	a,r5
      0004F0 F5 83            [12] 1972 	mov	dph,a
      0004F2 C0 07            [24] 1973 	push	ar7
      0004F4 12r00rE0         [24] 1974 	lcall	_putchar
      0004F7 D0 07            [24] 1975 	pop	ar7
                                   1976 ;	../lib_master/uart.c:721: putchar( (gpc2B2MC[(c>>2)&0x3]<<4) | gpc2B2MC[(c>>0)&0x3]);
      0004F9 EF               [12] 1977 	mov	a,r7
      0004FA 03               [12] 1978 	rr	a
      0004FB 03               [12] 1979 	rr	a
      0004FC 54 3F            [12] 1980 	anl	a,#0x3f
      0004FE FE               [12] 1981 	mov	r6,a
      0004FF 53 06 03         [24] 1982 	anl	ar6,#0x03
      000502 7D 00            [12] 1983 	mov	r5,#0x00
      000504 EE               [12] 1984 	mov	a,r6
      000505 24r04            [12] 1985 	add	a,#_gpc2B2MC
      000507 F5 82            [12] 1986 	mov	dpl,a
      000509 ED               [12] 1987 	mov	a,r5
      00050A 34s00            [12] 1988 	addc	a,#(_gpc2B2MC >> 8)
      00050C F5 83            [12] 1989 	mov	dph,a
      00050E E0               [24] 1990 	movx	a,@dptr
      00050F FE               [12] 1991 	mov	r6,a
      000510 E4               [12] 1992 	clr	a
      000511 CE               [12] 1993 	xch	a,r6
      000512 C4               [12] 1994 	swap	a
      000513 CE               [12] 1995 	xch	a,r6
      000514 6E               [12] 1996 	xrl	a,r6
      000515 CE               [12] 1997 	xch	a,r6
      000516 54 F0            [12] 1998 	anl	a,#0xf0
      000518 CE               [12] 1999 	xch	a,r6
      000519 6E               [12] 2000 	xrl	a,r6
      00051A FD               [12] 2001 	mov	r5,a
      00051B 53 07 03         [24] 2002 	anl	ar7,#0x03
      00051E 7C 00            [12] 2003 	mov	r4,#0x00
      000520 EF               [12] 2004 	mov	a,r7
      000521 24r04            [12] 2005 	add	a,#_gpc2B2MC
      000523 F5 82            [12] 2006 	mov	dpl,a
      000525 EC               [12] 2007 	mov	a,r4
      000526 34s00            [12] 2008 	addc	a,#(_gpc2B2MC >> 8)
      000528 F5 83            [12] 2009 	mov	dph,a
      00052A E0               [24] 2010 	movx	a,@dptr
      00052B 7C 00            [12] 2011 	mov	r4,#0x00
      00052D 4E               [12] 2012 	orl	a,r6
      00052E F5 82            [12] 2013 	mov	dpl,a
      000530 EC               [12] 2014 	mov	a,r4
      000531 4D               [12] 2015 	orl	a,r5
      000532 F5 83            [12] 2016 	mov	dph,a
                                   2017 ;	../lib_master/uart.c:722: return;
                                   2018 ;	../lib_master/uart.c:723: }
      000534 02r00rE0         [24] 2019 	ljmp	_putchar
                                   2020 ;------------------------------------------------------------
                                   2021 ;Allocation info for local variables in function 'chk_manchester'
                                   2022 ;------------------------------------------------------------
                                   2023 ;c                         Allocated to registers r7 
                                   2024 ;------------------------------------------------------------
                                   2025 ;	../lib_master/uart.c:725: UINT8 chk_manchester(UINT8 c)
                                   2026 ;	-----------------------------------------
                                   2027 ;	 function chk_manchester
                                   2028 ;	-----------------------------------------
      000537                       2029 _chk_manchester:
                                   2030 ;	../lib_master/uart.c:739: if (gpcMC22B[(c>>4)] == 0xF) {
      000537 E5 82            [12] 2031 	mov	a,dpl
      000539 FF               [12] 2032 	mov	r7,a
      00053A C4               [12] 2033 	swap	a
      00053B 54 0F            [12] 2034 	anl	a,#0x0f
      00053D 24r08            [12] 2035 	add	a,#_gpcMC22B
      00053F F5 82            [12] 2036 	mov	dpl,a
      000541 E4               [12] 2037 	clr	a
      000542 34s00            [12] 2038 	addc	a,#(_gpcMC22B >> 8)
      000544 F5 83            [12] 2039 	mov	dph,a
      000546 E0               [24] 2040 	movx	a,@dptr
      000547 FE               [12] 2041 	mov	r6,a
      000548 BE 0F 04         [24] 2042 	cjne	r6,#0x0f,00102$
                                   2043 ;	../lib_master/uart.c:740: return MC_NOT_OK;
      00054B 75 82 00         [24] 2044 	mov	dpl,#0x00
      00054E 22               [24] 2045 	ret
      00054F                       2046 00102$:
                                   2047 ;	../lib_master/uart.c:742: if (gpcMC22B[(c&0xF)] == 0xF) {
      00054F 53 07 0F         [24] 2048 	anl	ar7,#0x0f
      000552 7E 00            [12] 2049 	mov	r6,#0x00
      000554 EF               [12] 2050 	mov	a,r7
      000555 24r08            [12] 2051 	add	a,#_gpcMC22B
      000557 F5 82            [12] 2052 	mov	dpl,a
      000559 EE               [12] 2053 	mov	a,r6
      00055A 34s00            [12] 2054 	addc	a,#(_gpcMC22B >> 8)
      00055C F5 83            [12] 2055 	mov	dph,a
      00055E E0               [24] 2056 	movx	a,@dptr
      00055F FF               [12] 2057 	mov	r7,a
      000560 BF 0F 04         [24] 2058 	cjne	r7,#0x0f,00104$
                                   2059 ;	../lib_master/uart.c:743: return MC_NOT_OK;
      000563 75 82 00         [24] 2060 	mov	dpl,#0x00
      000566 22               [24] 2061 	ret
      000567                       2062 00104$:
                                   2063 ;	../lib_master/uart.c:745: return MC_OK;
      000567 75 82 01         [24] 2064 	mov	dpl,#0x01
                                   2065 ;	../lib_master/uart.c:746: }
      00056A 22               [24] 2066 	ret
                                   2067 ;------------------------------------------------------------
                                   2068 ;Allocation info for local variables in function 'conv_manchester2nibble'
                                   2069 ;------------------------------------------------------------
                                   2070 ;c                         Allocated to registers r7 
                                   2071 ;------------------------------------------------------------
                                   2072 ;	../lib_master/uart.c:748: UINT8 conv_manchester2nibble(UINT8 c)
                                   2073 ;	-----------------------------------------
                                   2074 ;	 function conv_manchester2nibble
                                   2075 ;	-----------------------------------------
      00056B                       2076 _conv_manchester2nibble:
                                   2077 ;	../lib_master/uart.c:762: return (gpcMC22B[c>>4]<<2) | (gpcMC22B[c&0xF]); 
      00056B E5 82            [12] 2078 	mov	a,dpl
      00056D FF               [12] 2079 	mov	r7,a
      00056E C4               [12] 2080 	swap	a
      00056F 54 0F            [12] 2081 	anl	a,#0x0f
      000571 24r08            [12] 2082 	add	a,#_gpcMC22B
      000573 F5 82            [12] 2083 	mov	dpl,a
      000575 E4               [12] 2084 	clr	a
      000576 34s00            [12] 2085 	addc	a,#(_gpcMC22B >> 8)
      000578 F5 83            [12] 2086 	mov	dph,a
      00057A E0               [24] 2087 	movx	a,@dptr
      00057B 25 E0            [12] 2088 	add	a,acc
      00057D 25 E0            [12] 2089 	add	a,acc
      00057F FE               [12] 2090 	mov	r6,a
      000580 53 07 0F         [24] 2091 	anl	ar7,#0x0f
      000583 7D 00            [12] 2092 	mov	r5,#0x00
      000585 EF               [12] 2093 	mov	a,r7
      000586 24r08            [12] 2094 	add	a,#_gpcMC22B
      000588 F5 82            [12] 2095 	mov	dpl,a
      00058A ED               [12] 2096 	mov	a,r5
      00058B 34s00            [12] 2097 	addc	a,#(_gpcMC22B >> 8)
      00058D F5 83            [12] 2098 	mov	dph,a
      00058F E0               [24] 2099 	movx	a,@dptr
      000590 4E               [12] 2100 	orl	a,r6
      000591 F5 82            [12] 2101 	mov	dpl,a
                                   2102 ;	../lib_master/uart.c:763: }
      000593 22               [24] 2103 	ret
                                   2104 	.area CSEG    (CODE)
                                   2105 	.area CONST   (CODE)
                                   2106 	.area CABS    (ABS,CODE)
