                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module uart
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _getstr_uart1_PARM_2
                                     12 	.globl _getstr_uart0_PARM_2
                                     13 	.globl _Uart1Tx_ISR
                                     14 	.globl _Uart0Tx_ISR
                                     15 	.globl _InitialUART1_Timer3
                                     16 	.globl _InitialUART0_Timer1
                                     17 	.globl _MOSI
                                     18 	.globl _P00
                                     19 	.globl _MISO
                                     20 	.globl _P01
                                     21 	.globl _RXD_1
                                     22 	.globl _P02
                                     23 	.globl _P03
                                     24 	.globl _STADC
                                     25 	.globl _P04
                                     26 	.globl _P05
                                     27 	.globl _TXD
                                     28 	.globl _P06
                                     29 	.globl _RXD
                                     30 	.globl _P07
                                     31 	.globl _IT0
                                     32 	.globl _IE0
                                     33 	.globl _IT1
                                     34 	.globl _IE1
                                     35 	.globl _TR0
                                     36 	.globl _TF0
                                     37 	.globl _TR1
                                     38 	.globl _TF1
                                     39 	.globl _P10
                                     40 	.globl _P11
                                     41 	.globl _P12
                                     42 	.globl _SCL
                                     43 	.globl _P13
                                     44 	.globl _SDA
                                     45 	.globl _P14
                                     46 	.globl _P15
                                     47 	.globl _TXD_1
                                     48 	.globl _P16
                                     49 	.globl _P17
                                     50 	.globl _RI
                                     51 	.globl _TI
                                     52 	.globl _RB8
                                     53 	.globl _TB8
                                     54 	.globl _REN
                                     55 	.globl _SM2
                                     56 	.globl _SM1
                                     57 	.globl _FE
                                     58 	.globl _SM0
                                     59 	.globl _P20
                                     60 	.globl _EX0
                                     61 	.globl _ET0
                                     62 	.globl _EX1
                                     63 	.globl _ET1
                                     64 	.globl _ES
                                     65 	.globl _EBOD
                                     66 	.globl _EADC
                                     67 	.globl _EA
                                     68 	.globl _P30
                                     69 	.globl _PX0
                                     70 	.globl _PT0
                                     71 	.globl _PX1
                                     72 	.globl _PT1
                                     73 	.globl _PS
                                     74 	.globl _PBOD
                                     75 	.globl _PADC
                                     76 	.globl _I2CPX
                                     77 	.globl _AA
                                     78 	.globl _SI
                                     79 	.globl _STO
                                     80 	.globl _STA
                                     81 	.globl _I2CEN
                                     82 	.globl _CM_RL2
                                     83 	.globl _TR2
                                     84 	.globl _TF2
                                     85 	.globl _P
                                     86 	.globl _OV
                                     87 	.globl _RS0
                                     88 	.globl _RS1
                                     89 	.globl _F0
                                     90 	.globl _AC
                                     91 	.globl _CY
                                     92 	.globl _CLRPWM
                                     93 	.globl _PWMF
                                     94 	.globl _LOAD
                                     95 	.globl _PWMRUN
                                     96 	.globl _ADCHS0
                                     97 	.globl _ADCHS1
                                     98 	.globl _ADCHS2
                                     99 	.globl _ADCHS3
                                    100 	.globl _ETGSEL0
                                    101 	.globl _ETGSEL1
                                    102 	.globl _ADCS
                                    103 	.globl _ADCF
                                    104 	.globl _RI_1
                                    105 	.globl _TI_1
                                    106 	.globl _RB8_1
                                    107 	.globl _TB8_1
                                    108 	.globl _REN_1
                                    109 	.globl _SM2_1
                                    110 	.globl _SM1_1
                                    111 	.globl _FE_1
                                    112 	.globl _SM0_1
                                    113 	.globl _EIPH1
                                    114 	.globl _EIP1
                                    115 	.globl _PMD
                                    116 	.globl _PMEN
                                    117 	.globl _PDTCNT
                                    118 	.globl _PDTEN
                                    119 	.globl _SCON_1
                                    120 	.globl _EIPH
                                    121 	.globl _AINDIDS
                                    122 	.globl _SPDR
                                    123 	.globl _SPSR
                                    124 	.globl _SPCR2
                                    125 	.globl _SPCR
                                    126 	.globl _CAPCON4
                                    127 	.globl _CAPCON3
                                    128 	.globl _B
                                    129 	.globl _EIP
                                    130 	.globl _C2H
                                    131 	.globl _C2L
                                    132 	.globl _PIF
                                    133 	.globl _PIPEN
                                    134 	.globl _PINEN
                                    135 	.globl _PICON
                                    136 	.globl _ADCCON0
                                    137 	.globl _C1H
                                    138 	.globl _C1L
                                    139 	.globl _C0H
                                    140 	.globl _C0L
                                    141 	.globl _ADCDLY
                                    142 	.globl _ADCCON2
                                    143 	.globl _ADCCON1
                                    144 	.globl _ACC
                                    145 	.globl _PWMCON1
                                    146 	.globl _PIOCON0
                                    147 	.globl _PWM3L
                                    148 	.globl _PWM2L
                                    149 	.globl _PWM1L
                                    150 	.globl _PWM0L
                                    151 	.globl _PWMPL
                                    152 	.globl _PWMCON0
                                    153 	.globl _FBD
                                    154 	.globl _PNP
                                    155 	.globl _PWM3H
                                    156 	.globl _PWM2H
                                    157 	.globl _PWM1H
                                    158 	.globl _PWM0H
                                    159 	.globl _PWMPH
                                    160 	.globl _PSW
                                    161 	.globl _ADCMPH
                                    162 	.globl _ADCMPL
                                    163 	.globl _PWM5L
                                    164 	.globl _TH2
                                    165 	.globl _PWM4L
                                    166 	.globl _TL2
                                    167 	.globl _RCMP2H
                                    168 	.globl _RCMP2L
                                    169 	.globl _T2MOD
                                    170 	.globl _T2CON
                                    171 	.globl _TA
                                    172 	.globl _PIOCON1
                                    173 	.globl _RH3
                                    174 	.globl _PWM5H
                                    175 	.globl _RL3
                                    176 	.globl _PWM4H
                                    177 	.globl _T3CON
                                    178 	.globl _ADCRH
                                    179 	.globl _ADCRL
                                    180 	.globl _I2ADDR
                                    181 	.globl _I2CON
                                    182 	.globl _I2TOC
                                    183 	.globl _I2CLK
                                    184 	.globl _I2STAT
                                    185 	.globl _I2DAT
                                    186 	.globl _SADDR_1
                                    187 	.globl _SADEN_1
                                    188 	.globl _SADEN
                                    189 	.globl _IP
                                    190 	.globl _PWMINTC
                                    191 	.globl _IPH
                                    192 	.globl _P2S
                                    193 	.globl _P1SR
                                    194 	.globl _P1M2
                                    195 	.globl _P1S
                                    196 	.globl _P1M1
                                    197 	.globl _P0SR
                                    198 	.globl _P0M2
                                    199 	.globl _P0S
                                    200 	.globl _P0M1
                                    201 	.globl _P3
                                    202 	.globl _IAPCN
                                    203 	.globl _IAPFD
                                    204 	.globl _P3SR
                                    205 	.globl _P3M2
                                    206 	.globl _P3S
                                    207 	.globl _P3M1
                                    208 	.globl _BODCON1
                                    209 	.globl _WDCON
                                    210 	.globl _SADDR
                                    211 	.globl _IE
                                    212 	.globl _IAPAH
                                    213 	.globl _IAPAL
                                    214 	.globl _IAPUEN
                                    215 	.globl _IAPTRG
                                    216 	.globl _BODCON0
                                    217 	.globl _AUXR1
                                    218 	.globl _P2
                                    219 	.globl _CHPCON
                                    220 	.globl _EIE1
                                    221 	.globl _EIE
                                    222 	.globl _SBUF_1
                                    223 	.globl _SBUF
                                    224 	.globl _SCON
                                    225 	.globl _CKEN
                                    226 	.globl _CKSWT
                                    227 	.globl _CKDIV
                                    228 	.globl _CAPCON2
                                    229 	.globl _CAPCON1
                                    230 	.globl _CAPCON0
                                    231 	.globl _SFRS
                                    232 	.globl _P1
                                    233 	.globl _WKCON
                                    234 	.globl _CKCON
                                    235 	.globl _TH1
                                    236 	.globl _TH0
                                    237 	.globl _TL1
                                    238 	.globl _TL0
                                    239 	.globl _TMOD
                                    240 	.globl _TCON
                                    241 	.globl _PCON
                                    242 	.globl _RWK
                                    243 	.globl _RCTRIM1
                                    244 	.globl _RCTRIM0
                                    245 	.globl _DPH
                                    246 	.globl _DPL
                                    247 	.globl _SP
                                    248 	.globl _P0
                                    249 	.globl _gu8Uart1TCnt
                                    250 	.globl _gu8Uart1RCnt
                                    251 	.globl _gu8Uart0TCnt
                                    252 	.globl _gu8Uart0RCnt
                                    253 	.globl _gu8Tx1WIdx
                                    254 	.globl _gu8Tx1RIdx
                                    255 	.globl _gu8Tx1Size
                                    256 	.globl _gu8Rx1WIdx
                                    257 	.globl _gu8Rx1RIdx
                                    258 	.globl _gu8Rx1Size
                                    259 	.globl _gu8Tx0WIdx
                                    260 	.globl _gu8Tx0RIdx
                                    261 	.globl _gu8Tx0Size
                                    262 	.globl _gu8Rx0WIdx
                                    263 	.globl _gu8Rx0RIdx
                                    264 	.globl _gu8Rx0Size
                                    265 	.globl _pu8UartTx1Buf
                                    266 	.globl _pu8UartRx1Buf
                                    267 	.globl _pu8UartTx0Buf
                                    268 	.globl _pu8UartRx0Buf
                                    269 	.globl _gpcMC22B
                                    270 	.globl _gpc2B2MC
                                    271 	.globl _gu8BECnt
                                    272 	.globl _gu8BNECnt
                                    273 	.globl _gu8BFCnt
                                    274 	.globl _gu8BNFCnt
                                    275 	.globl _gu8UART
                                    276 	.globl _InitialUART0_Timer1
                                    277 	.globl _InitialUART0_Timer3
                                    278 	.globl _InitialUART1_Timer3
                                    279 	.globl _set_linefi_uplink_speed
                                    280 	.globl _putchar
                                    281 	.globl _uart_setup
                                    282 	.globl _SerialPort0_ISR
                                    283 	.globl _chkchar_uart0
                                    284 	.globl _getchar_uart0
                                    285 	.globl _getstr_uart0
                                    286 	.globl _SerialPort1_ISR
                                    287 	.globl _chkchar_uart1
                                    288 	.globl _getchar_uart1
                                    289 	.globl _getstr_uart1
                                    290 	.globl _putchar_uart0
                                    291 	.globl _putchar_uart1
                                    292 	.globl _preamble
                                    293 	.globl _putchar_manchester
                                    294 	.globl _chk_manchester
                                    295 	.globl _conv_manchester2nibble
                                    296 ;--------------------------------------------------------
                                    297 ; special function registers
                                    298 ;--------------------------------------------------------
                                    299 	.area RSEG    (ABS,DATA)
      000000                        300 	.org 0x0000
                           000080   301 _P0	=	0x0080
                           000081   302 _SP	=	0x0081
                           000082   303 _DPL	=	0x0082
                           000083   304 _DPH	=	0x0083
                           000084   305 _RCTRIM0	=	0x0084
                           000085   306 _RCTRIM1	=	0x0085
                           000086   307 _RWK	=	0x0086
                           000087   308 _PCON	=	0x0087
                           000088   309 _TCON	=	0x0088
                           000089   310 _TMOD	=	0x0089
                           00008A   311 _TL0	=	0x008a
                           00008B   312 _TL1	=	0x008b
                           00008C   313 _TH0	=	0x008c
                           00008D   314 _TH1	=	0x008d
                           00008E   315 _CKCON	=	0x008e
                           00008F   316 _WKCON	=	0x008f
                           000090   317 _P1	=	0x0090
                           000091   318 _SFRS	=	0x0091
                           000092   319 _CAPCON0	=	0x0092
                           000093   320 _CAPCON1	=	0x0093
                           000094   321 _CAPCON2	=	0x0094
                           000095   322 _CKDIV	=	0x0095
                           000096   323 _CKSWT	=	0x0096
                           000097   324 _CKEN	=	0x0097
                           000098   325 _SCON	=	0x0098
                           000099   326 _SBUF	=	0x0099
                           00009A   327 _SBUF_1	=	0x009a
                           00009B   328 _EIE	=	0x009b
                           00009C   329 _EIE1	=	0x009c
                           00009F   330 _CHPCON	=	0x009f
                           0000A0   331 _P2	=	0x00a0
                           0000A2   332 _AUXR1	=	0x00a2
                           0000A3   333 _BODCON0	=	0x00a3
                           0000A4   334 _IAPTRG	=	0x00a4
                           0000A5   335 _IAPUEN	=	0x00a5
                           0000A6   336 _IAPAL	=	0x00a6
                           0000A7   337 _IAPAH	=	0x00a7
                           0000A8   338 _IE	=	0x00a8
                           0000A9   339 _SADDR	=	0x00a9
                           0000AA   340 _WDCON	=	0x00aa
                           0000AB   341 _BODCON1	=	0x00ab
                           0000AC   342 _P3M1	=	0x00ac
                           0000AC   343 _P3S	=	0x00ac
                           0000AD   344 _P3M2	=	0x00ad
                           0000AD   345 _P3SR	=	0x00ad
                           0000AE   346 _IAPFD	=	0x00ae
                           0000AF   347 _IAPCN	=	0x00af
                           0000B0   348 _P3	=	0x00b0
                           0000B1   349 _P0M1	=	0x00b1
                           0000B1   350 _P0S	=	0x00b1
                           0000B2   351 _P0M2	=	0x00b2
                           0000B2   352 _P0SR	=	0x00b2
                           0000B3   353 _P1M1	=	0x00b3
                           0000B3   354 _P1S	=	0x00b3
                           0000B4   355 _P1M2	=	0x00b4
                           0000B4   356 _P1SR	=	0x00b4
                           0000B5   357 _P2S	=	0x00b5
                           0000B7   358 _IPH	=	0x00b7
                           0000B7   359 _PWMINTC	=	0x00b7
                           0000B8   360 _IP	=	0x00b8
                           0000B9   361 _SADEN	=	0x00b9
                           0000BA   362 _SADEN_1	=	0x00ba
                           0000BB   363 _SADDR_1	=	0x00bb
                           0000BC   364 _I2DAT	=	0x00bc
                           0000BD   365 _I2STAT	=	0x00bd
                           0000BE   366 _I2CLK	=	0x00be
                           0000BF   367 _I2TOC	=	0x00bf
                           0000C0   368 _I2CON	=	0x00c0
                           0000C1   369 _I2ADDR	=	0x00c1
                           0000C2   370 _ADCRL	=	0x00c2
                           0000C3   371 _ADCRH	=	0x00c3
                           0000C4   372 _T3CON	=	0x00c4
                           0000C4   373 _PWM4H	=	0x00c4
                           0000C5   374 _RL3	=	0x00c5
                           0000C5   375 _PWM5H	=	0x00c5
                           0000C6   376 _RH3	=	0x00c6
                           0000C6   377 _PIOCON1	=	0x00c6
                           0000C7   378 _TA	=	0x00c7
                           0000C8   379 _T2CON	=	0x00c8
                           0000C9   380 _T2MOD	=	0x00c9
                           0000CA   381 _RCMP2L	=	0x00ca
                           0000CB   382 _RCMP2H	=	0x00cb
                           0000CC   383 _TL2	=	0x00cc
                           0000CC   384 _PWM4L	=	0x00cc
                           0000CD   385 _TH2	=	0x00cd
                           0000CD   386 _PWM5L	=	0x00cd
                           0000CE   387 _ADCMPL	=	0x00ce
                           0000CF   388 _ADCMPH	=	0x00cf
                           0000D0   389 _PSW	=	0x00d0
                           0000D1   390 _PWMPH	=	0x00d1
                           0000D2   391 _PWM0H	=	0x00d2
                           0000D3   392 _PWM1H	=	0x00d3
                           0000D4   393 _PWM2H	=	0x00d4
                           0000D5   394 _PWM3H	=	0x00d5
                           0000D6   395 _PNP	=	0x00d6
                           0000D7   396 _FBD	=	0x00d7
                           0000D8   397 _PWMCON0	=	0x00d8
                           0000D9   398 _PWMPL	=	0x00d9
                           0000DA   399 _PWM0L	=	0x00da
                           0000DB   400 _PWM1L	=	0x00db
                           0000DC   401 _PWM2L	=	0x00dc
                           0000DD   402 _PWM3L	=	0x00dd
                           0000DE   403 _PIOCON0	=	0x00de
                           0000DF   404 _PWMCON1	=	0x00df
                           0000E0   405 _ACC	=	0x00e0
                           0000E1   406 _ADCCON1	=	0x00e1
                           0000E2   407 _ADCCON2	=	0x00e2
                           0000E3   408 _ADCDLY	=	0x00e3
                           0000E4   409 _C0L	=	0x00e4
                           0000E5   410 _C0H	=	0x00e5
                           0000E6   411 _C1L	=	0x00e6
                           0000E7   412 _C1H	=	0x00e7
                           0000E8   413 _ADCCON0	=	0x00e8
                           0000E9   414 _PICON	=	0x00e9
                           0000EA   415 _PINEN	=	0x00ea
                           0000EB   416 _PIPEN	=	0x00eb
                           0000EC   417 _PIF	=	0x00ec
                           0000ED   418 _C2L	=	0x00ed
                           0000EE   419 _C2H	=	0x00ee
                           0000EF   420 _EIP	=	0x00ef
                           0000F0   421 _B	=	0x00f0
                           0000F1   422 _CAPCON3	=	0x00f1
                           0000F2   423 _CAPCON4	=	0x00f2
                           0000F3   424 _SPCR	=	0x00f3
                           0000F3   425 _SPCR2	=	0x00f3
                           0000F4   426 _SPSR	=	0x00f4
                           0000F5   427 _SPDR	=	0x00f5
                           0000F6   428 _AINDIDS	=	0x00f6
                           0000F7   429 _EIPH	=	0x00f7
                           0000F8   430 _SCON_1	=	0x00f8
                           0000F9   431 _PDTEN	=	0x00f9
                           0000FA   432 _PDTCNT	=	0x00fa
                           0000FB   433 _PMEN	=	0x00fb
                           0000FC   434 _PMD	=	0x00fc
                           0000FE   435 _EIP1	=	0x00fe
                           0000FF   436 _EIPH1	=	0x00ff
                                    437 ;--------------------------------------------------------
                                    438 ; special function bits
                                    439 ;--------------------------------------------------------
                                    440 	.area RSEG    (ABS,DATA)
      000000                        441 	.org 0x0000
                           0000FF   442 _SM0_1	=	0x00ff
                           0000FF   443 _FE_1	=	0x00ff
                           0000FE   444 _SM1_1	=	0x00fe
                           0000FD   445 _SM2_1	=	0x00fd
                           0000FC   446 _REN_1	=	0x00fc
                           0000FB   447 _TB8_1	=	0x00fb
                           0000FA   448 _RB8_1	=	0x00fa
                           0000F9   449 _TI_1	=	0x00f9
                           0000F8   450 _RI_1	=	0x00f8
                           0000EF   451 _ADCF	=	0x00ef
                           0000EE   452 _ADCS	=	0x00ee
                           0000ED   453 _ETGSEL1	=	0x00ed
                           0000EC   454 _ETGSEL0	=	0x00ec
                           0000EB   455 _ADCHS3	=	0x00eb
                           0000EA   456 _ADCHS2	=	0x00ea
                           0000E9   457 _ADCHS1	=	0x00e9
                           0000E8   458 _ADCHS0	=	0x00e8
                           0000DF   459 _PWMRUN	=	0x00df
                           0000DE   460 _LOAD	=	0x00de
                           0000DD   461 _PWMF	=	0x00dd
                           0000DC   462 _CLRPWM	=	0x00dc
                           0000D7   463 _CY	=	0x00d7
                           0000D6   464 _AC	=	0x00d6
                           0000D5   465 _F0	=	0x00d5
                           0000D4   466 _RS1	=	0x00d4
                           0000D3   467 _RS0	=	0x00d3
                           0000D2   468 _OV	=	0x00d2
                           0000D0   469 _P	=	0x00d0
                           0000CF   470 _TF2	=	0x00cf
                           0000CA   471 _TR2	=	0x00ca
                           0000C8   472 _CM_RL2	=	0x00c8
                           0000C6   473 _I2CEN	=	0x00c6
                           0000C5   474 _STA	=	0x00c5
                           0000C4   475 _STO	=	0x00c4
                           0000C3   476 _SI	=	0x00c3
                           0000C2   477 _AA	=	0x00c2
                           0000C0   478 _I2CPX	=	0x00c0
                           0000BE   479 _PADC	=	0x00be
                           0000BD   480 _PBOD	=	0x00bd
                           0000BC   481 _PS	=	0x00bc
                           0000BB   482 _PT1	=	0x00bb
                           0000BA   483 _PX1	=	0x00ba
                           0000B9   484 _PT0	=	0x00b9
                           0000B8   485 _PX0	=	0x00b8
                           0000B0   486 _P30	=	0x00b0
                           0000AF   487 _EA	=	0x00af
                           0000AE   488 _EADC	=	0x00ae
                           0000AD   489 _EBOD	=	0x00ad
                           0000AC   490 _ES	=	0x00ac
                           0000AB   491 _ET1	=	0x00ab
                           0000AA   492 _EX1	=	0x00aa
                           0000A9   493 _ET0	=	0x00a9
                           0000A8   494 _EX0	=	0x00a8
                           0000A0   495 _P20	=	0x00a0
                           00009F   496 _SM0	=	0x009f
                           00009F   497 _FE	=	0x009f
                           00009E   498 _SM1	=	0x009e
                           00009D   499 _SM2	=	0x009d
                           00009C   500 _REN	=	0x009c
                           00009B   501 _TB8	=	0x009b
                           00009A   502 _RB8	=	0x009a
                           000099   503 _TI	=	0x0099
                           000098   504 _RI	=	0x0098
                           000097   505 _P17	=	0x0097
                           000096   506 _P16	=	0x0096
                           000096   507 _TXD_1	=	0x0096
                           000095   508 _P15	=	0x0095
                           000094   509 _P14	=	0x0094
                           000094   510 _SDA	=	0x0094
                           000093   511 _P13	=	0x0093
                           000093   512 _SCL	=	0x0093
                           000092   513 _P12	=	0x0092
                           000091   514 _P11	=	0x0091
                           000090   515 _P10	=	0x0090
                           00008F   516 _TF1	=	0x008f
                           00008E   517 _TR1	=	0x008e
                           00008D   518 _TF0	=	0x008d
                           00008C   519 _TR0	=	0x008c
                           00008B   520 _IE1	=	0x008b
                           00008A   521 _IT1	=	0x008a
                           000089   522 _IE0	=	0x0089
                           000088   523 _IT0	=	0x0088
                           000087   524 _P07	=	0x0087
                           000087   525 _RXD	=	0x0087
                           000086   526 _P06	=	0x0086
                           000086   527 _TXD	=	0x0086
                           000085   528 _P05	=	0x0085
                           000084   529 _P04	=	0x0084
                           000084   530 _STADC	=	0x0084
                           000083   531 _P03	=	0x0083
                           000082   532 _P02	=	0x0082
                           000082   533 _RXD_1	=	0x0082
                           000081   534 _P01	=	0x0081
                           000081   535 _MISO	=	0x0081
                           000080   536 _P00	=	0x0080
                           000080   537 _MOSI	=	0x0080
                                    538 ;--------------------------------------------------------
                                    539 ; overlayable register banks
                                    540 ;--------------------------------------------------------
                                    541 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        542 	.ds 8
                                    543 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        544 	.ds 8
                                    545 ;--------------------------------------------------------
                                    546 ; overlayable bit register bank
                                    547 ;--------------------------------------------------------
                                    548 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        549 bits:
      000000                        550 	.ds 1
                           008000   551 	b0 = bits[0]
                           008100   552 	b1 = bits[1]
                           008200   553 	b2 = bits[2]
                           008300   554 	b3 = bits[3]
                           008400   555 	b4 = bits[4]
                           008500   556 	b5 = bits[5]
                           008600   557 	b6 = bits[6]
                           008700   558 	b7 = bits[7]
                                    559 ;--------------------------------------------------------
                                    560 ; internal ram data
                                    561 ;--------------------------------------------------------
                                    562 	.area DSEG    (DATA)
      000000                        563 _gu8UART::
      000000                        564 	.ds 1
                                    565 ;--------------------------------------------------------
                                    566 ; overlayable items in internal ram 
                                    567 ;--------------------------------------------------------
                                    568 	.area	OSEG    (OVR,DATA)
                                    569 	.area	OSEG    (OVR,DATA)
                                    570 	.area	OSEG    (OVR,DATA)
      000000                        571 _getstr_uart0_PARM_2:
      000000                        572 	.ds 3
                                    573 	.area	OSEG    (OVR,DATA)
                                    574 	.area	OSEG    (OVR,DATA)
      000000                        575 _getstr_uart1_PARM_2:
      000000                        576 	.ds 3
                                    577 	.area	OSEG    (OVR,DATA)
                                    578 	.area	OSEG    (OVR,DATA)
                                    579 	.area	OSEG    (OVR,DATA)
                                    580 	.area	OSEG    (OVR,DATA)
                                    581 ;--------------------------------------------------------
                                    582 ; indirectly addressable internal ram data
                                    583 ;--------------------------------------------------------
                                    584 	.area ISEG    (DATA)
                                    585 ;--------------------------------------------------------
                                    586 ; absolute internal ram data
                                    587 ;--------------------------------------------------------
                                    588 	.area IABS    (ABS,DATA)
                                    589 	.area IABS    (ABS,DATA)
                                    590 ;--------------------------------------------------------
                                    591 ; bit data
                                    592 ;--------------------------------------------------------
                                    593 	.area BSEG    (BIT)
                                    594 ;--------------------------------------------------------
                                    595 ; paged external ram data
                                    596 ;--------------------------------------------------------
                                    597 	.area PSEG    (PAG,XDATA)
                                    598 ;--------------------------------------------------------
                                    599 ; external ram data
                                    600 ;--------------------------------------------------------
                                    601 	.area XSEG    (XDATA)
      000000                        602 _gu8BNFCnt::
      000000                        603 	.ds 1
      000001                        604 _gu8BFCnt::
      000001                        605 	.ds 1
      000002                        606 _gu8BNECnt::
      000002                        607 	.ds 1
      000003                        608 _gu8BECnt::
      000003                        609 	.ds 1
      000004                        610 _gpc2B2MC::
      000004                        611 	.ds 4
      000008                        612 _gpcMC22B::
      000008                        613 	.ds 16
      000018                        614 _pu8UartRx0Buf::
      000018                        615 	.ds 16
      000028                        616 _pu8UartTx0Buf::
      000028                        617 	.ds 16
      000038                        618 _pu8UartRx1Buf::
      000038                        619 	.ds 16
      000048                        620 _pu8UartTx1Buf::
      000048                        621 	.ds 16
      000058                        622 _gu8Rx0Size::
      000058                        623 	.ds 1
      000059                        624 _gu8Rx0RIdx::
      000059                        625 	.ds 1
      00005A                        626 _gu8Rx0WIdx::
      00005A                        627 	.ds 1
      00005B                        628 _gu8Tx0Size::
      00005B                        629 	.ds 1
      00005C                        630 _gu8Tx0RIdx::
      00005C                        631 	.ds 1
      00005D                        632 _gu8Tx0WIdx::
      00005D                        633 	.ds 1
      00005E                        634 _gu8Rx1Size::
      00005E                        635 	.ds 1
      00005F                        636 _gu8Rx1RIdx::
      00005F                        637 	.ds 1
      000060                        638 _gu8Rx1WIdx::
      000060                        639 	.ds 1
      000061                        640 _gu8Tx1Size::
      000061                        641 	.ds 1
      000062                        642 _gu8Tx1RIdx::
      000062                        643 	.ds 1
      000063                        644 _gu8Tx1WIdx::
      000063                        645 	.ds 1
      000064                        646 _gu8Uart0RCnt::
      000064                        647 	.ds 1
      000065                        648 _gu8Uart0TCnt::
      000065                        649 	.ds 1
      000066                        650 _gu8Uart1RCnt::
      000066                        651 	.ds 1
      000067                        652 _gu8Uart1TCnt::
      000067                        653 	.ds 1
                                    654 ;--------------------------------------------------------
                                    655 ; absolute external ram data
                                    656 ;--------------------------------------------------------
                                    657 	.area XABS    (ABS,XDATA)
                                    658 ;--------------------------------------------------------
                                    659 ; external initialized ram data
                                    660 ;--------------------------------------------------------
                                    661 	.area HOME    (CODE)
                                    662 	.area GSINIT0 (CODE)
                                    663 	.area GSINIT1 (CODE)
                                    664 	.area GSINIT2 (CODE)
                                    665 	.area GSINIT3 (CODE)
                                    666 	.area GSINIT4 (CODE)
                                    667 	.area GSINIT5 (CODE)
                                    668 	.area GSINIT  (CODE)
                                    669 	.area GSFINAL (CODE)
                                    670 	.area CSEG    (CODE)
                                    671 ;--------------------------------------------------------
                                    672 ; global & static initialisations
                                    673 ;--------------------------------------------------------
                                    674 	.area HOME    (CODE)
                                    675 	.area GSINIT  (CODE)
                                    676 	.area GSFINAL (CODE)
                                    677 	.area GSINIT  (CODE)
                                    678 ;	../lib/uart.c:12: UINT8 __xdata gu8BNFCnt = 0;
      000000 90r00r00         [24]  679 	mov	dptr,#_gu8BNFCnt
      000003 E4               [12]  680 	clr	a
      000004 F0               [24]  681 	movx	@dptr,a
                                    682 ;	../lib/uart.c:13: UINT8 __xdata gu8BFCnt = 0;
      000005 90r00r01         [24]  683 	mov	dptr,#_gu8BFCnt
      000008 F0               [24]  684 	movx	@dptr,a
                                    685 ;	../lib/uart.c:14: UINT8 __xdata gu8BNECnt = 0;
      000009 90r00r02         [24]  686 	mov	dptr,#_gu8BNECnt
      00000C F0               [24]  687 	movx	@dptr,a
                                    688 ;	../lib/uart.c:15: UINT8 __xdata gu8BECnt = 0;
      00000D 90r00r03         [24]  689 	mov	dptr,#_gu8BECnt
      000010 F0               [24]  690 	movx	@dptr,a
                                    691 ;	../lib/uart.c:17: const char __xdata  gpc2B2MC[] = {// 2Bits to Manchester Code
      000011 90r00r04         [24]  692 	mov	dptr,#_gpc2B2MC
      000014 74 0A            [12]  693 	mov	a,#0x0a
      000016 F0               [24]  694 	movx	@dptr,a
      000017 90r00r05         [24]  695 	mov	dptr,#(_gpc2B2MC + 0x0001)
      00001A 14               [12]  696 	dec	a
      00001B F0               [24]  697 	movx	@dptr,a
      00001C 90r00r06         [24]  698 	mov	dptr,#(_gpc2B2MC + 0x0002)
      00001F 74 06            [12]  699 	mov	a,#0x06
      000021 F0               [24]  700 	movx	@dptr,a
      000022 90r00r07         [24]  701 	mov	dptr,#(_gpc2B2MC + 0x0003)
      000025 14               [12]  702 	dec	a
      000026 F0               [24]  703 	movx	@dptr,a
                                    704 ;	../lib/uart.c:24: const char __xdata  gpcMC22B[16] = {// manchester code to 2Bits
      000027 90r00r08         [24]  705 	mov	dptr,#_gpcMC22B
      00002A 74 0F            [12]  706 	mov	a,#0x0f
      00002C F0               [24]  707 	movx	@dptr,a
      00002D 90r00r09         [24]  708 	mov	dptr,#(_gpcMC22B + 0x0001)
      000030 F0               [24]  709 	movx	@dptr,a
      000031 90r00r0A         [24]  710 	mov	dptr,#(_gpcMC22B + 0x0002)
      000034 F0               [24]  711 	movx	@dptr,a
      000035 90r00r0B         [24]  712 	mov	dptr,#(_gpcMC22B + 0x0003)
      000038 F0               [24]  713 	movx	@dptr,a
      000039 90r00r0C         [24]  714 	mov	dptr,#(_gpcMC22B + 0x0004)
      00003C F0               [24]  715 	movx	@dptr,a
      00003D 90r00r0D         [24]  716 	mov	dptr,#(_gpcMC22B + 0x0005)
      000040 74 03            [12]  717 	mov	a,#0x03
      000042 F0               [24]  718 	movx	@dptr,a
      000043 90r00r0E         [24]  719 	mov	dptr,#(_gpcMC22B + 0x0006)
      000046 14               [12]  720 	dec	a
      000047 F0               [24]  721 	movx	@dptr,a
      000048 90r00r0F         [24]  722 	mov	dptr,#(_gpcMC22B + 0x0007)
      00004B 74 0F            [12]  723 	mov	a,#0x0f
      00004D F0               [24]  724 	movx	@dptr,a
      00004E 90r00r10         [24]  725 	mov	dptr,#(_gpcMC22B + 0x0008)
      000051 F0               [24]  726 	movx	@dptr,a
      000052 90r00r11         [24]  727 	mov	dptr,#(_gpcMC22B + 0x0009)
      000055 74 01            [12]  728 	mov	a,#0x01
      000057 F0               [24]  729 	movx	@dptr,a
      000058 90r00r12         [24]  730 	mov	dptr,#(_gpcMC22B + 0x000a)
      00005B E4               [12]  731 	clr	a
      00005C F0               [24]  732 	movx	@dptr,a
      00005D 90r00r13         [24]  733 	mov	dptr,#(_gpcMC22B + 0x000b)
      000060 74 0F            [12]  734 	mov	a,#0x0f
      000062 F0               [24]  735 	movx	@dptr,a
      000063 90r00r14         [24]  736 	mov	dptr,#(_gpcMC22B + 0x000c)
      000066 F0               [24]  737 	movx	@dptr,a
      000067 90r00r15         [24]  738 	mov	dptr,#(_gpcMC22B + 0x000d)
      00006A F0               [24]  739 	movx	@dptr,a
      00006B 90r00r16         [24]  740 	mov	dptr,#(_gpcMC22B + 0x000e)
      00006E F0               [24]  741 	movx	@dptr,a
      00006F 90r00r17         [24]  742 	mov	dptr,#(_gpcMC22B + 0x000f)
      000072 F0               [24]  743 	movx	@dptr,a
                                    744 ;	../lib/uart.c:363: uint8_t __xdata pu8UartRx0Buf[UART0_RX_BUFF_SIZE] = {0};
      000073 90r00r18         [24]  745 	mov	dptr,#_pu8UartRx0Buf
      000076 E4               [12]  746 	clr	a
      000077 F0               [24]  747 	movx	@dptr,a
                                    748 ;	../lib/uart.c:364: uint8_t __xdata pu8UartTx0Buf[UART0_TX_BUFF_SIZE] = {0};
      000078 90r00r28         [24]  749 	mov	dptr,#_pu8UartTx0Buf
      00007B F0               [24]  750 	movx	@dptr,a
                                    751 ;	../lib/uart.c:365: uint8_t __xdata pu8UartRx1Buf[UART1_RX_BUFF_SIZE] = {0};
      00007C 90r00r38         [24]  752 	mov	dptr,#_pu8UartRx1Buf
      00007F F0               [24]  753 	movx	@dptr,a
                                    754 ;	../lib/uart.c:367: uint8_t __xdata pu8UartTx1Buf[UART1_TX_BUFF_SIZE] = {0};//  10마이크로초보다 큰 듯.. --> 비슷함..ㅠㅠ
      000080 90r00r48         [24]  755 	mov	dptr,#_pu8UartTx1Buf
      000083 F0               [24]  756 	movx	@dptr,a
                                    757 ;	../lib/uart.c:369: uint8_t __xdata gu8Rx0Size = 0;  // Rx0버퍼에 쌓여있는, 받은 데이타 크기
      000084 90r00r58         [24]  758 	mov	dptr,#_gu8Rx0Size
      000087 F0               [24]  759 	movx	@dptr,a
                                    760 ;	../lib/uart.c:370: uint8_t __xdata gu8Rx0RIdx = 0; // Rx0버퍼에서 읽기 인덱스, 이부문부터 쌓여진 데이타를 읽어서 처리
      000088 90r00r59         [24]  761 	mov	dptr,#_gu8Rx0RIdx
      00008B F0               [24]  762 	movx	@dptr,a
                                    763 ;	../lib/uart.c:371: uint8_t __xdata gu8Rx0WIdx = 0; // Rx0버퍼에서 쓰기 인덱스, SBUF로 수신된 데이타를 이부문에 써서 쌓아둠
      00008C 90r00r5A         [24]  764 	mov	dptr,#_gu8Rx0WIdx
      00008F F0               [24]  765 	movx	@dptr,a
                                    766 ;	../lib/uart.c:373: uint8_t __xdata gu8Tx0Size = 0;  // Tx0버퍼에 쌓여있는, 보낼 데이타 크기
      000090 90r00r5B         [24]  767 	mov	dptr,#_gu8Tx0Size
      000093 F0               [24]  768 	movx	@dptr,a
                                    769 ;	../lib/uart.c:374: uint8_t __xdata gu8Tx0RIdx = 0; // Tx0버퍼에서 읽기 인덱스, 이부문을 읽어서 SBUF에서 써서 보내기
      000094 90r00r5C         [24]  770 	mov	dptr,#_gu8Tx0RIdx
      000097 F0               [24]  771 	movx	@dptr,a
                                    772 ;	../lib/uart.c:375: uint8_t __xdata gu8Tx0WIdx = 0; // Tx0버퍼에서 쓰기 인덱스, 이부문에 써서 인터럽트 함수에서 알아서 보내도록..
      000098 90r00r5D         [24]  773 	mov	dptr,#_gu8Tx0WIdx
      00009B F0               [24]  774 	movx	@dptr,a
                                    775 ;	../lib/uart.c:377: uint8_t __xdata gu8Rx1Size = 0;  // Rx1버퍼에 쌓여있는, 받은 데이타 크기
      00009C 90r00r5E         [24]  776 	mov	dptr,#_gu8Rx1Size
      00009F F0               [24]  777 	movx	@dptr,a
                                    778 ;	../lib/uart.c:378: uint8_t __xdata gu8Rx1RIdx = 0; // Rx1버퍼에서 읽기 인덱스, 이부문부터 쌓여진 데이타를 읽어서 처리
      0000A0 90r00r5F         [24]  779 	mov	dptr,#_gu8Rx1RIdx
      0000A3 F0               [24]  780 	movx	@dptr,a
                                    781 ;	../lib/uart.c:379: uint8_t __xdata gu8Rx1WIdx = 0; // Rx1버퍼에서 쓰기 인덱스, SBUF로 수신된 데이타를 이부문에 써서 쌓아둠
      0000A4 90r00r60         [24]  782 	mov	dptr,#_gu8Rx1WIdx
      0000A7 F0               [24]  783 	movx	@dptr,a
                                    784 ;	../lib/uart.c:381: uint8_t __xdata gu8Tx1Size = 0; // Tx1버퍼에 쌓여있는, 보낼 데이타 크기
      0000A8 90r00r61         [24]  785 	mov	dptr,#_gu8Tx1Size
      0000AB F0               [24]  786 	movx	@dptr,a
                                    787 ;	../lib/uart.c:382: uint8_t __xdata gu8Tx1RIdx = 0;
      0000AC 90r00r62         [24]  788 	mov	dptr,#_gu8Tx1RIdx
      0000AF F0               [24]  789 	movx	@dptr,a
                                    790 ;	../lib/uart.c:383: uint8_t __xdata gu8Tx1WIdx = 0;
      0000B0 90r00r63         [24]  791 	mov	dptr,#_gu8Tx1WIdx
      0000B3 F0               [24]  792 	movx	@dptr,a
                                    793 ;	../lib/uart.c:388: uint8_t __xdata gu8Uart0RCnt = 0;
      0000B4 90r00r64         [24]  794 	mov	dptr,#_gu8Uart0RCnt
      0000B7 F0               [24]  795 	movx	@dptr,a
                                    796 ;	../lib/uart.c:389: uint8_t __xdata gu8Uart0TCnt = 0;
      0000B8 90r00r65         [24]  797 	mov	dptr,#_gu8Uart0TCnt
      0000BB F0               [24]  798 	movx	@dptr,a
                                    799 ;	../lib/uart.c:390: uint8_t __xdata gu8Uart1RCnt = 0;
      0000BC 90r00r66         [24]  800 	mov	dptr,#_gu8Uart1RCnt
      0000BF F0               [24]  801 	movx	@dptr,a
                                    802 ;	../lib/uart.c:391: uint8_t __xdata gu8Uart1TCnt = 0;
      0000C0 90r00r67         [24]  803 	mov	dptr,#_gu8Uart1TCnt
      0000C3 F0               [24]  804 	movx	@dptr,a
                                    805 ;--------------------------------------------------------
                                    806 ; Home
                                    807 ;--------------------------------------------------------
                                    808 	.area HOME    (CODE)
                                    809 	.area HOME    (CODE)
                                    810 ;--------------------------------------------------------
                                    811 ; code
                                    812 ;--------------------------------------------------------
                                    813 	.area CSEG    (CODE)
                                    814 ;------------------------------------------------------------
                                    815 ;Allocation info for local variables in function 'InitialUART0_Timer1'
                                    816 ;------------------------------------------------------------
                                    817 ;u32Baudrate               Allocated to registers r4 r5 r6 r7 
                                    818 ;------------------------------------------------------------
                                    819 ;	../lib/uart.c:46: void InitialUART0_Timer1(UINT32 u32Baudrate)    //T1M = 1, SMOD = 1
                                    820 ;	-----------------------------------------
                                    821 ;	 function InitialUART0_Timer1
                                    822 ;	-----------------------------------------
      000000                        823 _InitialUART0_Timer1:
                           000007   824 	ar7 = 0x07
                           000006   825 	ar6 = 0x06
                           000005   826 	ar5 = 0x05
                           000004   827 	ar4 = 0x04
                           000003   828 	ar3 = 0x03
                           000002   829 	ar2 = 0x02
                           000001   830 	ar1 = 0x01
                           000000   831 	ar0 = 0x00
      000000 AC 82            [24]  832 	mov	r4,dpl
      000002 AD 83            [24]  833 	mov	r5,dph
      000004 AE F0            [24]  834 	mov	r6,b
      000006 FF               [12]  835 	mov	r7,a
                                    836 ;	../lib/uart.c:48: P06_Quasi_Mode;		//Setting UART pin as Quasi mode for transmit
      000007 53 B1 BF         [24]  837 	anl	_P0M1,#0xbf
      00000A 53 B2 BF         [24]  838 	anl	_P0M2,#0xbf
                                    839 ;	../lib/uart.c:49: P07_Quasi_Mode;		//Setting UART pin as Quasi mode for transmit
      00000D 53 B1 7F         [24]  840 	anl	_P0M1,#0x7f
      000010 53 B2 7F         [24]  841 	anl	_P0M2,#0x7f
                                    842 ;	../lib/uart.c:51: SCON = 0x50;     	//UART0 Mode1,REN=1,TI=1
      000013 75 98 50         [24]  843 	mov	_SCON,#0x50
                                    844 ;	../lib/uart.c:52: TMOD |= 0x20;    	//Timer1 Mode1
      000016 43 89 20         [24]  845 	orl	_TMOD,#0x20
                                    846 ;	../lib/uart.c:54: set_SMOD;        	//UART0 Double Rate Enable
      000019 43 87 80         [24]  847 	orl	_PCON,#0x80
                                    848 ;	../lib/uart.c:55: set_T1M;
      00001C 43 8E 10         [24]  849 	orl	_CKCON,#0x10
                                    850 ;	../lib/uart.c:56: clr_BRCK;        	//Serial port 0 baud rate clock source = Timer1
      00001F 53 C4 DF         [24]  851 	anl	_T3CON,#0xdf
                                    852 ;	../lib/uart.c:62: TH1 = 256 - (1037500/u32Baudrate);         		     /*16.6 MHz */
      000022 8C*00            [24]  853 	mov	__divulong_PARM_2,r4
      000024 8D*01            [24]  854 	mov	(__divulong_PARM_2 + 1),r5
      000026 8E*02            [24]  855 	mov	(__divulong_PARM_2 + 2),r6
      000028 8F*03            [24]  856 	mov	(__divulong_PARM_2 + 3),r7
      00002A 90 D4 BC         [24]  857 	mov	dptr,#0xd4bc
      00002D 75 F0 0F         [24]  858 	mov	b,#0x0f
      000030 E4               [12]  859 	clr	a
      000031 12r00r00         [24]  860 	lcall	__divulong
      000034 AC 82            [24]  861 	mov	r4,dpl
      000036 C3               [12]  862 	clr	c
      000037 E4               [12]  863 	clr	a
      000038 9C               [12]  864 	subb	a,r4
      000039 F5 8D            [12]  865 	mov	_TH1,a
                                    866 ;	../lib/uart.c:64: set_TR1;
                                    867 ;	assignBit
      00003B D2 8E            [12]  868 	setb	_TR1
                                    869 ;	../lib/uart.c:65: set_TI;						//For printf function must setting TI = 1
                                    870 ;	assignBit
      00003D D2 99            [12]  871 	setb	_TI
                                    872 ;	../lib/uart.c:66: }
      00003F 22               [24]  873 	ret
                                    874 ;------------------------------------------------------------
                                    875 ;Allocation info for local variables in function 'InitialUART0_Timer3'
                                    876 ;------------------------------------------------------------
                                    877 ;u32Baudrate               Allocated to registers r4 r5 r6 r7 
                                    878 ;------------------------------------------------------------
                                    879 ;	../lib/uart.c:69: void InitialUART0_Timer3(UINT32 u32Baudrate) //use timer3 as Baudrate generator
                                    880 ;	-----------------------------------------
                                    881 ;	 function InitialUART0_Timer3
                                    882 ;	-----------------------------------------
      000040                        883 _InitialUART0_Timer3:
      000040 AC 82            [24]  884 	mov	r4,dpl
      000042 AD 83            [24]  885 	mov	r5,dph
      000044 AE F0            [24]  886 	mov	r6,b
      000046 FF               [12]  887 	mov	r7,a
                                    888 ;	../lib/uart.c:71: P06_Quasi_Mode;		//Setting UART pin as Quasi mode for transmit
      000047 53 B1 BF         [24]  889 	anl	_P0M1,#0xbf
      00004A 53 B2 BF         [24]  890 	anl	_P0M2,#0xbf
                                    891 ;	../lib/uart.c:72: P07_Quasi_Mode;		//Setting UART pin as Quasi mode for transmit	
      00004D 53 B1 7F         [24]  892 	anl	_P0M1,#0x7f
      000050 53 B2 7F         [24]  893 	anl	_P0M2,#0x7f
                                    894 ;	../lib/uart.c:74: SCON = 0x50;     //UART0 Mode1,REN=1,TI=1
      000053 75 98 50         [24]  895 	mov	_SCON,#0x50
                                    896 ;	../lib/uart.c:75: set_SMOD;        //UART0 Double Rate Enable
      000056 43 87 80         [24]  897 	orl	_PCON,#0x80
                                    898 ;	../lib/uart.c:76: T3CON &= 0xF8;   //T3PS2=0,T3PS1=0,T3PS0=0(Prescale=1)
      000059 53 C4 F8         [24]  899 	anl	_T3CON,#0xf8
                                    900 ;	../lib/uart.c:77: set_BRCK;        //UART0 baud rate clock source = Timer3
      00005C 43 C4 20         [24]  901 	orl	_T3CON,#0x20
                                    902 ;	../lib/uart.c:84: RH3    = HIBYTE(65536 - (1037500/u32Baudrate)); 			/*16.6 MHz */
      00005F 8C*00            [24]  903 	mov	__divulong_PARM_2,r4
      000061 8D*01            [24]  904 	mov	(__divulong_PARM_2 + 1),r5
      000063 8E*02            [24]  905 	mov	(__divulong_PARM_2 + 2),r6
      000065 8F*03            [24]  906 	mov	(__divulong_PARM_2 + 3),r7
      000067 90 D4 BC         [24]  907 	mov	dptr,#0xd4bc
      00006A 75 F0 0F         [24]  908 	mov	b,#0x0f
      00006D E4               [12]  909 	clr	a
      00006E 12r00r00         [24]  910 	lcall	__divulong
      000071 AC 82            [24]  911 	mov	r4,dpl
      000073 AD 83            [24]  912 	mov	r5,dph
      000075 AE F0            [24]  913 	mov	r6,b
      000077 FF               [12]  914 	mov	r7,a
      000078 E4               [12]  915 	clr	a
      000079 C3               [12]  916 	clr	c
      00007A 9C               [12]  917 	subb	a,r4
      00007B E4               [12]  918 	clr	a
      00007C 9D               [12]  919 	subb	a,r5
      00007D F9               [12]  920 	mov	r1,a
      00007E 74 01            [12]  921 	mov	a,#0x01
      000080 9E               [12]  922 	subb	a,r6
      000081 E4               [12]  923 	clr	a
      000082 9F               [12]  924 	subb	a,r7
      000083 89 C6            [24]  925 	mov	_RH3,r1
                                    926 ;	../lib/uart.c:85: RL3    = LOBYTE(65536 - (1037500/u32Baudrate)); 			/*16.6 MHz */
      000085 C3               [12]  927 	clr	c
      000086 E4               [12]  928 	clr	a
      000087 9C               [12]  929 	subb	a,r4
      000088 FC               [12]  930 	mov	r4,a
      000089 8C C5            [24]  931 	mov	_RL3,r4
                                    932 ;	../lib/uart.c:87: set_TR3;         //Trigger Timer3
      00008B 43 C4 08         [24]  933 	orl	_T3CON,#0x08
                                    934 ;	../lib/uart.c:88: set_TI;					 //For printf function must setting TI = 1
                                    935 ;	assignBit
      00008E D2 99            [12]  936 	setb	_TI
                                    937 ;	../lib/uart.c:89: }
      000090 22               [24]  938 	ret
                                    939 ;------------------------------------------------------------
                                    940 ;Allocation info for local variables in function 'InitialUART1_Timer3'
                                    941 ;------------------------------------------------------------
                                    942 ;u32Baudrate               Allocated to registers r4 r5 r6 r7 
                                    943 ;------------------------------------------------------------
                                    944 ;	../lib/uart.c:91: void InitialUART1_Timer3(UINT32 u32Baudrate) //use timer3 as Baudrate generator
                                    945 ;	-----------------------------------------
                                    946 ;	 function InitialUART1_Timer3
                                    947 ;	-----------------------------------------
      000091                        948 _InitialUART1_Timer3:
      000091 AC 82            [24]  949 	mov	r4,dpl
      000093 AD 83            [24]  950 	mov	r5,dph
      000095 AE F0            [24]  951 	mov	r6,b
      000097 FF               [12]  952 	mov	r7,a
                                    953 ;	../lib/uart.c:93: P02_Quasi_Mode;		//Setting UART pin as Quasi mode for transmit
      000098 53 B1 FB         [24]  954 	anl	_P0M1,#0xfb
      00009B 53 B2 FB         [24]  955 	anl	_P0M2,#0xfb
                                    956 ;	../lib/uart.c:94: P16_Quasi_Mode;		//Setting UART pin as Quasi mode for transmit
      00009E 53 B3 BF         [24]  957 	anl	_P1M1,#0xbf
      0000A1 53 B4 BF         [24]  958 	anl	_P1M2,#0xbf
                                    959 ;	../lib/uart.c:97: SCON_1 = 0x58;   	//UART1 Mode1,REN_1=1,TI_1=1 TB8=1
      0000A4 75 F8 58         [24]  960 	mov	_SCON_1,#0x58
                                    961 ;	../lib/uart.c:98: T3CON = 0x08;   	//T3PS2=0,T3PS1=0,T3PS0=0(Prescale=1), UART1 in MODE 1
      0000A7 75 C4 08         [24]  962 	mov	_T3CON,#0x08
                                    963 ;	../lib/uart.c:99: clr_BRCK;
      0000AA 53 C4 DF         [24]  964 	anl	_T3CON,#0xdf
                                    965 ;	../lib/uart.c:106: RH3    = HIBYTE(65536 - (1037500/u32Baudrate));  			/*16.6 MHz */
      0000AD 8C*00            [24]  966 	mov	__divulong_PARM_2,r4
      0000AF 8D*01            [24]  967 	mov	(__divulong_PARM_2 + 1),r5
      0000B1 8E*02            [24]  968 	mov	(__divulong_PARM_2 + 2),r6
      0000B3 8F*03            [24]  969 	mov	(__divulong_PARM_2 + 3),r7
      0000B5 90 D4 BC         [24]  970 	mov	dptr,#0xd4bc
      0000B8 75 F0 0F         [24]  971 	mov	b,#0x0f
      0000BB E4               [12]  972 	clr	a
      0000BC 12r00r00         [24]  973 	lcall	__divulong
      0000BF AC 82            [24]  974 	mov	r4,dpl
      0000C1 AD 83            [24]  975 	mov	r5,dph
      0000C3 AE F0            [24]  976 	mov	r6,b
      0000C5 FF               [12]  977 	mov	r7,a
      0000C6 E4               [12]  978 	clr	a
      0000C7 C3               [12]  979 	clr	c
      0000C8 9C               [12]  980 	subb	a,r4
      0000C9 E4               [12]  981 	clr	a
      0000CA 9D               [12]  982 	subb	a,r5
      0000CB F9               [12]  983 	mov	r1,a
      0000CC 74 01            [12]  984 	mov	a,#0x01
      0000CE 9E               [12]  985 	subb	a,r6
      0000CF E4               [12]  986 	clr	a
      0000D0 9F               [12]  987 	subb	a,r7
      0000D1 89 C6            [24]  988 	mov	_RH3,r1
                                    989 ;	../lib/uart.c:107: RL3    = LOBYTE(65536 - (1037500/u32Baudrate));				/*16.6 MHz */
      0000D3 C3               [12]  990 	clr	c
      0000D4 E4               [12]  991 	clr	a
      0000D5 9C               [12]  992 	subb	a,r4
      0000D6 FC               [12]  993 	mov	r4,a
      0000D7 8C C5            [24]  994 	mov	_RL3,r4
                                    995 ;	../lib/uart.c:109: set_TR3;         //Trigger Timer3
      0000D9 43 C4 08         [24]  996 	orl	_T3CON,#0x08
                                    997 ;	../lib/uart.c:110: }
      0000DC 22               [24]  998 	ret
                                    999 ;------------------------------------------------------------
                                   1000 ;Allocation info for local variables in function 'set_linefi_uplink_speed'
                                   1001 ;------------------------------------------------------------
                                   1002 ;u32Baudrate               Allocated to registers r4 r5 r6 r7 
                                   1003 ;------------------------------------------------------------
                                   1004 ;	../lib/uart.c:112: void set_linefi_uplink_speed(UINT32 u32Baudrate)
                                   1005 ;	-----------------------------------------
                                   1006 ;	 function set_linefi_uplink_speed
                                   1007 ;	-----------------------------------------
      0000DD                       1008 _set_linefi_uplink_speed:
                                   1009 ;	../lib/uart.c:114: return InitialUART1_Timer3(u32Baudrate);
                                   1010 ;	../lib/uart.c:115: }
      0000DD 02r00r91         [24] 1011 	ljmp	_InitialUART1_Timer3
                                   1012 ;------------------------------------------------------------
                                   1013 ;Allocation info for local variables in function 'putchar'
                                   1014 ;------------------------------------------------------------
                                   1015 ;c                         Allocated to registers r6 r7 
                                   1016 ;------------------------------------------------------------
                                   1017 ;	../lib/uart.c:118: int putchar (int c) 
                                   1018 ;	-----------------------------------------
                                   1019 ;	 function putchar
                                   1020 ;	-----------------------------------------
      0000E0                       1021 _putchar:
      0000E0 AE 82            [24] 1022 	mov	r6,dpl
                                   1023 ;	../lib/uart.c:120: if (gu8UART == 0)  {
      0000E2 E5*00            [12] 1024 	mov	a,_gu8UART
      0000E4 70 07            [24] 1025 	jnz	00102$
                                   1026 ;	../lib/uart.c:121: putchar_uart0(c);
      0000E6 8E 82            [24] 1027 	mov	dpl,r6
      0000E8 12r03rF3         [24] 1028 	lcall	_putchar_uart0
      0000EB 80 05            [24] 1029 	sjmp	00103$
      0000ED                       1030 00102$:
                                   1031 ;	../lib/uart.c:124: putchar_uart1(c);
      0000ED 8E 82            [24] 1032 	mov	dpl,r6
      0000EF 12r04r2C         [24] 1033 	lcall	_putchar_uart1
      0000F2                       1034 00103$:
                                   1035 ;	../lib/uart.c:126: return 0;
      0000F2 90 00 00         [24] 1036 	mov	dptr,#0x0000
                                   1037 ;	../lib/uart.c:127: }
      0000F5 22               [24] 1038 	ret
                                   1039 ;------------------------------------------------------------
                                   1040 ;Allocation info for local variables in function 'uart_setup'
                                   1041 ;------------------------------------------------------------
                                   1042 ;	../lib/uart.c:406: void uart_setup() 
                                   1043 ;	-----------------------------------------
                                   1044 ;	 function uart_setup
                                   1045 ;	-----------------------------------------
      0000F6                       1046 _uart_setup:
                                   1047 ;	../lib/uart.c:411: InitialUART0_Timer1(115200);
      0000F6 90 C2 00         [24] 1048 	mov	dptr,#0xc200
      0000F9 75 F0 01         [24] 1049 	mov	b,#0x01
      0000FC E4               [12] 1050 	clr	a
      0000FD 12r00r00         [24] 1051 	lcall	_InitialUART0_Timer1
                                   1052 ;	../lib/uart.c:412: InitialUART1_Timer3(115200);
      000100 90 C2 00         [24] 1053 	mov	dptr,#0xc200
      000103 75 F0 01         [24] 1054 	mov	b,#0x01
      000106 E4               [12] 1055 	clr	a
      000107 12r00r91         [24] 1056 	lcall	_InitialUART1_Timer3
                                   1057 ;	../lib/uart.c:414: set_ES;
                                   1058 ;	assignBit
      00010A D2 AC            [12] 1059 	setb	_ES
                                   1060 ;	../lib/uart.c:415: set_ES_1;
      00010C 43 9C 01         [24] 1061 	orl	_EIE1,#0x01
                                   1062 ;	../lib/uart.c:417: set_EA;
                                   1063 ;	assignBit
      00010F D2 AF            [12] 1064 	setb	_EA
                                   1065 ;	../lib/uart.c:418: }
      000111 22               [24] 1066 	ret
                                   1067 ;------------------------------------------------------------
                                   1068 ;Allocation info for local variables in function 'Uart0Tx_ISR'
                                   1069 ;------------------------------------------------------------
                                   1070 ;i                         Allocated to registers r5 r6 
                                   1071 ;------------------------------------------------------------
                                   1072 ;	../lib/uart.c:420: void Uart0Tx_ISR()
                                   1073 ;	-----------------------------------------
                                   1074 ;	 function Uart0Tx_ISR
                                   1075 ;	-----------------------------------------
      000112                       1076 _Uart0Tx_ISR:
                                   1077 ;	../lib/uart.c:423: clr_TI;	 // clear, putchar_uart0()에서 직접 불린 상태면 gu8Tx0Size==1인데, 이 경우는 무의미 할 수도 있음, 
                                   1078 ;	assignBit
      000112 C2 99            [12] 1079 	clr	_TI
                                   1080 ;	../lib/uart.c:424: if (gu8Tx0Size == 0) {
      000114 90r00r5B         [24] 1081 	mov	dptr,#_gu8Tx0Size
      000117 E0               [24] 1082 	movx	a,@dptr
      000118 FF               [12] 1083 	mov	r7,a
      000119 E0               [24] 1084 	movx	a,@dptr
      00011A 70 01            [24] 1085 	jnz	00102$
                                   1086 ;	../lib/uart.c:425: return;
      00011C 22               [24] 1087 	ret
      00011D                       1088 00102$:
                                   1089 ;	../lib/uart.c:431: for (i = 0; i< UART0_TX_GAP;i++) {
      00011D 7D 64            [12] 1090 	mov	r5,#0x64
      00011F 7E 00            [12] 1091 	mov	r6,#0x00
      000121                       1092 00108$:
                                   1093 ;	../lib/uart.c:432: nop; nop; nop; nop;
      000121 00               [12] 1094 	NOP
      000122 00               [12] 1095 	NOP
      000123 00               [12] 1096 	NOP
      000124 00               [12] 1097 	NOP
      000125 ED               [12] 1098 	mov	a,r5
      000126 24 FF            [12] 1099 	add	a,#0xff
      000128 FB               [12] 1100 	mov	r3,a
      000129 EE               [12] 1101 	mov	a,r6
      00012A 34 FF            [12] 1102 	addc	a,#0xff
      00012C FC               [12] 1103 	mov	r4,a
      00012D 8B 05            [24] 1104 	mov	ar5,r3
      00012F 8C 06            [24] 1105 	mov	ar6,r4
                                   1106 ;	../lib/uart.c:431: for (i = 0; i< UART0_TX_GAP;i++) {
      000131 EB               [12] 1107 	mov	a,r3
      000132 4C               [12] 1108 	orl	a,r4
      000133 70 EC            [24] 1109 	jnz	00108$
                                   1110 ;	../lib/uart.c:435: SBUF = pu8UartTx0Buf[gu8Tx0RIdx++];
      000135 90r00r5C         [24] 1111 	mov	dptr,#_gu8Tx0RIdx
      000138 E0               [24] 1112 	movx	a,@dptr
      000139 FE               [12] 1113 	mov	r6,a
      00013A 04               [12] 1114 	inc	a
      00013B F0               [24] 1115 	movx	@dptr,a
      00013C EE               [12] 1116 	mov	a,r6
      00013D 24r28            [12] 1117 	add	a,#_pu8UartTx0Buf
      00013F F5 82            [12] 1118 	mov	dpl,a
      000141 E4               [12] 1119 	clr	a
      000142 34s00            [12] 1120 	addc	a,#(_pu8UartTx0Buf >> 8)
      000144 F5 83            [12] 1121 	mov	dph,a
      000146 E0               [24] 1122 	movx	a,@dptr
      000147 F5 99            [12] 1123 	mov	_SBUF,a
                                   1124 ;	../lib/uart.c:436: gu8Tx0Size--;
      000149 EF               [12] 1125 	mov	a,r7
      00014A 14               [12] 1126 	dec	a
      00014B 90r00r5B         [24] 1127 	mov	dptr,#_gu8Tx0Size
      00014E F0               [24] 1128 	movx	@dptr,a
                                   1129 ;	../lib/uart.c:437: if (gu8Tx0RIdx == UART0_TX_BUFF_SIZE) {
      00014F 90r00r5C         [24] 1130 	mov	dptr,#_gu8Tx0RIdx
      000152 E0               [24] 1131 	movx	a,@dptr
      000153 FF               [12] 1132 	mov	r7,a
      000154 BF 10 05         [24] 1133 	cjne	r7,#0x10,00109$
                                   1134 ;	../lib/uart.c:438: gu8Tx0RIdx = 0;
      000157 90r00r5C         [24] 1135 	mov	dptr,#_gu8Tx0RIdx
      00015A E4               [12] 1136 	clr	a
      00015B F0               [24] 1137 	movx	@dptr,a
      00015C                       1138 00109$:
                                   1139 ;	../lib/uart.c:440: }
      00015C 22               [24] 1140 	ret
                                   1141 ;------------------------------------------------------------
                                   1142 ;Allocation info for local variables in function 'SerialPort0_ISR'
                                   1143 ;------------------------------------------------------------
                                   1144 ;	../lib/uart.c:455: void SerialPort0_ISR(void) interrupt(4) 
                                   1145 ;	-----------------------------------------
                                   1146 ;	 function SerialPort0_ISR
                                   1147 ;	-----------------------------------------
      00015D                       1148 _SerialPort0_ISR:
                           00000F  1149 	ar7 = 0x0f
                           00000E  1150 	ar6 = 0x0e
                           00000D  1151 	ar5 = 0x0d
                           00000C  1152 	ar4 = 0x0c
                           00000B  1153 	ar3 = 0x0b
                           00000A  1154 	ar2 = 0x0a
                           000009  1155 	ar1 = 0x09
                           000008  1156 	ar0 = 0x08
      00015D C0*00            [24] 1157 	push	bits
      00015F C0 E0            [24] 1158 	push	acc
      000161 C0 F0            [24] 1159 	push	b
      000163 C0 82            [24] 1160 	push	dpl
      000165 C0 83            [24] 1161 	push	dph
      000167 C0 07            [24] 1162 	push	(0+7)
      000169 C0 06            [24] 1163 	push	(0+6)
      00016B C0 05            [24] 1164 	push	(0+5)
      00016D C0 04            [24] 1165 	push	(0+4)
      00016F C0 03            [24] 1166 	push	(0+3)
      000171 C0 02            [24] 1167 	push	(0+2)
      000173 C0 01            [24] 1168 	push	(0+1)
      000175 C0 00            [24] 1169 	push	(0+0)
      000177 C0 D0            [24] 1170 	push	psw
      000179 75 D0 08         [24] 1171 	mov	psw,#0x08
                                   1172 ;	../lib/uart.c:457: if (RI == 1) {  /* if reception occur */
      00017C 30 98 3B         [24] 1173 	jnb	_RI,00106$
                                   1174 ;	../lib/uart.c:458: gu8Uart0RCnt++;
      00017F 90r00r64         [24] 1175 	mov	dptr,#_gu8Uart0RCnt
      000182 E0               [24] 1176 	movx	a,@dptr
      000183 24 01            [12] 1177 	add	a,#0x01
      000185 F0               [24] 1178 	movx	@dptr,a
                                   1179 ;	../lib/uart.c:459: if (gu8Rx0Size < UART0_RX_BUFF_SIZE) {
      000186 90r00r58         [24] 1180 	mov	dptr,#_gu8Rx0Size
      000189 E0               [24] 1181 	movx	a,@dptr
      00018A FF               [12] 1182 	mov	r7,a
      00018B BF 10 00         [24] 1183 	cjne	r7,#0x10,00128$
      00018E                       1184 00128$:
      00018E 50 28            [24] 1185 	jnc	00104$
                                   1186 ;	../lib/uart.c:460: pu8UartRx0Buf[gu8Rx0WIdx++] = SBUF;
      000190 90r00r5A         [24] 1187 	mov	dptr,#_gu8Rx0WIdx
      000193 E0               [24] 1188 	movx	a,@dptr
      000194 FF               [12] 1189 	mov	r7,a
      000195 04               [12] 1190 	inc	a
      000196 F0               [24] 1191 	movx	@dptr,a
      000197 EF               [12] 1192 	mov	a,r7
      000198 24r18            [12] 1193 	add	a,#_pu8UartRx0Buf
      00019A F5 82            [12] 1194 	mov	dpl,a
      00019C E4               [12] 1195 	clr	a
      00019D 34s00            [12] 1196 	addc	a,#(_pu8UartRx0Buf >> 8)
      00019F F5 83            [12] 1197 	mov	dph,a
      0001A1 E5 99            [12] 1198 	mov	a,_SBUF
      0001A3 F0               [24] 1199 	movx	@dptr,a
                                   1200 ;	../lib/uart.c:461: gu8Rx0Size++;
      0001A4 90r00r58         [24] 1201 	mov	dptr,#_gu8Rx0Size
      0001A7 E0               [24] 1202 	movx	a,@dptr
      0001A8 24 01            [12] 1203 	add	a,#0x01
      0001AA F0               [24] 1204 	movx	@dptr,a
                                   1205 ;	../lib/uart.c:462: if (gu8Rx0WIdx == UART0_RX_BUFF_SIZE) {
      0001AB 90r00r5A         [24] 1206 	mov	dptr,#_gu8Rx0WIdx
      0001AE E0               [24] 1207 	movx	a,@dptr
      0001AF FF               [12] 1208 	mov	r7,a
      0001B0 BF 10 05         [24] 1209 	cjne	r7,#0x10,00104$
                                   1210 ;	../lib/uart.c:463: gu8Rx0WIdx = 0;
      0001B3 90r00r5A         [24] 1211 	mov	dptr,#_gu8Rx0WIdx
      0001B6 E4               [12] 1212 	clr	a
      0001B7 F0               [24] 1213 	movx	@dptr,a
      0001B8                       1214 00104$:
                                   1215 ;	../lib/uart.c:469: clr_RI;        /* clear reception flag for next reception */
                                   1216 ;	assignBit
      0001B8 C2 98            [12] 1217 	clr	_RI
      0001BA                       1218 00106$:
                                   1219 ;	../lib/uart.c:472: if (TI == 1) {
      0001BA 30 99 10         [24] 1220 	jnb	_TI,00109$
                                   1221 ;	../lib/uart.c:473: gu8Uart0TCnt++;
      0001BD 90r00r65         [24] 1222 	mov	dptr,#_gu8Uart0TCnt
      0001C0 E0               [24] 1223 	movx	a,@dptr
      0001C1 24 01            [12] 1224 	add	a,#0x01
      0001C3 F0               [24] 1225 	movx	@dptr,a
                                   1226 ;	../lib/uart.c:474: Uart0Tx_ISR();
      0001C4 75 D0 00         [24] 1227 	mov	psw,#0x00
      0001C7 12r01r12         [24] 1228 	lcall	_Uart0Tx_ISR
      0001CA 75 D0 08         [24] 1229 	mov	psw,#0x08
      0001CD                       1230 00109$:
                                   1231 ;	../lib/uart.c:476: }
      0001CD D0 D0            [24] 1232 	pop	psw
      0001CF D0 00            [24] 1233 	pop	(0+0)
      0001D1 D0 01            [24] 1234 	pop	(0+1)
      0001D3 D0 02            [24] 1235 	pop	(0+2)
      0001D5 D0 03            [24] 1236 	pop	(0+3)
      0001D7 D0 04            [24] 1237 	pop	(0+4)
      0001D9 D0 05            [24] 1238 	pop	(0+5)
      0001DB D0 06            [24] 1239 	pop	(0+6)
      0001DD D0 07            [24] 1240 	pop	(0+7)
      0001DF D0 83            [24] 1241 	pop	dph
      0001E1 D0 82            [24] 1242 	pop	dpl
      0001E3 D0 F0            [24] 1243 	pop	b
      0001E5 D0 E0            [24] 1244 	pop	acc
      0001E7 D0*00            [24] 1245 	pop	bits
      0001E9 32               [24] 1246 	reti
                                   1247 ;------------------------------------------------------------
                                   1248 ;Allocation info for local variables in function 'chkchar_uart0'
                                   1249 ;------------------------------------------------------------
                                   1250 ;	../lib/uart.c:479: uint8_t chkchar_uart0()
                                   1251 ;	-----------------------------------------
                                   1252 ;	 function chkchar_uart0
                                   1253 ;	-----------------------------------------
      0001EA                       1254 _chkchar_uart0:
                           000007  1255 	ar7 = 0x07
                           000006  1256 	ar6 = 0x06
                           000005  1257 	ar5 = 0x05
                           000004  1258 	ar4 = 0x04
                           000003  1259 	ar3 = 0x03
                           000002  1260 	ar2 = 0x02
                           000001  1261 	ar1 = 0x01
                           000000  1262 	ar0 = 0x00
                                   1263 ;	../lib/uart.c:484: return gu8Rx0Size;
      0001EA 90r00r58         [24] 1264 	mov	dptr,#_gu8Rx0Size
      0001ED E0               [24] 1265 	movx	a,@dptr
                                   1266 ;	../lib/uart.c:485: }
      0001EE F5 82            [12] 1267 	mov	dpl,a
      0001F0 22               [24] 1268 	ret
                                   1269 ;------------------------------------------------------------
                                   1270 ;Allocation info for local variables in function 'getchar_uart0'
                                   1271 ;------------------------------------------------------------
                                   1272 ;apu8Data                  Allocated to registers r5 r6 r7 
                                   1273 ;------------------------------------------------------------
                                   1274 ;	../lib/uart.c:487: uint8_t getchar_uart0(uint8_t * apu8Data)
                                   1275 ;	-----------------------------------------
                                   1276 ;	 function getchar_uart0
                                   1277 ;	-----------------------------------------
      0001F1                       1278 _getchar_uart0:
      0001F1 AD 82            [24] 1279 	mov	r5,dpl
      0001F3 AE 83            [24] 1280 	mov	r6,dph
      0001F5 AF F0            [24] 1281 	mov	r7,b
                                   1282 ;	../lib/uart.c:492: if (gu8Rx0Size == 0) {
      0001F7 90r00r58         [24] 1283 	mov	dptr,#_gu8Rx0Size
      0001FA E0               [24] 1284 	movx	a,@dptr
                                   1285 ;	../lib/uart.c:493: return 0;
      0001FB 70 03            [24] 1286 	jnz	00102$
      0001FD F5 82            [12] 1287 	mov	dpl,a
      0001FF 22               [24] 1288 	ret
      000200                       1289 00102$:
                                   1290 ;	../lib/uart.c:495: clr_ES;
                                   1291 ;	assignBit
      000200 C2 AC            [12] 1292 	clr	_ES
                                   1293 ;	../lib/uart.c:496: *apu8Data = pu8UartRx0Buf[gu8Rx0RIdx++];
      000202 90r00r59         [24] 1294 	mov	dptr,#_gu8Rx0RIdx
      000205 E0               [24] 1295 	movx	a,@dptr
      000206 FC               [12] 1296 	mov	r4,a
      000207 04               [12] 1297 	inc	a
      000208 F0               [24] 1298 	movx	@dptr,a
      000209 EC               [12] 1299 	mov	a,r4
      00020A 24r18            [12] 1300 	add	a,#_pu8UartRx0Buf
      00020C F5 82            [12] 1301 	mov	dpl,a
      00020E E4               [12] 1302 	clr	a
      00020F 34s00            [12] 1303 	addc	a,#(_pu8UartRx0Buf >> 8)
      000211 F5 83            [12] 1304 	mov	dph,a
      000213 E0               [24] 1305 	movx	a,@dptr
      000214 8D 82            [24] 1306 	mov	dpl,r5
      000216 8E 83            [24] 1307 	mov	dph,r6
      000218 8F F0            [24] 1308 	mov	b,r7
      00021A 12r00r00         [24] 1309 	lcall	__gptrput
                                   1310 ;	../lib/uart.c:497: gu8Rx0Size--;
      00021D 90r00r58         [24] 1311 	mov	dptr,#_gu8Rx0Size
      000220 E0               [24] 1312 	movx	a,@dptr
      000221 14               [12] 1313 	dec	a
      000222 F0               [24] 1314 	movx	@dptr,a
                                   1315 ;	../lib/uart.c:498: if (gu8Rx0RIdx == UART0_RX_BUFF_SIZE) {
      000223 90r00r59         [24] 1316 	mov	dptr,#_gu8Rx0RIdx
      000226 E0               [24] 1317 	movx	a,@dptr
      000227 FF               [12] 1318 	mov	r7,a
      000228 BF 10 05         [24] 1319 	cjne	r7,#0x10,00104$
                                   1320 ;	../lib/uart.c:499: gu8Rx0RIdx = 0;
      00022B 90r00r59         [24] 1321 	mov	dptr,#_gu8Rx0RIdx
      00022E E4               [12] 1322 	clr	a
      00022F F0               [24] 1323 	movx	@dptr,a
      000230                       1324 00104$:
                                   1325 ;	../lib/uart.c:501: set_ES;
                                   1326 ;	assignBit
      000230 D2 AC            [12] 1327 	setb	_ES
                                   1328 ;	../lib/uart.c:502: return 1;
      000232 75 82 01         [24] 1329 	mov	dpl,#0x01
                                   1330 ;	../lib/uart.c:503: }
      000235 22               [24] 1331 	ret
                                   1332 ;------------------------------------------------------------
                                   1333 ;Allocation info for local variables in function 'getstr_uart0'
                                   1334 ;------------------------------------------------------------
                                   1335 ;apu8Data                  Allocated with name '_getstr_uart0_PARM_2'
                                   1336 ;au8Size                   Allocated to registers r7 
                                   1337 ;i                         Allocated to registers r3 
                                   1338 ;------------------------------------------------------------
                                   1339 ;	../lib/uart.c:505: uint8_t getstr_uart0(uint8_t au8Size, uint8_t * apu8Data)
                                   1340 ;	-----------------------------------------
                                   1341 ;	 function getstr_uart0
                                   1342 ;	-----------------------------------------
      000236                       1343 _getstr_uart0:
      000236 AF 82            [24] 1344 	mov	r7,dpl
                                   1345 ;	../lib/uart.c:511: if (gu8Rx0Size == 0) {
      000238 90r00r58         [24] 1346 	mov	dptr,#_gu8Rx0Size
      00023B E0               [24] 1347 	movx	a,@dptr
      00023C FE               [12] 1348 	mov	r6,a
                                   1349 ;	../lib/uart.c:512: return 0;
      00023D 70 03            [24] 1350 	jnz	00102$
      00023F F5 82            [12] 1351 	mov	dpl,a
      000241 22               [24] 1352 	ret
      000242                       1353 00102$:
                                   1354 ;	../lib/uart.c:515: if (gu8Rx0Size < au8Size) {
      000242 C3               [12] 1355 	clr	c
      000243 EE               [12] 1356 	mov	a,r6
      000244 9F               [12] 1357 	subb	a,r7
      000245 50 02            [24] 1358 	jnc	00117$
                                   1359 ;	../lib/uart.c:516: au8Size = gu8Rx0Size;
      000247 8E 07            [24] 1360 	mov	ar7,r6
                                   1361 ;	../lib/uart.c:518: for (i=0;i<au8Size;i++) {
      000249                       1362 00117$:
      000249 AC*00            [24] 1363 	mov	r4,_getstr_uart0_PARM_2
      00024B AD*01            [24] 1364 	mov	r5,(_getstr_uart0_PARM_2 + 1)
      00024D AE*02            [24] 1365 	mov	r6,(_getstr_uart0_PARM_2 + 2)
      00024F 7B 00            [12] 1366 	mov	r3,#0x00
      000251                       1367 00109$:
      000251 C3               [12] 1368 	clr	c
      000252 EB               [12] 1369 	mov	a,r3
      000253 9F               [12] 1370 	subb	a,r7
      000254 50 30            [24] 1371 	jnc	00107$
                                   1372 ;	../lib/uart.c:519: *apu8Data++ = pu8UartRx0Buf[gu8Rx0RIdx++];
      000256 90r00r59         [24] 1373 	mov	dptr,#_gu8Rx0RIdx
      000259 E0               [24] 1374 	movx	a,@dptr
      00025A FA               [12] 1375 	mov	r2,a
      00025B 04               [12] 1376 	inc	a
      00025C F0               [24] 1377 	movx	@dptr,a
      00025D EA               [12] 1378 	mov	a,r2
      00025E 24r18            [12] 1379 	add	a,#_pu8UartRx0Buf
      000260 F5 82            [12] 1380 	mov	dpl,a
      000262 E4               [12] 1381 	clr	a
      000263 34s00            [12] 1382 	addc	a,#(_pu8UartRx0Buf >> 8)
      000265 F5 83            [12] 1383 	mov	dph,a
      000267 E0               [24] 1384 	movx	a,@dptr
      000268 8C 82            [24] 1385 	mov	dpl,r4
      00026A 8D 83            [24] 1386 	mov	dph,r5
      00026C 8E F0            [24] 1387 	mov	b,r6
      00026E 12r00r00         [24] 1388 	lcall	__gptrput
      000271 A3               [24] 1389 	inc	dptr
      000272 AC 82            [24] 1390 	mov	r4,dpl
      000274 AD 83            [24] 1391 	mov	r5,dph
                                   1392 ;	../lib/uart.c:520: if (gu8Rx0RIdx == UART0_RX_BUFF_SIZE) {
      000276 90r00r59         [24] 1393 	mov	dptr,#_gu8Rx0RIdx
      000279 E0               [24] 1394 	movx	a,@dptr
      00027A FA               [12] 1395 	mov	r2,a
      00027B BA 10 05         [24] 1396 	cjne	r2,#0x10,00110$
                                   1397 ;	../lib/uart.c:521: gu8Rx0RIdx = 0;
      00027E 90r00r59         [24] 1398 	mov	dptr,#_gu8Rx0RIdx
      000281 E4               [12] 1399 	clr	a
      000282 F0               [24] 1400 	movx	@dptr,a
      000283                       1401 00110$:
                                   1402 ;	../lib/uart.c:518: for (i=0;i<au8Size;i++) {
      000283 0B               [12] 1403 	inc	r3
      000284 80 CB            [24] 1404 	sjmp	00109$
      000286                       1405 00107$:
                                   1406 ;	../lib/uart.c:524: gu8Rx0Size -= au8Size;
      000286 90r00r58         [24] 1407 	mov	dptr,#_gu8Rx0Size
      000289 E0               [24] 1408 	movx	a,@dptr
      00028A C3               [12] 1409 	clr	c
      00028B 9F               [12] 1410 	subb	a,r7
      00028C F0               [24] 1411 	movx	@dptr,a
                                   1412 ;	../lib/uart.c:525: return au8Size;
      00028D 8F 82            [24] 1413 	mov	dpl,r7
                                   1414 ;	../lib/uart.c:526: }
      00028F 22               [24] 1415 	ret
                                   1416 ;------------------------------------------------------------
                                   1417 ;Allocation info for local variables in function 'Uart1Tx_ISR'
                                   1418 ;------------------------------------------------------------
                                   1419 ;	../lib/uart.c:527: void Uart1Tx_ISR()
                                   1420 ;	-----------------------------------------
                                   1421 ;	 function Uart1Tx_ISR
                                   1422 ;	-----------------------------------------
      000290                       1423 _Uart1Tx_ISR:
                                   1424 ;	../lib/uart.c:530: clr_TI_1;// clear, putchar_uart1()에서 직접 불린 상태면 gu8Tx1Size==1인데, 이 경우는 무의미 할 수도 있음, 
                                   1425 ;	assignBit
      000290 C2 F9            [12] 1426 	clr	_TI_1
                                   1427 ;	../lib/uart.c:531: if (gu8Tx1Size == 0) {
      000292 90r00r61         [24] 1428 	mov	dptr,#_gu8Tx1Size
      000295 E0               [24] 1429 	movx	a,@dptr
      000296 FF               [12] 1430 	mov	r7,a
      000297 E0               [24] 1431 	movx	a,@dptr
      000298 70 01            [24] 1432 	jnz	00102$
                                   1433 ;	../lib/uart.c:533: return;
      00029A 22               [24] 1434 	ret
      00029B                       1435 00102$:
                                   1436 ;	../lib/uart.c:553: SBUF_1 = pu8UartTx1Buf[gu8Tx1RIdx++];
      00029B 90r00r62         [24] 1437 	mov	dptr,#_gu8Tx1RIdx
      00029E E0               [24] 1438 	movx	a,@dptr
      00029F FE               [12] 1439 	mov	r6,a
      0002A0 04               [12] 1440 	inc	a
      0002A1 F0               [24] 1441 	movx	@dptr,a
      0002A2 EE               [12] 1442 	mov	a,r6
      0002A3 24r48            [12] 1443 	add	a,#_pu8UartTx1Buf
      0002A5 F5 82            [12] 1444 	mov	dpl,a
      0002A7 E4               [12] 1445 	clr	a
      0002A8 34s00            [12] 1446 	addc	a,#(_pu8UartTx1Buf >> 8)
      0002AA F5 83            [12] 1447 	mov	dph,a
      0002AC E0               [24] 1448 	movx	a,@dptr
      0002AD F5 9A            [12] 1449 	mov	_SBUF_1,a
                                   1450 ;	../lib/uart.c:554: gu8Tx1Size--;
      0002AF EF               [12] 1451 	mov	a,r7
      0002B0 14               [12] 1452 	dec	a
      0002B1 90r00r61         [24] 1453 	mov	dptr,#_gu8Tx1Size
      0002B4 F0               [24] 1454 	movx	@dptr,a
                                   1455 ;	../lib/uart.c:560: gu8Tx1RIdx &= UART1_TX_BUFF_SIZE_MSK;
      0002B5 90r00r62         [24] 1456 	mov	dptr,#_gu8Tx1RIdx
      0002B8 E0               [24] 1457 	movx	a,@dptr
      0002B9 53 E0 0F         [24] 1458 	anl	acc,#0x0f
      0002BC F0               [24] 1459 	movx	@dptr,a
                                   1460 ;	../lib/uart.c:562: }
      0002BD 22               [24] 1461 	ret
                                   1462 ;------------------------------------------------------------
                                   1463 ;Allocation info for local variables in function 'SerialPort1_ISR'
                                   1464 ;------------------------------------------------------------
                                   1465 ;	../lib/uart.c:564: void SerialPort1_ISR(void) interrupt(15) 
                                   1466 ;	-----------------------------------------
                                   1467 ;	 function SerialPort1_ISR
                                   1468 ;	-----------------------------------------
      0002BE                       1469 _SerialPort1_ISR:
                           00000F  1470 	ar7 = 0x0f
                           00000E  1471 	ar6 = 0x0e
                           00000D  1472 	ar5 = 0x0d
                           00000C  1473 	ar4 = 0x0c
                           00000B  1474 	ar3 = 0x0b
                           00000A  1475 	ar2 = 0x0a
                           000009  1476 	ar1 = 0x09
                           000008  1477 	ar0 = 0x08
      0002BE C0*00            [24] 1478 	push	bits
      0002C0 C0 E0            [24] 1479 	push	acc
      0002C2 C0 F0            [24] 1480 	push	b
      0002C4 C0 82            [24] 1481 	push	dpl
      0002C6 C0 83            [24] 1482 	push	dph
      0002C8 C0 07            [24] 1483 	push	(0+7)
      0002CA C0 06            [24] 1484 	push	(0+6)
      0002CC C0 05            [24] 1485 	push	(0+5)
      0002CE C0 04            [24] 1486 	push	(0+4)
      0002D0 C0 03            [24] 1487 	push	(0+3)
      0002D2 C0 02            [24] 1488 	push	(0+2)
      0002D4 C0 01            [24] 1489 	push	(0+1)
      0002D6 C0 00            [24] 1490 	push	(0+0)
      0002D8 C0 D0            [24] 1491 	push	psw
      0002DA 75 D0 08         [24] 1492 	mov	psw,#0x08
                                   1493 ;	../lib/uart.c:566: if (RI_1 == 1) {/* if reception occur */
      0002DD 30 F8 3B         [24] 1494 	jnb	_RI_1,00106$
                                   1495 ;	../lib/uart.c:567: gu8Uart1RCnt ++;
      0002E0 90r00r66         [24] 1496 	mov	dptr,#_gu8Uart1RCnt
      0002E3 E0               [24] 1497 	movx	a,@dptr
      0002E4 24 01            [12] 1498 	add	a,#0x01
      0002E6 F0               [24] 1499 	movx	@dptr,a
                                   1500 ;	../lib/uart.c:568: if (gu8Rx1Size < UART1_RX_BUFF_SIZE) {
      0002E7 90r00r5E         [24] 1501 	mov	dptr,#_gu8Rx1Size
      0002EA E0               [24] 1502 	movx	a,@dptr
      0002EB FF               [12] 1503 	mov	r7,a
      0002EC BF 10 00         [24] 1504 	cjne	r7,#0x10,00128$
      0002EF                       1505 00128$:
      0002EF 50 28            [24] 1506 	jnc	00104$
                                   1507 ;	../lib/uart.c:569: pu8UartRx1Buf[gu8Rx1WIdx++] = SBUF_1;
      0002F1 90r00r60         [24] 1508 	mov	dptr,#_gu8Rx1WIdx
      0002F4 E0               [24] 1509 	movx	a,@dptr
      0002F5 FF               [12] 1510 	mov	r7,a
      0002F6 04               [12] 1511 	inc	a
      0002F7 F0               [24] 1512 	movx	@dptr,a
      0002F8 EF               [12] 1513 	mov	a,r7
      0002F9 24r38            [12] 1514 	add	a,#_pu8UartRx1Buf
      0002FB F5 82            [12] 1515 	mov	dpl,a
      0002FD E4               [12] 1516 	clr	a
      0002FE 34s00            [12] 1517 	addc	a,#(_pu8UartRx1Buf >> 8)
      000300 F5 83            [12] 1518 	mov	dph,a
      000302 E5 9A            [12] 1519 	mov	a,_SBUF_1
      000304 F0               [24] 1520 	movx	@dptr,a
                                   1521 ;	../lib/uart.c:570: gu8Rx1Size++;
      000305 90r00r5E         [24] 1522 	mov	dptr,#_gu8Rx1Size
      000308 E0               [24] 1523 	movx	a,@dptr
      000309 24 01            [12] 1524 	add	a,#0x01
      00030B F0               [24] 1525 	movx	@dptr,a
                                   1526 ;	../lib/uart.c:571: if (gu8Rx1WIdx == UART1_RX_BUFF_SIZE) {
      00030C 90r00r60         [24] 1527 	mov	dptr,#_gu8Rx1WIdx
      00030F E0               [24] 1528 	movx	a,@dptr
      000310 FF               [12] 1529 	mov	r7,a
      000311 BF 10 05         [24] 1530 	cjne	r7,#0x10,00104$
                                   1531 ;	../lib/uart.c:572: gu8Rx1WIdx = 0;
      000314 90r00r60         [24] 1532 	mov	dptr,#_gu8Rx1WIdx
      000317 E4               [12] 1533 	clr	a
      000318 F0               [24] 1534 	movx	@dptr,a
      000319                       1535 00104$:
                                   1536 ;	../lib/uart.c:578: clr_RI_1;      /* clear reception flag for next reception */
                                   1537 ;	assignBit
      000319 C2 F8            [12] 1538 	clr	_RI_1
      00031B                       1539 00106$:
                                   1540 ;	../lib/uart.c:581: if (TI_1 == 1) {
      00031B 30 F9 10         [24] 1541 	jnb	_TI_1,00109$
                                   1542 ;	../lib/uart.c:582: gu8Uart1TCnt ++;
      00031E 90r00r67         [24] 1543 	mov	dptr,#_gu8Uart1TCnt
      000321 E0               [24] 1544 	movx	a,@dptr
      000322 24 01            [12] 1545 	add	a,#0x01
      000324 F0               [24] 1546 	movx	@dptr,a
                                   1547 ;	../lib/uart.c:583: Uart1Tx_ISR();
      000325 75 D0 00         [24] 1548 	mov	psw,#0x00
      000328 12r02r90         [24] 1549 	lcall	_Uart1Tx_ISR
      00032B 75 D0 08         [24] 1550 	mov	psw,#0x08
      00032E                       1551 00109$:
                                   1552 ;	../lib/uart.c:585: }
      00032E D0 D0            [24] 1553 	pop	psw
      000330 D0 00            [24] 1554 	pop	(0+0)
      000332 D0 01            [24] 1555 	pop	(0+1)
      000334 D0 02            [24] 1556 	pop	(0+2)
      000336 D0 03            [24] 1557 	pop	(0+3)
      000338 D0 04            [24] 1558 	pop	(0+4)
      00033A D0 05            [24] 1559 	pop	(0+5)
      00033C D0 06            [24] 1560 	pop	(0+6)
      00033E D0 07            [24] 1561 	pop	(0+7)
      000340 D0 83            [24] 1562 	pop	dph
      000342 D0 82            [24] 1563 	pop	dpl
      000344 D0 F0            [24] 1564 	pop	b
      000346 D0 E0            [24] 1565 	pop	acc
      000348 D0*00            [24] 1566 	pop	bits
      00034A 32               [24] 1567 	reti
                                   1568 ;------------------------------------------------------------
                                   1569 ;Allocation info for local variables in function 'chkchar_uart1'
                                   1570 ;------------------------------------------------------------
                                   1571 ;	../lib/uart.c:587: uint8_t chkchar_uart1()
                                   1572 ;	-----------------------------------------
                                   1573 ;	 function chkchar_uart1
                                   1574 ;	-----------------------------------------
      00034B                       1575 _chkchar_uart1:
                           000007  1576 	ar7 = 0x07
                           000006  1577 	ar6 = 0x06
                           000005  1578 	ar5 = 0x05
                           000004  1579 	ar4 = 0x04
                           000003  1580 	ar3 = 0x03
                           000002  1581 	ar2 = 0x02
                           000001  1582 	ar1 = 0x01
                           000000  1583 	ar0 = 0x00
                                   1584 ;	../lib/uart.c:592: return gu8Rx1Size;
      00034B 90r00r5E         [24] 1585 	mov	dptr,#_gu8Rx1Size
      00034E E0               [24] 1586 	movx	a,@dptr
                                   1587 ;	../lib/uart.c:593: }
      00034F F5 82            [12] 1588 	mov	dpl,a
      000351 22               [24] 1589 	ret
                                   1590 ;------------------------------------------------------------
                                   1591 ;Allocation info for local variables in function 'getchar_uart1'
                                   1592 ;------------------------------------------------------------
                                   1593 ;apu8Data                  Allocated to registers r5 r6 r7 
                                   1594 ;------------------------------------------------------------
                                   1595 ;	../lib/uart.c:595: uint8_t getchar_uart1(uint8_t * apu8Data)
                                   1596 ;	-----------------------------------------
                                   1597 ;	 function getchar_uart1
                                   1598 ;	-----------------------------------------
      000352                       1599 _getchar_uart1:
      000352 AD 82            [24] 1600 	mov	r5,dpl
      000354 AE 83            [24] 1601 	mov	r6,dph
      000356 AF F0            [24] 1602 	mov	r7,b
                                   1603 ;	../lib/uart.c:600: if (gu8Rx1Size == 0) {
      000358 90r00r5E         [24] 1604 	mov	dptr,#_gu8Rx1Size
      00035B E0               [24] 1605 	movx	a,@dptr
                                   1606 ;	../lib/uart.c:601: return 0;
      00035C 70 03            [24] 1607 	jnz	00102$
      00035E F5 82            [12] 1608 	mov	dpl,a
      000360 22               [24] 1609 	ret
      000361                       1610 00102$:
                                   1611 ;	../lib/uart.c:603: clr_ES_1;
      000361 53 9C FE         [24] 1612 	anl	_EIE1,#0xfe
                                   1613 ;	../lib/uart.c:604: *apu8Data = pu8UartRx1Buf[gu8Rx1RIdx++];
      000364 90r00r5F         [24] 1614 	mov	dptr,#_gu8Rx1RIdx
      000367 E0               [24] 1615 	movx	a,@dptr
      000368 FC               [12] 1616 	mov	r4,a
      000369 04               [12] 1617 	inc	a
      00036A F0               [24] 1618 	movx	@dptr,a
      00036B EC               [12] 1619 	mov	a,r4
      00036C 24r38            [12] 1620 	add	a,#_pu8UartRx1Buf
      00036E F5 82            [12] 1621 	mov	dpl,a
      000370 E4               [12] 1622 	clr	a
      000371 34s00            [12] 1623 	addc	a,#(_pu8UartRx1Buf >> 8)
      000373 F5 83            [12] 1624 	mov	dph,a
      000375 E0               [24] 1625 	movx	a,@dptr
      000376 8D 82            [24] 1626 	mov	dpl,r5
      000378 8E 83            [24] 1627 	mov	dph,r6
      00037A 8F F0            [24] 1628 	mov	b,r7
      00037C 12r00r00         [24] 1629 	lcall	__gptrput
                                   1630 ;	../lib/uart.c:605: gu8Rx1Size--;
      00037F 90r00r5E         [24] 1631 	mov	dptr,#_gu8Rx1Size
      000382 E0               [24] 1632 	movx	a,@dptr
      000383 14               [12] 1633 	dec	a
      000384 F0               [24] 1634 	movx	@dptr,a
                                   1635 ;	../lib/uart.c:606: if (gu8Rx1RIdx == UART1_RX_BUFF_SIZE) {
      000385 90r00r5F         [24] 1636 	mov	dptr,#_gu8Rx1RIdx
      000388 E0               [24] 1637 	movx	a,@dptr
      000389 FF               [12] 1638 	mov	r7,a
      00038A BF 10 05         [24] 1639 	cjne	r7,#0x10,00104$
                                   1640 ;	../lib/uart.c:607: gu8Rx1RIdx = 0;
      00038D 90r00r5F         [24] 1641 	mov	dptr,#_gu8Rx1RIdx
      000390 E4               [12] 1642 	clr	a
      000391 F0               [24] 1643 	movx	@dptr,a
      000392                       1644 00104$:
                                   1645 ;	../lib/uart.c:609: set_ES_1;
      000392 43 9C 01         [24] 1646 	orl	_EIE1,#0x01
                                   1647 ;	../lib/uart.c:610: return 1;
      000395 75 82 01         [24] 1648 	mov	dpl,#0x01
                                   1649 ;	../lib/uart.c:611: }
      000398 22               [24] 1650 	ret
                                   1651 ;------------------------------------------------------------
                                   1652 ;Allocation info for local variables in function 'getstr_uart1'
                                   1653 ;------------------------------------------------------------
                                   1654 ;apu8Data                  Allocated with name '_getstr_uart1_PARM_2'
                                   1655 ;au8Size                   Allocated to registers r7 
                                   1656 ;i                         Allocated to registers r3 
                                   1657 ;------------------------------------------------------------
                                   1658 ;	../lib/uart.c:613: uint8_t getstr_uart1(uint8_t au8Size, uint8_t * apu8Data)
                                   1659 ;	-----------------------------------------
                                   1660 ;	 function getstr_uart1
                                   1661 ;	-----------------------------------------
      000399                       1662 _getstr_uart1:
      000399 AF 82            [24] 1663 	mov	r7,dpl
                                   1664 ;	../lib/uart.c:619: if (gu8Rx1Size == 0) {
      00039B 90r00r5E         [24] 1665 	mov	dptr,#_gu8Rx1Size
      00039E E0               [24] 1666 	movx	a,@dptr
      00039F FE               [12] 1667 	mov	r6,a
                                   1668 ;	../lib/uart.c:620: return 0;
      0003A0 70 03            [24] 1669 	jnz	00102$
      0003A2 F5 82            [12] 1670 	mov	dpl,a
      0003A4 22               [24] 1671 	ret
      0003A5                       1672 00102$:
                                   1673 ;	../lib/uart.c:623: if (gu8Rx1Size < au8Size) {
      0003A5 C3               [12] 1674 	clr	c
      0003A6 EE               [12] 1675 	mov	a,r6
      0003A7 9F               [12] 1676 	subb	a,r7
      0003A8 50 02            [24] 1677 	jnc	00117$
                                   1678 ;	../lib/uart.c:624: au8Size = gu8Rx1Size;
      0003AA 8E 07            [24] 1679 	mov	ar7,r6
                                   1680 ;	../lib/uart.c:626: for (i=0;i<au8Size;i++) {
      0003AC                       1681 00117$:
      0003AC AC*00            [24] 1682 	mov	r4,_getstr_uart1_PARM_2
      0003AE AD*01            [24] 1683 	mov	r5,(_getstr_uart1_PARM_2 + 1)
      0003B0 AE*02            [24] 1684 	mov	r6,(_getstr_uart1_PARM_2 + 2)
      0003B2 7B 00            [12] 1685 	mov	r3,#0x00
      0003B4                       1686 00109$:
      0003B4 C3               [12] 1687 	clr	c
      0003B5 EB               [12] 1688 	mov	a,r3
      0003B6 9F               [12] 1689 	subb	a,r7
      0003B7 50 30            [24] 1690 	jnc	00107$
                                   1691 ;	../lib/uart.c:627: *apu8Data++ = pu8UartRx1Buf[gu8Rx1RIdx++];
      0003B9 90r00r5F         [24] 1692 	mov	dptr,#_gu8Rx1RIdx
      0003BC E0               [24] 1693 	movx	a,@dptr
      0003BD FA               [12] 1694 	mov	r2,a
      0003BE 04               [12] 1695 	inc	a
      0003BF F0               [24] 1696 	movx	@dptr,a
      0003C0 EA               [12] 1697 	mov	a,r2
      0003C1 24r38            [12] 1698 	add	a,#_pu8UartRx1Buf
      0003C3 F5 82            [12] 1699 	mov	dpl,a
      0003C5 E4               [12] 1700 	clr	a
      0003C6 34s00            [12] 1701 	addc	a,#(_pu8UartRx1Buf >> 8)
      0003C8 F5 83            [12] 1702 	mov	dph,a
      0003CA E0               [24] 1703 	movx	a,@dptr
      0003CB 8C 82            [24] 1704 	mov	dpl,r4
      0003CD 8D 83            [24] 1705 	mov	dph,r5
      0003CF 8E F0            [24] 1706 	mov	b,r6
      0003D1 12r00r00         [24] 1707 	lcall	__gptrput
      0003D4 A3               [24] 1708 	inc	dptr
      0003D5 AC 82            [24] 1709 	mov	r4,dpl
      0003D7 AD 83            [24] 1710 	mov	r5,dph
                                   1711 ;	../lib/uart.c:628: if (gu8Rx1RIdx == UART1_RX_BUFF_SIZE) {
      0003D9 90r00r5F         [24] 1712 	mov	dptr,#_gu8Rx1RIdx
      0003DC E0               [24] 1713 	movx	a,@dptr
      0003DD FA               [12] 1714 	mov	r2,a
      0003DE BA 10 05         [24] 1715 	cjne	r2,#0x10,00110$
                                   1716 ;	../lib/uart.c:629: gu8Rx1RIdx = 0;
      0003E1 90r00r5F         [24] 1717 	mov	dptr,#_gu8Rx1RIdx
      0003E4 E4               [12] 1718 	clr	a
      0003E5 F0               [24] 1719 	movx	@dptr,a
      0003E6                       1720 00110$:
                                   1721 ;	../lib/uart.c:626: for (i=0;i<au8Size;i++) {
      0003E6 0B               [12] 1722 	inc	r3
      0003E7 80 CB            [24] 1723 	sjmp	00109$
      0003E9                       1724 00107$:
                                   1725 ;	../lib/uart.c:632: gu8Rx1Size -= au8Size;
      0003E9 90r00r5E         [24] 1726 	mov	dptr,#_gu8Rx1Size
      0003EC E0               [24] 1727 	movx	a,@dptr
      0003ED C3               [12] 1728 	clr	c
      0003EE 9F               [12] 1729 	subb	a,r7
      0003EF F0               [24] 1730 	movx	@dptr,a
                                   1731 ;	../lib/uart.c:633: return au8Size;
      0003F0 8F 82            [24] 1732 	mov	dpl,r7
                                   1733 ;	../lib/uart.c:634: }
      0003F2 22               [24] 1734 	ret
                                   1735 ;------------------------------------------------------------
                                   1736 ;Allocation info for local variables in function 'putchar_uart0'
                                   1737 ;------------------------------------------------------------
                                   1738 ;au8Data                   Allocated to registers r7 
                                   1739 ;------------------------------------------------------------
                                   1740 ;	../lib/uart.c:636: void putchar_uart0(char au8Data)
                                   1741 ;	-----------------------------------------
                                   1742 ;	 function putchar_uart0
                                   1743 ;	-----------------------------------------
      0003F3                       1744 _putchar_uart0:
      0003F3 AF 82            [24] 1745 	mov	r7,dpl
                                   1746 ;	../lib/uart.c:638: while (gu8Tx0Size >= UART0_TX_BUFF_SIZE) {
      0003F5                       1747 00101$:
      0003F5 90r00r5B         [24] 1748 	mov	dptr,#_gu8Tx0Size
      0003F8 E0               [24] 1749 	movx	a,@dptr
      0003F9 FE               [12] 1750 	mov	r6,a
      0003FA BE 10 00         [24] 1751 	cjne	r6,#0x10,00120$
      0003FD                       1752 00120$:
      0003FD 40 03            [24] 1753 	jc	00103$
                                   1754 ;	../lib/uart.c:641: nop;
      0003FF 00               [12] 1755 	NOP
      000400 80 F3            [24] 1756 	sjmp	00101$
      000402                       1757 00103$:
                                   1758 ;	../lib/uart.c:644: pu8UartTx0Buf[gu8Tx0WIdx++] = au8Data;
      000402 90r00r5D         [24] 1759 	mov	dptr,#_gu8Tx0WIdx
      000405 E0               [24] 1760 	movx	a,@dptr
      000406 FE               [12] 1761 	mov	r6,a
      000407 04               [12] 1762 	inc	a
      000408 F0               [24] 1763 	movx	@dptr,a
      000409 EE               [12] 1764 	mov	a,r6
      00040A 24r28            [12] 1765 	add	a,#_pu8UartTx0Buf
      00040C F5 82            [12] 1766 	mov	dpl,a
      00040E E4               [12] 1767 	clr	a
      00040F 34s00            [12] 1768 	addc	a,#(_pu8UartTx0Buf >> 8)
      000411 F5 83            [12] 1769 	mov	dph,a
      000413 EF               [12] 1770 	mov	a,r7
      000414 F0               [24] 1771 	movx	@dptr,a
                                   1772 ;	../lib/uart.c:645: gu8Tx0Size++;
      000415 90r00r5B         [24] 1773 	mov	dptr,#_gu8Tx0Size
      000418 E0               [24] 1774 	movx	a,@dptr
      000419 24 01            [12] 1775 	add	a,#0x01
      00041B F0               [24] 1776 	movx	@dptr,a
                                   1777 ;	../lib/uart.c:646: if (gu8Tx0WIdx == UART0_TX_BUFF_SIZE) {
      00041C 90r00r5D         [24] 1778 	mov	dptr,#_gu8Tx0WIdx
      00041F E0               [24] 1779 	movx	a,@dptr
      000420 FF               [12] 1780 	mov	r7,a
      000421 BF 10 05         [24] 1781 	cjne	r7,#0x10,00105$
                                   1782 ;	../lib/uart.c:648: gu8Tx0WIdx = 0;
      000424 90r00r5D         [24] 1783 	mov	dptr,#_gu8Tx0WIdx
      000427 E4               [12] 1784 	clr	a
      000428 F0               [24] 1785 	movx	@dptr,a
      000429                       1786 00105$:
                                   1787 ;	../lib/uart.c:650: set_TI;
                                   1788 ;	assignBit
      000429 D2 99            [12] 1789 	setb	_TI
                                   1790 ;	../lib/uart.c:651: }
      00042B 22               [24] 1791 	ret
                                   1792 ;------------------------------------------------------------
                                   1793 ;Allocation info for local variables in function 'putchar_uart1'
                                   1794 ;------------------------------------------------------------
                                   1795 ;au8Data                   Allocated to registers r7 
                                   1796 ;------------------------------------------------------------
                                   1797 ;	../lib/uart.c:653: void putchar_uart1(char au8Data)
                                   1798 ;	-----------------------------------------
                                   1799 ;	 function putchar_uart1
                                   1800 ;	-----------------------------------------
      00042C                       1801 _putchar_uart1:
      00042C AF 82            [24] 1802 	mov	r7,dpl
                                   1803 ;	../lib/uart.c:655: while (gu8Tx1Size >= UART1_TX_BUFF_SIZE) {
      00042E                       1804 00101$:
      00042E 90r00r61         [24] 1805 	mov	dptr,#_gu8Tx1Size
      000431 E0               [24] 1806 	movx	a,@dptr
      000432 FE               [12] 1807 	mov	r6,a
      000433 BE 10 00         [24] 1808 	cjne	r6,#0x10,00121$
      000436                       1809 00121$:
      000436 40 0A            [24] 1810 	jc	00103$
                                   1811 ;	../lib/uart.c:656: gu8BFCnt++;
      000438 90r00r01         [24] 1812 	mov	dptr,#_gu8BFCnt
      00043B E0               [24] 1813 	movx	a,@dptr
      00043C 24 01            [12] 1814 	add	a,#0x01
      00043E F0               [24] 1815 	movx	@dptr,a
                                   1816 ;	../lib/uart.c:659: nop;
      00043F 00               [12] 1817 	NOP
      000440 80 EC            [24] 1818 	sjmp	00101$
      000442                       1819 00103$:
                                   1820 ;	../lib/uart.c:661: gu8BNFCnt++;
      000442 90r00r00         [24] 1821 	mov	dptr,#_gu8BNFCnt
      000445 E0               [24] 1822 	movx	a,@dptr
      000446 24 01            [12] 1823 	add	a,#0x01
      000448 F0               [24] 1824 	movx	@dptr,a
                                   1825 ;	../lib/uart.c:663: clr_ES_1;
      000449 53 9C FE         [24] 1826 	anl	_EIE1,#0xfe
                                   1827 ;	../lib/uart.c:664: pu8UartTx1Buf[gu8Tx1WIdx++] = au8Data;
      00044C 90r00r63         [24] 1828 	mov	dptr,#_gu8Tx1WIdx
      00044F E0               [24] 1829 	movx	a,@dptr
      000450 FE               [12] 1830 	mov	r6,a
      000451 04               [12] 1831 	inc	a
      000452 F0               [24] 1832 	movx	@dptr,a
      000453 EE               [12] 1833 	mov	a,r6
      000454 24r48            [12] 1834 	add	a,#_pu8UartTx1Buf
      000456 F5 82            [12] 1835 	mov	dpl,a
      000458 E4               [12] 1836 	clr	a
      000459 34s00            [12] 1837 	addc	a,#(_pu8UartTx1Buf >> 8)
      00045B F5 83            [12] 1838 	mov	dph,a
      00045D EF               [12] 1839 	mov	a,r7
      00045E F0               [24] 1840 	movx	@dptr,a
                                   1841 ;	../lib/uart.c:665: gu8Tx1Size++;
      00045F 90r00r61         [24] 1842 	mov	dptr,#_gu8Tx1Size
      000462 E0               [24] 1843 	movx	a,@dptr
      000463 24 01            [12] 1844 	add	a,#0x01
      000465 F0               [24] 1845 	movx	@dptr,a
                                   1846 ;	../lib/uart.c:672: gu8Tx1WIdx &= UART1_TX_BUFF_SIZE_MSK;
      000466 90r00r63         [24] 1847 	mov	dptr,#_gu8Tx1WIdx
      000469 E0               [24] 1848 	movx	a,@dptr
      00046A 53 E0 0F         [24] 1849 	anl	acc,#0x0f
      00046D F0               [24] 1850 	movx	@dptr,a
                                   1851 ;	../lib/uart.c:679: if (gu8Tx1Size == 1) {
      00046E 90r00r61         [24] 1852 	mov	dptr,#_gu8Tx1Size
      000471 E0               [24] 1853 	movx	a,@dptr
      000472 FF               [12] 1854 	mov	r7,a
      000473 BF 01 0B         [24] 1855 	cjne	r7,#0x01,00105$
                                   1856 ;	../lib/uart.c:680: gu8BECnt++;
      000476 90r00r03         [24] 1857 	mov	dptr,#_gu8BECnt
      000479 E0               [24] 1858 	movx	a,@dptr
      00047A 24 01            [12] 1859 	add	a,#0x01
      00047C F0               [24] 1860 	movx	@dptr,a
                                   1861 ;	../lib/uart.c:682: set_TI_1;
                                   1862 ;	assignBit
      00047D D2 F9            [12] 1863 	setb	_TI_1
      00047F 80 07            [24] 1864 	sjmp	00106$
      000481                       1865 00105$:
                                   1866 ;	../lib/uart.c:685: gu8BNECnt++;
      000481 90r00r02         [24] 1867 	mov	dptr,#_gu8BNECnt
      000484 E0               [24] 1868 	movx	a,@dptr
      000485 24 01            [12] 1869 	add	a,#0x01
      000487 F0               [24] 1870 	movx	@dptr,a
      000488                       1871 00106$:
                                   1872 ;	../lib/uart.c:706: set_ES_1;
      000488 43 9C 01         [24] 1873 	orl	_EIE1,#0x01
                                   1874 ;	../lib/uart.c:707: }
      00048B 22               [24] 1875 	ret
                                   1876 ;------------------------------------------------------------
                                   1877 ;Allocation info for local variables in function 'preamble'
                                   1878 ;------------------------------------------------------------
                                   1879 ;	../lib/uart.c:710: void preamble() 
                                   1880 ;	-----------------------------------------
                                   1881 ;	 function preamble
                                   1882 ;	-----------------------------------------
      00048C                       1883 _preamble:
                                   1884 ;	../lib/uart.c:712: gu8UART = 1;
      00048C 75*00 01         [24] 1885 	mov	_gu8UART,#0x01
                                   1886 ;	../lib/uart.c:713: putchar(0xF0);
      00048F 90 00 F0         [24] 1887 	mov	dptr,#0x00f0
                                   1888 ;	../lib/uart.c:714: return;
                                   1889 ;	../lib/uart.c:715: }
      000492 02r00rE0         [24] 1890 	ljmp	_putchar
                                   1891 ;------------------------------------------------------------
                                   1892 ;Allocation info for local variables in function 'putchar_manchester'
                                   1893 ;------------------------------------------------------------
                                   1894 ;c                         Allocated to registers r7 
                                   1895 ;------------------------------------------------------------
                                   1896 ;	../lib/uart.c:717: void putchar_manchester(char c) 
                                   1897 ;	-----------------------------------------
                                   1898 ;	 function putchar_manchester
                                   1899 ;	-----------------------------------------
      000495                       1900 _putchar_manchester:
      000495 AF 82            [24] 1901 	mov	r7,dpl
                                   1902 ;	../lib/uart.c:719: gu8UART = 1;
      000497 75*00 01         [24] 1903 	mov	_gu8UART,#0x01
                                   1904 ;	../lib/uart.c:720: putchar( (gpc2B2MC[(c>>6)&0x3]<<4) | gpc2B2MC[(c>>4)&0x3]);
      00049A EF               [12] 1905 	mov	a,r7
      00049B 23               [12] 1906 	rl	a
      00049C 23               [12] 1907 	rl	a
      00049D 54 03            [12] 1908 	anl	a,#0x03
      00049F FE               [12] 1909 	mov	r6,a
      0004A0 53 06 03         [24] 1910 	anl	ar6,#0x03
      0004A3 7D 00            [12] 1911 	mov	r5,#0x00
      0004A5 EE               [12] 1912 	mov	a,r6
      0004A6 24r04            [12] 1913 	add	a,#_gpc2B2MC
      0004A8 F5 82            [12] 1914 	mov	dpl,a
      0004AA ED               [12] 1915 	mov	a,r5
      0004AB 34s00            [12] 1916 	addc	a,#(_gpc2B2MC >> 8)
      0004AD F5 83            [12] 1917 	mov	dph,a
      0004AF E0               [24] 1918 	movx	a,@dptr
      0004B0 FE               [12] 1919 	mov	r6,a
      0004B1 E4               [12] 1920 	clr	a
      0004B2 CE               [12] 1921 	xch	a,r6
      0004B3 C4               [12] 1922 	swap	a
      0004B4 CE               [12] 1923 	xch	a,r6
      0004B5 6E               [12] 1924 	xrl	a,r6
      0004B6 CE               [12] 1925 	xch	a,r6
      0004B7 54 F0            [12] 1926 	anl	a,#0xf0
      0004B9 CE               [12] 1927 	xch	a,r6
      0004BA 6E               [12] 1928 	xrl	a,r6
      0004BB FD               [12] 1929 	mov	r5,a
      0004BC EF               [12] 1930 	mov	a,r7
      0004BD C4               [12] 1931 	swap	a
      0004BE 54 0F            [12] 1932 	anl	a,#0x0f
      0004C0 FC               [12] 1933 	mov	r4,a
      0004C1 53 04 03         [24] 1934 	anl	ar4,#0x03
      0004C4 7B 00            [12] 1935 	mov	r3,#0x00
      0004C6 EC               [12] 1936 	mov	a,r4
      0004C7 24r04            [12] 1937 	add	a,#_gpc2B2MC
      0004C9 F5 82            [12] 1938 	mov	dpl,a
      0004CB EB               [12] 1939 	mov	a,r3
      0004CC 34s00            [12] 1940 	addc	a,#(_gpc2B2MC >> 8)
      0004CE F5 83            [12] 1941 	mov	dph,a
      0004D0 E0               [24] 1942 	movx	a,@dptr
      0004D1 7B 00            [12] 1943 	mov	r3,#0x00
      0004D3 4E               [12] 1944 	orl	a,r6
      0004D4 F5 82            [12] 1945 	mov	dpl,a
      0004D6 EB               [12] 1946 	mov	a,r3
      0004D7 4D               [12] 1947 	orl	a,r5
      0004D8 F5 83            [12] 1948 	mov	dph,a
      0004DA C0 07            [24] 1949 	push	ar7
      0004DC 12r00rE0         [24] 1950 	lcall	_putchar
      0004DF D0 07            [24] 1951 	pop	ar7
                                   1952 ;	../lib/uart.c:721: putchar( (gpc2B2MC[(c>>2)&0x3]<<4) | gpc2B2MC[(c>>0)&0x3]);
      0004E1 EF               [12] 1953 	mov	a,r7
      0004E2 03               [12] 1954 	rr	a
      0004E3 03               [12] 1955 	rr	a
      0004E4 54 3F            [12] 1956 	anl	a,#0x3f
      0004E6 FE               [12] 1957 	mov	r6,a
      0004E7 53 06 03         [24] 1958 	anl	ar6,#0x03
      0004EA 7D 00            [12] 1959 	mov	r5,#0x00
      0004EC EE               [12] 1960 	mov	a,r6
      0004ED 24r04            [12] 1961 	add	a,#_gpc2B2MC
      0004EF F5 82            [12] 1962 	mov	dpl,a
      0004F1 ED               [12] 1963 	mov	a,r5
      0004F2 34s00            [12] 1964 	addc	a,#(_gpc2B2MC >> 8)
      0004F4 F5 83            [12] 1965 	mov	dph,a
      0004F6 E0               [24] 1966 	movx	a,@dptr
      0004F7 FE               [12] 1967 	mov	r6,a
      0004F8 E4               [12] 1968 	clr	a
      0004F9 CE               [12] 1969 	xch	a,r6
      0004FA C4               [12] 1970 	swap	a
      0004FB CE               [12] 1971 	xch	a,r6
      0004FC 6E               [12] 1972 	xrl	a,r6
      0004FD CE               [12] 1973 	xch	a,r6
      0004FE 54 F0            [12] 1974 	anl	a,#0xf0
      000500 CE               [12] 1975 	xch	a,r6
      000501 6E               [12] 1976 	xrl	a,r6
      000502 FD               [12] 1977 	mov	r5,a
      000503 53 07 03         [24] 1978 	anl	ar7,#0x03
      000506 7C 00            [12] 1979 	mov	r4,#0x00
      000508 EF               [12] 1980 	mov	a,r7
      000509 24r04            [12] 1981 	add	a,#_gpc2B2MC
      00050B F5 82            [12] 1982 	mov	dpl,a
      00050D EC               [12] 1983 	mov	a,r4
      00050E 34s00            [12] 1984 	addc	a,#(_gpc2B2MC >> 8)
      000510 F5 83            [12] 1985 	mov	dph,a
      000512 E0               [24] 1986 	movx	a,@dptr
      000513 7C 00            [12] 1987 	mov	r4,#0x00
      000515 4E               [12] 1988 	orl	a,r6
      000516 F5 82            [12] 1989 	mov	dpl,a
      000518 EC               [12] 1990 	mov	a,r4
      000519 4D               [12] 1991 	orl	a,r5
      00051A F5 83            [12] 1992 	mov	dph,a
                                   1993 ;	../lib/uart.c:722: return;
                                   1994 ;	../lib/uart.c:723: }
      00051C 02r00rE0         [24] 1995 	ljmp	_putchar
                                   1996 ;------------------------------------------------------------
                                   1997 ;Allocation info for local variables in function 'chk_manchester'
                                   1998 ;------------------------------------------------------------
                                   1999 ;c                         Allocated to registers r7 
                                   2000 ;------------------------------------------------------------
                                   2001 ;	../lib/uart.c:725: UINT8 chk_manchester(UINT8 c)
                                   2002 ;	-----------------------------------------
                                   2003 ;	 function chk_manchester
                                   2004 ;	-----------------------------------------
      00051F                       2005 _chk_manchester:
                                   2006 ;	../lib/uart.c:739: if (gpcMC22B[(c>>4)] == 0xF) {
      00051F E5 82            [12] 2007 	mov	a,dpl
      000521 FF               [12] 2008 	mov	r7,a
      000522 C4               [12] 2009 	swap	a
      000523 54 0F            [12] 2010 	anl	a,#0x0f
      000525 24r08            [12] 2011 	add	a,#_gpcMC22B
      000527 F5 82            [12] 2012 	mov	dpl,a
      000529 E4               [12] 2013 	clr	a
      00052A 34s00            [12] 2014 	addc	a,#(_gpcMC22B >> 8)
      00052C F5 83            [12] 2015 	mov	dph,a
      00052E E0               [24] 2016 	movx	a,@dptr
      00052F FE               [12] 2017 	mov	r6,a
      000530 BE 0F 04         [24] 2018 	cjne	r6,#0x0f,00102$
                                   2019 ;	../lib/uart.c:740: return MC_NOT_OK;
      000533 75 82 00         [24] 2020 	mov	dpl,#0x00
      000536 22               [24] 2021 	ret
      000537                       2022 00102$:
                                   2023 ;	../lib/uart.c:742: if (gpcMC22B[(c&0xF)] == 0xF) {
      000537 53 07 0F         [24] 2024 	anl	ar7,#0x0f
      00053A 7E 00            [12] 2025 	mov	r6,#0x00
      00053C EF               [12] 2026 	mov	a,r7
      00053D 24r08            [12] 2027 	add	a,#_gpcMC22B
      00053F F5 82            [12] 2028 	mov	dpl,a
      000541 EE               [12] 2029 	mov	a,r6
      000542 34s00            [12] 2030 	addc	a,#(_gpcMC22B >> 8)
      000544 F5 83            [12] 2031 	mov	dph,a
      000546 E0               [24] 2032 	movx	a,@dptr
      000547 FF               [12] 2033 	mov	r7,a
      000548 BF 0F 04         [24] 2034 	cjne	r7,#0x0f,00104$
                                   2035 ;	../lib/uart.c:743: return MC_NOT_OK;
      00054B 75 82 00         [24] 2036 	mov	dpl,#0x00
      00054E 22               [24] 2037 	ret
      00054F                       2038 00104$:
                                   2039 ;	../lib/uart.c:745: return MC_OK;
      00054F 75 82 01         [24] 2040 	mov	dpl,#0x01
                                   2041 ;	../lib/uart.c:746: }
      000552 22               [24] 2042 	ret
                                   2043 ;------------------------------------------------------------
                                   2044 ;Allocation info for local variables in function 'conv_manchester2nibble'
                                   2045 ;------------------------------------------------------------
                                   2046 ;c                         Allocated to registers r7 
                                   2047 ;------------------------------------------------------------
                                   2048 ;	../lib/uart.c:748: UINT8 conv_manchester2nibble(UINT8 c)
                                   2049 ;	-----------------------------------------
                                   2050 ;	 function conv_manchester2nibble
                                   2051 ;	-----------------------------------------
      000553                       2052 _conv_manchester2nibble:
                                   2053 ;	../lib/uart.c:762: return (gpcMC22B[c>>4]<<2) | (gpcMC22B[c&0xF]); 
      000553 E5 82            [12] 2054 	mov	a,dpl
      000555 FF               [12] 2055 	mov	r7,a
      000556 C4               [12] 2056 	swap	a
      000557 54 0F            [12] 2057 	anl	a,#0x0f
      000559 24r08            [12] 2058 	add	a,#_gpcMC22B
      00055B F5 82            [12] 2059 	mov	dpl,a
      00055D E4               [12] 2060 	clr	a
      00055E 34s00            [12] 2061 	addc	a,#(_gpcMC22B >> 8)
      000560 F5 83            [12] 2062 	mov	dph,a
      000562 E0               [24] 2063 	movx	a,@dptr
      000563 25 E0            [12] 2064 	add	a,acc
      000565 25 E0            [12] 2065 	add	a,acc
      000567 FE               [12] 2066 	mov	r6,a
      000568 53 07 0F         [24] 2067 	anl	ar7,#0x0f
      00056B 7D 00            [12] 2068 	mov	r5,#0x00
      00056D EF               [12] 2069 	mov	a,r7
      00056E 24r08            [12] 2070 	add	a,#_gpcMC22B
      000570 F5 82            [12] 2071 	mov	dpl,a
      000572 ED               [12] 2072 	mov	a,r5
      000573 34s00            [12] 2073 	addc	a,#(_gpcMC22B >> 8)
      000575 F5 83            [12] 2074 	mov	dph,a
      000577 E0               [24] 2075 	movx	a,@dptr
      000578 4E               [12] 2076 	orl	a,r6
      000579 F5 82            [12] 2077 	mov	dpl,a
                                   2078 ;	../lib/uart.c:763: }
      00057B 22               [24] 2079 	ret
                                   2080 	.area CSEG    (CODE)
                                   2081 	.area CONST   (CODE)
                                   2082 	.area CABS    (ABS,CODE)
